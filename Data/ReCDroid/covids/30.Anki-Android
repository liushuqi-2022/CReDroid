<android.support.compat.BuildConfig: V <init>()>
<android.support.compat.R: V <init>()>
<android.support.coreui.BuildConfig: V <init>()>
<android.support.coreui.R: V <init>()>
<android.support.coreutils.BuildConfig: V <init>()>
<android.support.coreutils.R: V <init>()>
<android.support.customtabs.BuildConfig: V <init>()>
<android.support.customtabs.CustomTabsCallback: V <init>()>
<android.support.customtabs.CustomTabsCallback: V extraCallback(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsCallback: V onNavigationEvent(ILandroid/os/Bundle;)>
<android.support.customtabs.CustomTabsClient: V <init>(Landroid/support/customtabs/ICustomTabsService;Landroid/content/ComponentName;)>
<android.support.customtabs.CustomTabsClient: Z bindCustomTabsService(Landroid/content/Context;Ljava/lang/String;Landroid/support/customtabs/CustomTabsServiceConnection;)>
<android.support.customtabs.CustomTabsClient: Z connectAndInitialize(Landroid/content/Context;Ljava/lang/String;)>
<android.support.customtabs.CustomTabsClient: Ljava/lang/String; getPackageName(Landroid/content/Context;Ljava/util/List;)>
<android.support.customtabs.CustomTabsClient: Ljava/lang/String; getPackageName(Landroid/content/Context;Ljava/util/List;Z)>
<android.support.customtabs.CustomTabsClient: Landroid/os/Bundle; extraCommand(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsClient: Landroid/support/customtabs/CustomTabsSession; newSession(Landroid/support/customtabs/CustomTabsCallback;)>
<android.support.customtabs.CustomTabsClient: Z warmup(J)>
<android.support.customtabs.CustomTabsIntent$Builder: V <init>()>
<android.support.customtabs.CustomTabsIntent$Builder: V <init>(Landroid/support/customtabs/CustomTabsSession;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; addDefaultShareMenuItem()>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; addMenuItem(Ljava/lang/String;Landroid/app/PendingIntent;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; addToolbarItem(ILandroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent; build()>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; enableUrlBarHiding()>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setActionButton(Landroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setActionButton(Landroid/graphics/Bitmap;Ljava/lang/String;Landroid/app/PendingIntent;Z)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setCloseButtonIcon(Landroid/graphics/Bitmap;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setExitAnimations(Landroid/content/Context;II)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setInstantAppsEnabled(Z)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setSecondaryToolbarColor(I)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setSecondaryToolbarViews(Landroid/widget/RemoteViews;[ILandroid/app/PendingIntent;)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setShowTitle(Z)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setStartAnimations(Landroid/content/Context;II)>
<android.support.customtabs.CustomTabsIntent$Builder: Landroid/support/customtabs/CustomTabsIntent$Builder; setToolbarColor(I)>
<android.support.customtabs.CustomTabsIntent: V <init>(Landroid/content/Intent;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsIntent: V <init>(Landroid/content/Intent;Landroid/os/Bundle;Landroid/support/customtabs/CustomTabsIntent$1;)>
<android.support.customtabs.CustomTabsIntent: I getMaxToolbarItems()>
<android.support.customtabs.CustomTabsIntent: Landroid/content/Intent; setAlwaysUseBrowserUI(Landroid/content/Intent;)>
<android.support.customtabs.CustomTabsIntent: Z shouldAlwaysUseBrowserUI(Landroid/content/Intent;)>
<android.support.customtabs.CustomTabsIntent: V launchUrl(Landroid/content/Context;Landroid/net/Uri;)>
<android.support.customtabs.CustomTabsService$1$1: V <init>(Landroid/support/customtabs/CustomTabsService$1;Landroid/support/customtabs/CustomTabsSessionToken;)>
<android.support.customtabs.CustomTabsService$1$1: V binderDied()>
<android.support.customtabs.CustomTabsService: V <init>()>
<android.support.customtabs.CustomTabsService: Ljava/util/Map; access$000(Landroid/support/customtabs/CustomTabsService;)>
<android.support.customtabs.CustomTabsService: Z cleanUpSession(Landroid/support/customtabs/CustomTabsSessionToken;)>
<android.support.customtabs.CustomTabsService: Landroid/os/IBinder; onBind(Landroid/content/Intent;)>
<android.support.customtabs.CustomTabsServiceConnection: V <init>()>
<android.support.customtabs.CustomTabsServiceConnection: V onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)>
<android.support.customtabs.CustomTabsSession: V <init>(Landroid/support/customtabs/ICustomTabsService;Landroid/support/customtabs/ICustomTabsCallback;Landroid/content/ComponentName;)>
<android.support.customtabs.CustomTabsSession: Landroid/os/IBinder; getBinder()>
<android.support.customtabs.CustomTabsSession: Landroid/content/ComponentName; getComponentName()>
<android.support.customtabs.CustomTabsSession: Z mayLaunchUrl(Landroid/net/Uri;Landroid/os/Bundle;Ljava/util/List;)>
<android.support.customtabs.CustomTabsSession: Z setActionButton(Landroid/graphics/Bitmap;Ljava/lang/String;)>
<android.support.customtabs.CustomTabsSession: Z setSecondaryToolbarViews(Landroid/widget/RemoteViews;[ILandroid/app/PendingIntent;)>
<android.support.customtabs.CustomTabsSession: Z setToolbarItem(ILandroid/graphics/Bitmap;Ljava/lang/String;)>
<android.support.customtabs.CustomTabsSessionToken: V <init>(Landroid/support/customtabs/ICustomTabsCallback;)>
<android.support.customtabs.CustomTabsSessionToken: Landroid/support/customtabs/ICustomTabsCallback; access$000(Landroid/support/customtabs/CustomTabsSessionToken;)>
<android.support.customtabs.CustomTabsSessionToken: Landroid/support/customtabs/CustomTabsSessionToken; getSessionTokenFromIntent(Landroid/content/Intent;)>
<android.support.customtabs.CustomTabsSessionToken: Z equals(Ljava/lang/Object;)>
<android.support.customtabs.CustomTabsSessionToken: Landroid/support/customtabs/CustomTabsCallback; getCallback()>
<android.support.customtabs.CustomTabsSessionToken: Landroid/os/IBinder; getCallbackBinder()>
<android.support.customtabs.CustomTabsSessionToken: I hashCode()>
<android.support.customtabs.R: V <init>()>
<android.support.design.BuildConfig: V <init>()>
<android.support.design.R$anim: V <init>()>
<android.support.design.R$animator: V <init>()>
<android.support.design.R$attr: V <init>()>
<android.support.design.R$bool: V <init>()>
<android.support.design.R$color: V <init>()>
<android.support.design.R$dimen: V <init>()>
<android.support.design.R$drawable: V <init>()>
<android.support.design.R$id: V <init>()>
<android.support.design.R$integer: V <init>()>
<android.support.design.R$layout: V <init>()>
<android.support.design.R$string: V <init>()>
<android.support.design.R$style: V <init>()>
<android.support.design.R$styleable: V <clinit>()>
<android.support.design.R$styleable: V <init>()>
<android.support.design.R: V <init>()>
<android.support.design.internal.BaselineLayout: V <init>(Landroid/content/Context;)>
<android.support.design.internal.BaselineLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.BaselineLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.BaselineLayout: I getBaseline()>
<android.support.design.internal.BaselineLayout: V onLayout(ZIIII)>
<android.support.design.internal.BaselineLayout: V onMeasure(II)>
<android.support.design.internal.BottomNavigationAnimationHelperBase: V <init>()>
<android.support.design.internal.BottomNavigationAnimationHelperBase: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.design.internal.BottomNavigationMenuView$1: V <init>(Landroid/support/design/internal/BottomNavigationMenuView;)>
<android.support.design.internal.BottomNavigationMenuView$1: V onClick(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuPresenter$1: V <init>(Landroid/support/design/internal/NavigationMenuPresenter;)>
<android.support.design.internal.NavigationMenuPresenter$1: V onClick(Landroid/view/View;)>
<android.support.design.internal.ParcelableSparseArray: V <clinit>()>
<android.support.design.internal.ParcelableSparseArray: V <init>()>
<android.support.design.internal.ParcelableSparseArray: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.internal.ParcelableSparseArray: I describeContents()>
<android.support.design.internal.ParcelableSparseArray: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.internal.ScrimInsetsFrameLayout: V <init>(Landroid/content/Context;)>
<android.support.design.internal.ScrimInsetsFrameLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.ScrimInsetsFrameLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.ScrimInsetsFrameLayout: V draw(Landroid/graphics/Canvas;)>
<android.support.design.internal.ScrimInsetsFrameLayout: V onAttachedToWindow()>
<android.support.design.internal.ScrimInsetsFrameLayout: V onDetachedFromWindow()>
<android.support.design.internal.ScrimInsetsFrameLayout: V onInsetsChanged(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.internal.TextScale$1: V <init>(Landroid/support/design/internal/TextScale;Landroid/widget/TextView;)>
<android.support.design.internal.TextScale$1: V onAnimationUpdate(Landroid/animation/ValueAnimator;)>
<android.support.design.widget.AnimationUtils$AnimationListenerAdapter: V <init>()>
<android.support.design.widget.AnimationUtils$AnimationListenerAdapter: V onAnimationEnd(Landroid/view/animation/Animation;)>
<android.support.design.widget.AnimationUtils$AnimationListenerAdapter: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<android.support.design.widget.AnimationUtils$AnimationListenerAdapter: V onAnimationStart(Landroid/view/animation/Animation;)>
<android.support.design.widget.AnimationUtils: V <clinit>()>
<android.support.design.widget.AnimationUtils: V <init>()>
<android.support.design.widget.AnimationUtils: F lerp(FFF)>
<android.support.design.widget.AnimationUtils: I lerp(IIF)>
<android.support.design.widget.AppBarLayout$Behavior$DragCallback: V <init>()>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(II)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(IIF)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(Landroid/support/design/widget/AppBarLayout$LayoutParams;)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$MarginLayoutParams;)>
<android.support.design.widget.AppBarLayout$LayoutParams: V <init>(Landroid/widget/LinearLayout$LayoutParams;)>
<android.support.design.widget.AppBarLayout$LayoutParams: I getScrollFlags()>
<android.support.design.widget.AppBarLayout$LayoutParams: Landroid/view/animation/Interpolator; getScrollInterpolator()>
<android.support.design.widget.AppBarLayout$LayoutParams: Z isCollapsible()>
<android.support.design.widget.AppBarLayout$LayoutParams: V setScrollFlags(I)>
<android.support.design.widget.AppBarLayout$LayoutParams: V setScrollInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.AppBarLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.AppBarLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout: V invalidateScrollRanges()>
<android.support.design.widget.AppBarLayout: Z setCollapsibleState(Z)>
<android.support.design.widget.AppBarLayout: V updateCollapsible()>
<android.support.design.widget.AppBarLayout: V addOnOffsetChangedListener(Landroid/support/design/widget/AppBarLayout$OnOffsetChangedListener;)>
<android.support.design.widget.AppBarLayout: Z checkLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.AppBarLayout: V dispatchOffsetUpdates(I)>
<android.support.design.widget.AppBarLayout: Landroid/support/design/widget/AppBarLayout$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.AppBarLayout: Landroid/view/ViewGroup$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.AppBarLayout: Landroid/widget/LinearLayout$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.AppBarLayout: Landroid/support/design/widget/AppBarLayout$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout: Landroid/support/design/widget/AppBarLayout$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.AppBarLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.AppBarLayout: Landroid/widget/LinearLayout$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout: Landroid/widget/LinearLayout$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.AppBarLayout: I getDownNestedPreScrollRange()>
<android.support.design.widget.AppBarLayout: I getDownNestedScrollRange()>
<android.support.design.widget.AppBarLayout: I getMinimumHeightForVisibleOverlappingContent()>
<android.support.design.widget.AppBarLayout: I getPendingAction()>
<android.support.design.widget.AppBarLayout: F getTargetElevation()>
<android.support.design.widget.AppBarLayout: I getTopInset()>
<android.support.design.widget.AppBarLayout: I getTotalScrollRange()>
<android.support.design.widget.AppBarLayout: I getUpNestedPreScrollRange()>
<android.support.design.widget.AppBarLayout: Z hasChildWithInterpolator()>
<android.support.design.widget.AppBarLayout: Z hasScrollableChildren()>
<android.support.design.widget.AppBarLayout: [I onCreateDrawableState(I)>
<android.support.design.widget.AppBarLayout: V onLayout(ZIIII)>
<android.support.design.widget.AppBarLayout: V onMeasure(II)>
<android.support.design.widget.AppBarLayout: Landroid/support/v4/view/WindowInsetsCompat; onWindowInsetChanged(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.AppBarLayout: V removeOnOffsetChangedListener(Landroid/support/design/widget/AppBarLayout$OnOffsetChangedListener;)>
<android.support.design.widget.AppBarLayout: V resetPendingAction()>
<android.support.design.widget.AppBarLayout: Z setCollapsedState(Z)>
<android.support.design.widget.AppBarLayout: V setExpanded(Z)>
<android.support.design.widget.AppBarLayout: V setExpanded(ZZ)>
<android.support.design.widget.AppBarLayout: V setOrientation(I)>
<android.support.design.widget.AppBarLayout: V setTargetElevation(F)>
<android.support.design.widget.BaseTransientBottomBar$10: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;I)>
<android.support.design.widget.BaseTransientBottomBar$10: V onAnimationEnd(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$10: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$10: V onAnimationStart(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$1: V <init>()>
<android.support.design.widget.BaseTransientBottomBar$1: Z handleMessage(Landroid/os/Message;)>
<android.support.design.widget.BaseTransientBottomBar$5$1: V <init>(Landroid/support/design/widget/BaseTransientBottomBar$5;)>
<android.support.design.widget.BaseTransientBottomBar$5$1: V run()>
<android.support.design.widget.BaseTransientBottomBar$8: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$8: V onAnimationEnd(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$8: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$8: V onAnimationStart(Landroid/view/animation/Animation;)>
<android.support.design.widget.BaseTransientBottomBar$BaseCallback: V <init>()>
<android.support.design.widget.BaseTransientBottomBar$BaseCallback: V onDismissed(Ljava/lang/Object;I)>
<android.support.design.widget.BaseTransientBottomBar$BaseCallback: V onShown(Ljava/lang/Object;)>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V onAttachedToWindow()>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V onDetachedFromWindow()>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V onLayout(ZIIII)>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V setOnAttachStateChangeListener(Landroid/support/design/widget/BaseTransientBottomBar$OnAttachStateChangeListener;)>
<android.support.design.widget.BaseTransientBottomBar$SnackbarBaseLayout: V setOnLayoutChangeListener(Landroid/support/design/widget/BaseTransientBottomBar$OnLayoutChangeListener;)>
<android.support.design.widget.BaseTransientBottomBar: V <clinit>()>
<android.support.design.widget.BaseTransientBottomBar: V <init>(Landroid/view/ViewGroup;Landroid/view/View;Landroid/support/design/widget/BaseTransientBottomBar$ContentViewCallback;)>
<android.support.design.widget.BaseTransientBottomBar: Landroid/support/design/widget/BaseTransientBottomBar$ContentViewCallback; access$000(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar: V animateViewOut(I)>
<android.support.design.widget.BaseTransientBottomBar: Landroid/support/design/widget/BaseTransientBottomBar; addCallback(Landroid/support/design/widget/BaseTransientBottomBar$BaseCallback;)>
<android.support.design.widget.BaseTransientBottomBar: V animateViewIn()>
<android.support.design.widget.BaseTransientBottomBar: V dismiss()>
<android.support.design.widget.BaseTransientBottomBar: V dispatchDismiss(I)>
<android.support.design.widget.BaseTransientBottomBar: Landroid/content/Context; getContext()>
<android.support.design.widget.BaseTransientBottomBar: I getDuration()>
<android.support.design.widget.BaseTransientBottomBar: Landroid/view/View; getView()>
<android.support.design.widget.BaseTransientBottomBar: V hideView(I)>
<android.support.design.widget.BaseTransientBottomBar: Z isShown()>
<android.support.design.widget.BaseTransientBottomBar: Z isShownOrQueued()>
<android.support.design.widget.BaseTransientBottomBar: V onViewHidden(I)>
<android.support.design.widget.BaseTransientBottomBar: V onViewShown()>
<android.support.design.widget.BaseTransientBottomBar: Landroid/support/design/widget/BaseTransientBottomBar; removeCallback(Landroid/support/design/widget/BaseTransientBottomBar$BaseCallback;)>
<android.support.design.widget.BaseTransientBottomBar: Landroid/support/design/widget/BaseTransientBottomBar; setDuration(I)>
<android.support.design.widget.BaseTransientBottomBar: Z shouldAnimate()>
<android.support.design.widget.BaseTransientBottomBar: V show()>
<android.support.design.widget.BaseTransientBottomBar: V showView()>
<android.support.design.widget.BottomNavigationView: V <clinit>()>
<android.support.design.widget.BottomNavigationView: V <init>(Landroid/content/Context;)>
<android.support.design.widget.BottomNavigationView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.BottomNavigationView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.BottomNavigationView: Landroid/support/design/widget/BottomNavigationView$OnNavigationItemSelectedListener; access$000(Landroid/support/design/widget/BottomNavigationView;)>
<android.support.design.widget.BottomNavigationView: V addCompatibilityTopDivider(Landroid/content/Context;)>
<android.support.design.widget.BottomNavigationView: Landroid/content/res/ColorStateList; createDefaultColorStateList(I)>
<android.support.design.widget.BottomNavigationView: Landroid/view/MenuInflater; getMenuInflater()>
<android.support.design.widget.BottomNavigationView: I getItemBackgroundResource()>
<android.support.design.widget.BottomNavigationView: Landroid/content/res/ColorStateList; getItemIconTintList()>
<android.support.design.widget.BottomNavigationView: Landroid/content/res/ColorStateList; getItemTextColor()>
<android.support.design.widget.BottomNavigationView: I getMaxItemCount()>
<android.support.design.widget.BottomNavigationView: Landroid/view/Menu; getMenu()>
<android.support.design.widget.BottomNavigationView: V inflateMenu(I)>
<android.support.design.widget.BottomNavigationView: V setItemBackgroundResource(I)>
<android.support.design.widget.BottomNavigationView: V setItemIconTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.BottomNavigationView: V setItemTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.BottomNavigationView: V setOnNavigationItemSelectedListener(Landroid/support/design/widget/BottomNavigationView$OnNavigationItemSelectedListener;)>
<android.support.design.widget.BottomSheetBehavior$1: V <init>(Landroid/support/design/widget/BottomSheetBehavior;Landroid/view/View;I)>
<android.support.design.widget.BottomSheetBehavior$1: V run()>
<android.support.design.widget.BottomSheetBehavior$BottomSheetCallback: V <init>()>
<android.support.design.widget.BottomSheetBehavior$SettleRunnable: V <init>(Landroid/support/design/widget/BottomSheetBehavior;Landroid/view/View;I)>
<android.support.design.widget.BottomSheetBehavior$SettleRunnable: V run()>
<android.support.design.widget.BottomSheetDialog$1: V <init>(Landroid/support/design/widget/BottomSheetDialog;)>
<android.support.design.widget.BottomSheetDialog$1: V onClick(Landroid/view/View;)>
<android.support.design.widget.CircularBorderDrawable: V <init>()>
<android.support.design.widget.CircularBorderDrawable: Landroid/graphics/Shader; createGradientShader()>
<android.support.design.widget.CircularBorderDrawable: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.CircularBorderDrawable: I getOpacity()>
<android.support.design.widget.CircularBorderDrawable: Z getPadding(Landroid/graphics/Rect;)>
<android.support.design.widget.CircularBorderDrawable: Z isStateful()>
<android.support.design.widget.CircularBorderDrawable: V onBoundsChange(Landroid/graphics/Rect;)>
<android.support.design.widget.CircularBorderDrawable: Z onStateChange([I)>
<android.support.design.widget.CircularBorderDrawable: V setAlpha(I)>
<android.support.design.widget.CircularBorderDrawable: V setBorderTint(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.CircularBorderDrawable: V setBorderWidth(F)>
<android.support.design.widget.CircularBorderDrawable: V setColorFilter(Landroid/graphics/ColorFilter;)>
<android.support.design.widget.CircularBorderDrawable: V setGradientColors(IIII)>
<android.support.design.widget.CircularBorderDrawable: V setRotation(F)>
<android.support.design.widget.CollapsingTextHelper: V <clinit>()>
<android.support.design.widget.CollapsingTextHelper: V <init>(Landroid/view/View;)>
<android.support.design.widget.CollapsingTextHelper: I blendColors(IIF)>
<android.support.design.widget.CollapsingTextHelper: V calculateBaseOffsets()>
<android.support.design.widget.CollapsingTextHelper: V calculateCurrentOffsets()>
<android.support.design.widget.CollapsingTextHelper: Z calculateIsRtl(Ljava/lang/CharSequence;)>
<android.support.design.widget.CollapsingTextHelper: V calculateOffsets(F)>
<android.support.design.widget.CollapsingTextHelper: V calculateUsingTextSize(F)>
<android.support.design.widget.CollapsingTextHelper: V clearTexture()>
<android.support.design.widget.CollapsingTextHelper: V ensureExpandedTexture()>
<android.support.design.widget.CollapsingTextHelper: I getCurrentCollapsedTextColor()>
<android.support.design.widget.CollapsingTextHelper: I getCurrentExpandedTextColor()>
<android.support.design.widget.CollapsingTextHelper: V interpolateBounds(F)>
<android.support.design.widget.CollapsingTextHelper: Z isClose(FF)>
<android.support.design.widget.CollapsingTextHelper: F lerp(FFFLandroid/view/animation/Interpolator;)>
<android.support.design.widget.CollapsingTextHelper: Landroid/graphics/Typeface; readFontFamilyTypeface(I)>
<android.support.design.widget.CollapsingTextHelper: Z rectEquals(Landroid/graphics/Rect;IIII)>
<android.support.design.widget.CollapsingTextHelper: V setInterpolatedTextSize(F)>
<android.support.design.widget.CollapsingTextHelper: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.CollapsingTextHelper: Landroid/content/res/ColorStateList; getCollapsedTextColor()>
<android.support.design.widget.CollapsingTextHelper: I getCollapsedTextGravity()>
<android.support.design.widget.CollapsingTextHelper: F getCollapsedTextSize()>
<android.support.design.widget.CollapsingTextHelper: Landroid/graphics/Typeface; getCollapsedTypeface()>
<android.support.design.widget.CollapsingTextHelper: Landroid/content/res/ColorStateList; getExpandedTextColor()>
<android.support.design.widget.CollapsingTextHelper: I getExpandedTextGravity()>
<android.support.design.widget.CollapsingTextHelper: F getExpandedTextSize()>
<android.support.design.widget.CollapsingTextHelper: Landroid/graphics/Typeface; getExpandedTypeface()>
<android.support.design.widget.CollapsingTextHelper: F getExpansionFraction()>
<android.support.design.widget.CollapsingTextHelper: Ljava/lang/CharSequence; getText()>
<android.support.design.widget.CollapsingTextHelper: Z isStateful()>
<android.support.design.widget.CollapsingTextHelper: V onBoundsChanged()>
<android.support.design.widget.CollapsingTextHelper: V recalculate()>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedBounds(IIII)>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedTextAppearance(I)>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedTextGravity(I)>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedTextSize(F)>
<android.support.design.widget.CollapsingTextHelper: V setCollapsedTypeface(Landroid/graphics/Typeface;)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedBounds(IIII)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedTextAppearance(I)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedTextGravity(I)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedTextSize(F)>
<android.support.design.widget.CollapsingTextHelper: V setExpandedTypeface(Landroid/graphics/Typeface;)>
<android.support.design.widget.CollapsingTextHelper: V setExpansionFraction(F)>
<android.support.design.widget.CollapsingTextHelper: V setPositionInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.CollapsingTextHelper: Z setState([I)>
<android.support.design.widget.CollapsingTextHelper: V setText(Ljava/lang/CharSequence;)>
<android.support.design.widget.CollapsingTextHelper: V setTextSizeInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.CollapsingTextHelper: V setTypefaces(Landroid/graphics/Typeface;)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(II)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(III)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$MarginLayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V <init>(Landroid/widget/FrameLayout$LayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: I getCollapseMode()>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: F getParallaxMultiplier()>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V setCollapseMode(I)>
<android.support.design.widget.CollapsingToolbarLayout$LayoutParams: V setParallaxMultiplier(F)>
<android.support.design.widget.CollapsingToolbarLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.CollapsingToolbarLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CollapsingToolbarLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.CollapsingToolbarLayout: V animateScrim(I)>
<android.support.design.widget.CollapsingToolbarLayout: V ensureToolbar()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/view/View; findDirectChild(Landroid/view/View;)>
<android.support.design.widget.CollapsingToolbarLayout: I getHeightWithMargins(Landroid/view/View;)>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/support/design/widget/ViewOffsetHelper; getViewOffsetHelper(Landroid/view/View;)>
<android.support.design.widget.CollapsingToolbarLayout: Z isToolbarChild(Landroid/view/View;)>
<android.support.design.widget.CollapsingToolbarLayout: V updateDummyView()>
<android.support.design.widget.CollapsingToolbarLayout: Z checkLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.CollapsingToolbarLayout: Z drawChild(Landroid/graphics/Canvas;Landroid/view/View;J)>
<android.support.design.widget.CollapsingToolbarLayout: V drawableStateChanged()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/support/design/widget/CollapsingToolbarLayout$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/view/ViewGroup$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/widget/FrameLayout$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/widget/FrameLayout$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/widget/FrameLayout$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CollapsingToolbarLayout: I getCollapsedTitleGravity()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/graphics/Typeface; getCollapsedTitleTypeface()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/graphics/drawable/Drawable; getContentScrim()>
<android.support.design.widget.CollapsingToolbarLayout: I getExpandedTitleGravity()>
<android.support.design.widget.CollapsingToolbarLayout: I getExpandedTitleMarginBottom()>
<android.support.design.widget.CollapsingToolbarLayout: I getExpandedTitleMarginEnd()>
<android.support.design.widget.CollapsingToolbarLayout: I getExpandedTitleMarginStart()>
<android.support.design.widget.CollapsingToolbarLayout: I getExpandedTitleMarginTop()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/graphics/Typeface; getExpandedTitleTypeface()>
<android.support.design.widget.CollapsingToolbarLayout: I getMaxOffsetForPinChild(Landroid/view/View;)>
<android.support.design.widget.CollapsingToolbarLayout: I getScrimAlpha()>
<android.support.design.widget.CollapsingToolbarLayout: J getScrimAnimationDuration()>
<android.support.design.widget.CollapsingToolbarLayout: I getScrimVisibleHeightTrigger()>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/graphics/drawable/Drawable; getStatusBarScrim()>
<android.support.design.widget.CollapsingToolbarLayout: Ljava/lang/CharSequence; getTitle()>
<android.support.design.widget.CollapsingToolbarLayout: Z isTitleEnabled()>
<android.support.design.widget.CollapsingToolbarLayout: V onAttachedToWindow()>
<android.support.design.widget.CollapsingToolbarLayout: V onDetachedFromWindow()>
<android.support.design.widget.CollapsingToolbarLayout: V onLayout(ZIIII)>
<android.support.design.widget.CollapsingToolbarLayout: V onMeasure(II)>
<android.support.design.widget.CollapsingToolbarLayout: V onSizeChanged(IIII)>
<android.support.design.widget.CollapsingToolbarLayout: Landroid/support/v4/view/WindowInsetsCompat; onWindowInsetChanged(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CollapsingToolbarLayout: V setCollapsedTitleGravity(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setCollapsedTitleTextAppearance(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setCollapsedTitleTextColor(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setCollapsedTitleTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.CollapsingToolbarLayout: V setCollapsedTitleTypeface(Landroid/graphics/Typeface;)>
<android.support.design.widget.CollapsingToolbarLayout: V setContentScrim(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.CollapsingToolbarLayout: V setContentScrimColor(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setContentScrimResource(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleColor(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleGravity(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleMargin(IIII)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleMarginBottom(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleMarginEnd(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleMarginStart(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleMarginTop(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleTextAppearance(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.CollapsingToolbarLayout: V setExpandedTitleTypeface(Landroid/graphics/Typeface;)>
<android.support.design.widget.CollapsingToolbarLayout: V setScrimAlpha(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setScrimAnimationDuration(J)>
<android.support.design.widget.CollapsingToolbarLayout: V setScrimVisibleHeightTrigger(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setScrimsShown(Z)>
<android.support.design.widget.CollapsingToolbarLayout: V setScrimsShown(ZZ)>
<android.support.design.widget.CollapsingToolbarLayout: V setStatusBarScrim(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.CollapsingToolbarLayout: V setStatusBarScrimColor(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setStatusBarScrimResource(I)>
<android.support.design.widget.CollapsingToolbarLayout: V setTitle(Ljava/lang/CharSequence;)>
<android.support.design.widget.CollapsingToolbarLayout: V setTitleEnabled(Z)>
<android.support.design.widget.CollapsingToolbarLayout: V setVisibility(I)>
<android.support.design.widget.CollapsingToolbarLayout: V updateScrimVisibility()>
<android.support.design.widget.CollapsingToolbarLayout: Z verifyDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.CoordinatorLayout$Behavior: V <init>()>
<android.support.design.widget.CoordinatorLayout$Behavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Ljava/lang/Object; getTag(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: V setTag(Landroid/view/View;Ljava/lang/Object;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z blocksInteractionBelow(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z getInsetDodgeRect(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout$Behavior: I getScrimColor(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: F getScrimOpacity(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z isDirty(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z layoutDependsOn(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onAttachedToLayoutParams(Landroid/support/design/widget/CoordinatorLayout$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onDependentViewRemoved(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onDetachedFromLayoutParams()>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onMeasureChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;IIII)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onNestedFling(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;FFZ)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onNestedPreFling(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;FF)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onNestedPreScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;II[I)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;IIII)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onNestedScrollAccepted(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onRequestChildRectangleOnScreen(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/graphics/Rect;Z)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onRestoreInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/os/Parcelable;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Landroid/os/Parcelable; onSaveInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onStartNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout$Behavior: V onStopNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$Behavior: Z onTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.CoordinatorLayout$HierarchyChangeListener: V <init>(Landroid/support/design/widget/CoordinatorLayout;)>
<android.support.design.widget.CoordinatorLayout$HierarchyChangeListener: V onChildViewAdded(Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$HierarchyChangeListener: V onChildViewRemoved(Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V <init>(II)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V <init>(Landroid/support/design/widget/CoordinatorLayout$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V <init>(Landroid/view/ViewGroup$MarginLayoutParams;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V resolveAnchorView(Landroid/view/View;Landroid/support/design/widget/CoordinatorLayout;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z shouldDodge(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z verifyAnchorView(Landroid/view/View;Landroid/support/design/widget/CoordinatorLayout;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V acceptNestedScroll(Z)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z checkAnchorChanged()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z dependsOn(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z didBlockInteraction()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Landroid/view/View; findAnchorView(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: I getAnchorId()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Landroid/support/design/widget/CoordinatorLayout$Behavior; getBehavior()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z getChangedAfterNestedScroll()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Landroid/graphics/Rect; getLastChildRect()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V invalidateAnchor()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z isBlockingInteractionBelow(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: Z isNestedScrollAccepted()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V resetChangedAfterNestedScroll()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V resetNestedScroll()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V resetTouchBehaviorTracking()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V setAnchorId(I)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V setBehavior(Landroid/support/design/widget/CoordinatorLayout$Behavior;)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V setChangedAfterNestedScroll(Z)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: V setLastChildRect(Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout$OnPreDrawListener: V <init>(Landroid/support/design/widget/CoordinatorLayout;)>
<android.support.design.widget.CoordinatorLayout$OnPreDrawListener: Z onPreDraw()>
<android.support.design.widget.CoordinatorLayout$ViewElevationComparator: V <init>()>
<android.support.design.widget.CoordinatorLayout$ViewElevationComparator: I compare(Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout$ViewElevationComparator: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: V <init>()>
<android.support.design.widget.DirectedAcyclicGraph: V dfs(Ljava/lang/Object;Ljava/util/ArrayList;Ljava/util/HashSet;)>
<android.support.design.widget.DirectedAcyclicGraph: Ljava/util/ArrayList; getEmptyList()>
<android.support.design.widget.DirectedAcyclicGraph: V poolList(Ljava/util/ArrayList;)>
<android.support.design.widget.DirectedAcyclicGraph: V addEdge(Ljava/lang/Object;Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: V addNode(Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: V clear()>
<android.support.design.widget.DirectedAcyclicGraph: Z contains(Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: Ljava/util/List; getIncomingEdges(Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: Ljava/util/List; getOutgoingEdges(Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: Ljava/util/ArrayList; getSortedList()>
<android.support.design.widget.DirectedAcyclicGraph: Z hasOutgoingEdges(Ljava/lang/Object;)>
<android.support.design.widget.DirectedAcyclicGraph: I size()>
<android.support.design.widget.DrawableUtils: V <init>()>
<android.support.design.widget.DrawableUtils: Z setContainerConstantState(Landroid/graphics/drawable/DrawableContainer;Landroid/graphics/drawable/Drawable$ConstantState;)>
<android.support.design.widget.DrawableUtils: Z setContainerConstantStateV9(Landroid/graphics/drawable/DrawableContainer;Landroid/graphics/drawable/Drawable$ConstantState;)>
<android.support.design.widget.FloatingActionButton$OnVisibilityChangedListener: V <init>()>
<android.support.design.widget.FloatingActionButton$OnVisibilityChangedListener: V onHidden(Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$OnVisibilityChangedListener: V onShown(Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButtonIcs$1: V <init>(Landroid/support/design/widget/FloatingActionButtonIcs;ZLandroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButtonIcs$1: V onAnimationCancel(Landroid/animation/Animator;)>
<android.support.design.widget.FloatingActionButtonIcs$1: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.design.widget.FloatingActionButtonIcs$1: V onAnimationStart(Landroid/animation/Animator;)>
<android.support.design.widget.FloatingActionButtonIcs$2: V <init>(Landroid/support/design/widget/FloatingActionButtonIcs;ZLandroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButtonIcs$2: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.design.widget.FloatingActionButtonIcs$2: V onAnimationStart(Landroid/animation/Animator;)>
<android.support.design.widget.FloatingActionButtonImpl$1: V <init>(Landroid/support/design/widget/FloatingActionButtonImpl;)>
<android.support.design.widget.FloatingActionButtonImpl$1: Z onPreDraw()>
<android.support.design.widget.FloatingActionButtonImpl: V <clinit>()>
<android.support.design.widget.FloatingActionButtonImpl: V <init>(Landroid/support/design/widget/VisibilityAwareImageButton;Landroid/support/design/widget/ShadowViewDelegate;Landroid/support/design/widget/ValueAnimatorCompat$Creator;)>
<android.support.design.widget.FloatingActionButtonImpl: V ensurePreDrawListener()>
<android.support.design.widget.FloatingActionButtonImpl: Landroid/support/design/widget/CircularBorderDrawable; createBorderDrawable(ILandroid/content/res/ColorStateList;)>
<android.support.design.widget.FloatingActionButtonImpl: Landroid/graphics/drawable/GradientDrawable; createShapeDrawable()>
<android.support.design.widget.FloatingActionButtonImpl: Landroid/graphics/drawable/Drawable; getContentBackground()>
<android.support.design.widget.FloatingActionButtonImpl: Z isOrWillBeHidden()>
<android.support.design.widget.FloatingActionButtonImpl: Z isOrWillBeShown()>
<android.support.design.widget.FloatingActionButtonImpl: Landroid/support/design/widget/CircularBorderDrawable; newCircularDrawable()>
<android.support.design.widget.FloatingActionButtonImpl: Landroid/graphics/drawable/GradientDrawable; newGradientDrawableForShape()>
<android.support.design.widget.FloatingActionButtonImpl: V onAttachedToWindow()>
<android.support.design.widget.FloatingActionButtonImpl: V onDetachedFromWindow()>
<android.support.design.widget.FloatingActionButtonImpl: V onPaddingUpdated(Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButtonImpl: V onPreDraw()>
<android.support.design.widget.FloatingActionButtonImpl: Z requirePreDrawListener()>
<android.support.design.widget.FloatingActionButtonImpl: V setElevation(F)>
<android.support.design.widget.FloatingActionButtonImpl: V setPressedTranslationZ(F)>
<android.support.design.widget.FloatingActionButtonImpl: V updatePadding()>
<android.support.design.widget.FloatingActionButtonLollipop$AlwaysStatefulGradientDrawable: V <init>()>
<android.support.design.widget.FloatingActionButtonLollipop$AlwaysStatefulGradientDrawable: Z isStateful()>
<android.support.design.widget.HeaderBehavior$FlingRunnable: V <init>(Landroid/support/design/widget/HeaderBehavior;Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.HeaderBehavior$FlingRunnable: V run()>
<android.support.design.widget.MathUtils: V <init>()>
<android.support.design.widget.MathUtils: F constrain(FFF)>
<android.support.design.widget.MathUtils: I constrain(III)>
<android.support.design.widget.Snackbar$1: V <init>(Landroid/support/design/widget/Snackbar;Landroid/view/View$OnClickListener;)>
<android.support.design.widget.Snackbar$1: V onClick(Landroid/view/View;)>
<android.support.design.widget.SnackbarManager$1: V <init>(Landroid/support/design/widget/SnackbarManager;)>
<android.support.design.widget.SnackbarManager$1: Z handleMessage(Landroid/os/Message;)>
<android.support.design.widget.SnackbarManager$SnackbarRecord: V <init>(ILandroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager$SnackbarRecord: Z isSnackbar(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V <init>()>
<android.support.design.widget.SnackbarManager: Z cancelSnackbarLocked(Landroid/support/design/widget/SnackbarManager$SnackbarRecord;I)>
<android.support.design.widget.SnackbarManager: Landroid/support/design/widget/SnackbarManager; getInstance()>
<android.support.design.widget.SnackbarManager: Z isCurrentSnackbarLocked(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: Z isNextSnackbarLocked(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V scheduleTimeoutLocked(Landroid/support/design/widget/SnackbarManager$SnackbarRecord;)>
<android.support.design.widget.SnackbarManager: V showNextSnackbarLocked()>
<android.support.design.widget.SnackbarManager: V cancelTimeout(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V dismiss(Landroid/support/design/widget/SnackbarManager$Callback;I)>
<android.support.design.widget.SnackbarManager: V handleTimeout(Landroid/support/design/widget/SnackbarManager$SnackbarRecord;)>
<android.support.design.widget.SnackbarManager: Z isCurrent(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: Z isCurrentOrNext(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V onDismissed(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V onShown(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V restoreTimeout(Landroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.SnackbarManager: V show(ILandroid/support/design/widget/SnackbarManager$Callback;)>
<android.support.design.widget.StateListAnimator$Tuple: V <init>([ILandroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.StateListAnimator: V <init>()>
<android.support.design.widget.StateListAnimator: V cancel()>
<android.support.design.widget.StateListAnimator: V start(Landroid/support/design/widget/StateListAnimator$Tuple;)>
<android.support.design.widget.StateListAnimator: V addState([ILandroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.StateListAnimator: V jumpToCurrentState()>
<android.support.design.widget.StateListAnimator: V setState([I)>
<android.support.design.widget.SwipeDismissBehavior$SettleRunnable: V <init>(Landroid/support/design/widget/SwipeDismissBehavior;Landroid/view/View;Z)>
<android.support.design.widget.SwipeDismissBehavior$SettleRunnable: V run()>
<android.support.design.widget.TabItem: V <init>(Landroid/content/Context;)>
<android.support.design.widget.TabItem: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.TabLayout$PagerAdapterObserver: V <init>(Landroid/support/design/widget/TabLayout;)>
<android.support.design.widget.TabLayout$PagerAdapterObserver: V onChanged()>
<android.support.design.widget.TabLayout$PagerAdapterObserver: V onInvalidated()>
<android.support.design.widget.TabLayout$SlidingTabStrip: V <init>(Landroid/support/design/widget/TabLayout;Landroid/content/Context;)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V updateIndicatorPosition()>
<android.support.design.widget.TabLayout$SlidingTabStrip: V animateIndicatorToPosition(II)>
<android.support.design.widget.TabLayout$SlidingTabStrip: Z childrenNeedLayout()>
<android.support.design.widget.TabLayout$SlidingTabStrip: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.TabLayout$SlidingTabStrip: F getIndicatorPosition()>
<android.support.design.widget.TabLayout$SlidingTabStrip: V onLayout(ZIIII)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V onMeasure(II)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V setIndicatorPosition(II)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V setIndicatorPositionFromTabPosition(IF)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V setSelectedIndicatorColor(I)>
<android.support.design.widget.TabLayout$SlidingTabStrip: V setSelectedIndicatorHeight(I)>
<android.support.design.widget.TabLayout$Tab: V <init>()>
<android.support.design.widget.TabLayout$Tab: Ljava/lang/CharSequence; getContentDescription()>
<android.support.design.widget.TabLayout$Tab: Landroid/view/View; getCustomView()>
<android.support.design.widget.TabLayout$Tab: Landroid/graphics/drawable/Drawable; getIcon()>
<android.support.design.widget.TabLayout$Tab: I getPosition()>
<android.support.design.widget.TabLayout$Tab: Ljava/lang/Object; getTag()>
<android.support.design.widget.TabLayout$Tab: Ljava/lang/CharSequence; getText()>
<android.support.design.widget.TabLayout$Tab: Z isSelected()>
<android.support.design.widget.TabLayout$Tab: V reset()>
<android.support.design.widget.TabLayout$Tab: V select()>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setContentDescription(I)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setContentDescription(Ljava/lang/CharSequence;)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setCustomView(I)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setCustomView(Landroid/view/View;)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setIcon(I)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setIcon(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.TabLayout$Tab: V setPosition(I)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setTag(Ljava/lang/Object;)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setText(I)>
<android.support.design.widget.TabLayout$Tab: Landroid/support/design/widget/TabLayout$Tab; setText(Ljava/lang/CharSequence;)>
<android.support.design.widget.TabLayout$Tab: V updateView()>
<android.support.design.widget.TabLayout$TabView: V <init>(Landroid/support/design/widget/TabLayout;Landroid/content/Context;)>
<android.support.design.widget.TabLayout$TabView: F approximateLineWidth(Landroid/text/Layout;IF)>
<android.support.design.widget.TabLayout$TabView: V updateTextAndIcon(Landroid/widget/TextView;Landroid/widget/ImageView;)>
<android.support.design.widget.TabLayout$TabView: Landroid/support/design/widget/TabLayout$Tab; getTab()>
<android.support.design.widget.TabLayout$TabView: V onInitializeAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;)>
<android.support.design.widget.TabLayout$TabView: V onInitializeAccessibilityNodeInfo(Landroid/view/accessibility/AccessibilityNodeInfo;)>
<android.support.design.widget.TabLayout$TabView: Z onLongClick(Landroid/view/View;)>
<android.support.design.widget.TabLayout$TabView: V onMeasure(II)>
<android.support.design.widget.TabLayout$TabView: Z performClick()>
<android.support.design.widget.TabLayout$TabView: V reset()>
<android.support.design.widget.TabLayout$TabView: V setSelected(Z)>
<android.support.design.widget.TabLayout$TabView: V setTab(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout$TabView: V update()>
<android.support.design.widget.TabLayout: V <clinit>()>
<android.support.design.widget.TabLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.TabLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.TabLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.TabLayout: V addTabFromItemView(Landroid/support/design/widget/TabItem;)>
<android.support.design.widget.TabLayout: V addTabView(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V addViewInternal(Landroid/view/View;)>
<android.support.design.widget.TabLayout: V animateToTab(I)>
<android.support.design.widget.TabLayout: V applyModeAndGravity()>
<android.support.design.widget.TabLayout: I calculateScrollXForTab(IF)>
<android.support.design.widget.TabLayout: V configureTab(Landroid/support/design/widget/TabLayout$Tab;I)>
<android.support.design.widget.TabLayout: Landroid/content/res/ColorStateList; createColorStateList(II)>
<android.support.design.widget.TabLayout: Landroid/widget/LinearLayout$LayoutParams; createLayoutParamsForTabs()>
<android.support.design.widget.TabLayout: Landroid/support/design/widget/TabLayout$TabView; createTabView(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V dispatchTabReselected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V dispatchTabSelected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V dispatchTabUnselected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: I getDefaultHeight()>
<android.support.design.widget.TabLayout: F getScrollPosition()>
<android.support.design.widget.TabLayout: I getTabMinWidth()>
<android.support.design.widget.TabLayout: I getTabScrollRange()>
<android.support.design.widget.TabLayout: V removeTabViewAt(I)>
<android.support.design.widget.TabLayout: V setSelectedTabView(I)>
<android.support.design.widget.TabLayout: V setupWithViewPager(Landroid/support/v4/view/ViewPager;ZZ)>
<android.support.design.widget.TabLayout: V updateAllTabs()>
<android.support.design.widget.TabLayout: V updateTabViewLayoutParams(Landroid/widget/LinearLayout$LayoutParams;)>
<android.support.design.widget.TabLayout: V addOnTabSelectedListener(Landroid/support/design/widget/TabLayout$OnTabSelectedListener;)>
<android.support.design.widget.TabLayout: V addTab(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V addTab(Landroid/support/design/widget/TabLayout$Tab;I)>
<android.support.design.widget.TabLayout: V addTab(Landroid/support/design/widget/TabLayout$Tab;IZ)>
<android.support.design.widget.TabLayout: V addTab(Landroid/support/design/widget/TabLayout$Tab;Z)>
<android.support.design.widget.TabLayout: V addView(Landroid/view/View;)>
<android.support.design.widget.TabLayout: V addView(Landroid/view/View;I)>
<android.support.design.widget.TabLayout: V addView(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.TabLayout: V addView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.TabLayout: V clearOnTabSelectedListeners()>
<android.support.design.widget.TabLayout: I dpToPx(I)>
<android.support.design.widget.TabLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.TabLayout: Landroid/widget/FrameLayout$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.TabLayout: I getSelectedTabPosition()>
<android.support.design.widget.TabLayout: Landroid/support/design/widget/TabLayout$Tab; getTabAt(I)>
<android.support.design.widget.TabLayout: I getTabCount()>
<android.support.design.widget.TabLayout: I getTabGravity()>
<android.support.design.widget.TabLayout: I getTabMaxWidth()>
<android.support.design.widget.TabLayout: I getTabMode()>
<android.support.design.widget.TabLayout: Landroid/content/res/ColorStateList; getTabTextColors()>
<android.support.design.widget.TabLayout: Landroid/support/design/widget/TabLayout$Tab; newTab()>
<android.support.design.widget.TabLayout: V onAttachedToWindow()>
<android.support.design.widget.TabLayout: V onDetachedFromWindow()>
<android.support.design.widget.TabLayout: V onMeasure(II)>
<android.support.design.widget.TabLayout: V populateFromPagerAdapter()>
<android.support.design.widget.TabLayout: V removeAllTabs()>
<android.support.design.widget.TabLayout: V removeOnTabSelectedListener(Landroid/support/design/widget/TabLayout$OnTabSelectedListener;)>
<android.support.design.widget.TabLayout: V removeTab(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V removeTabAt(I)>
<android.support.design.widget.TabLayout: V selectTab(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout: V selectTab(Landroid/support/design/widget/TabLayout$Tab;Z)>
<android.support.design.widget.TabLayout: V setOnTabSelectedListener(Landroid/support/design/widget/TabLayout$OnTabSelectedListener;)>
<android.support.design.widget.TabLayout: V setPagerAdapter(Landroid/support/v4/view/PagerAdapter;Z)>
<android.support.design.widget.TabLayout: V setScrollPosition(IFZ)>
<android.support.design.widget.TabLayout: V setScrollPosition(IFZZ)>
<android.support.design.widget.TabLayout: V setSelectedTabIndicatorColor(I)>
<android.support.design.widget.TabLayout: V setSelectedTabIndicatorHeight(I)>
<android.support.design.widget.TabLayout: V setTabGravity(I)>
<android.support.design.widget.TabLayout: V setTabMode(I)>
<android.support.design.widget.TabLayout: V setTabTextColors(II)>
<android.support.design.widget.TabLayout: V setTabTextColors(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.TabLayout: V setTabsFromPagerAdapter(Landroid/support/v4/view/PagerAdapter;)>
<android.support.design.widget.TabLayout: V setupWithViewPager(Landroid/support/v4/view/ViewPager;)>
<android.support.design.widget.TabLayout: V setupWithViewPager(Landroid/support/v4/view/ViewPager;Z)>
<android.support.design.widget.TabLayout: Z shouldDelayChildPressedState()>
<android.support.design.widget.TabLayout: V updateTabViews(Z)>
<android.support.design.widget.TextInputLayout$1: V <init>(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout$1: V afterTextChanged(Landroid/text/Editable;)>
<android.support.design.widget.TextInputLayout$1: V beforeTextChanged(Ljava/lang/CharSequence;III)>
<android.support.design.widget.TextInputLayout$1: V onTextChanged(Ljava/lang/CharSequence;III)>
<android.support.design.widget.TextInputLayout$4: V <init>(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout$4: V onClick(Landroid/view/View;)>
<android.support.design.widget.TextInputLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.TextInputLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.TextInputLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.TextInputLayout: Z access$000(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout: V addIndicator(Landroid/widget/TextView;I)>
<android.support.design.widget.TextInputLayout: V adjustIndicatorPadding()>
<android.support.design.widget.TextInputLayout: V applyPasswordToggleTint()>
<android.support.design.widget.TextInputLayout: Z arrayContains([II)>
<android.support.design.widget.TextInputLayout: V collapseHint(Z)>
<android.support.design.widget.TextInputLayout: V ensureBackgroundDrawableStateWorkaround()>
<android.support.design.widget.TextInputLayout: V expandHint(Z)>
<android.support.design.widget.TextInputLayout: Z hasPasswordTransformation()>
<android.support.design.widget.TextInputLayout: V recursiveSetEnabled(Landroid/view/ViewGroup;Z)>
<android.support.design.widget.TextInputLayout: V removeIndicator(Landroid/widget/TextView;)>
<android.support.design.widget.TextInputLayout: V setEditText(Landroid/widget/EditText;)>
<android.support.design.widget.TextInputLayout: V setError(Ljava/lang/CharSequence;Z)>
<android.support.design.widget.TextInputLayout: V setHintInternal(Ljava/lang/CharSequence;)>
<android.support.design.widget.TextInputLayout: Z shouldShowPasswordIcon()>
<android.support.design.widget.TextInputLayout: V updateEditTextBackground()>
<android.support.design.widget.TextInputLayout: V updateInputLayoutMargins()>
<android.support.design.widget.TextInputLayout: V updatePasswordToggleView()>
<android.support.design.widget.TextInputLayout: V addView(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.TextInputLayout: V animateToExpansionFraction(F)>
<android.support.design.widget.TextInputLayout: V dispatchRestoreInstanceState(Landroid/util/SparseArray;)>
<android.support.design.widget.TextInputLayout: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.TextInputLayout: V drawableStateChanged()>
<android.support.design.widget.TextInputLayout: I getCounterMaxLength()>
<android.support.design.widget.TextInputLayout: Landroid/widget/EditText; getEditText()>
<android.support.design.widget.TextInputLayout: Ljava/lang/CharSequence; getError()>
<android.support.design.widget.TextInputLayout: Ljava/lang/CharSequence; getHint()>
<android.support.design.widget.TextInputLayout: Ljava/lang/CharSequence; getPasswordVisibilityToggleContentDescription()>
<android.support.design.widget.TextInputLayout: Landroid/graphics/drawable/Drawable; getPasswordVisibilityToggleDrawable()>
<android.support.design.widget.TextInputLayout: Landroid/graphics/Typeface; getTypeface()>
<android.support.design.widget.TextInputLayout: Z isCounterEnabled()>
<android.support.design.widget.TextInputLayout: Z isErrorEnabled()>
<android.support.design.widget.TextInputLayout: Z isHintAnimationEnabled()>
<android.support.design.widget.TextInputLayout: Z isHintEnabled()>
<android.support.design.widget.TextInputLayout: Z isHintExpanded()>
<android.support.design.widget.TextInputLayout: Z isPasswordVisibilityToggleEnabled()>
<android.support.design.widget.TextInputLayout: V onLayout(ZIIII)>
<android.support.design.widget.TextInputLayout: V onMeasure(II)>
<android.support.design.widget.TextInputLayout: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<android.support.design.widget.TextInputLayout: Landroid/os/Parcelable; onSaveInstanceState()>
<android.support.design.widget.TextInputLayout: V passwordVisibilityToggleRequested()>
<android.support.design.widget.TextInputLayout: V setCounterEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setCounterMaxLength(I)>
<android.support.design.widget.TextInputLayout: V setEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setError(Ljava/lang/CharSequence;)>
<android.support.design.widget.TextInputLayout: V setErrorEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setErrorTextAppearance(I)>
<android.support.design.widget.TextInputLayout: V setHint(Ljava/lang/CharSequence;)>
<android.support.design.widget.TextInputLayout: V setHintAnimationEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setHintEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setHintTextAppearance(I)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleContentDescription(I)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleContentDescription(Ljava/lang/CharSequence;)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleDrawable(I)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleEnabled(Z)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.TextInputLayout: V setPasswordVisibilityToggleTintMode(Landroid/graphics/PorterDuff$Mode;)>
<android.support.design.widget.TextInputLayout: V setTypeface(Landroid/graphics/Typeface;)>
<android.support.design.widget.TextInputLayout: V updateCounter(I)>
<android.support.design.widget.TextInputLayout: V updateLabelState(Z)>
<android.support.design.widget.ThemeUtils: V <clinit>()>
<android.support.design.widget.ThemeUtils: V <init>()>
<android.support.design.widget.ThemeUtils: V checkAppCompatTheme(Landroid/content/Context;)>
<android.support.design.widget.ValueAnimatorCompat$Impl: V <init>()>
<android.support.design.widget.ValueAnimatorCompat: V <init>(Landroid/support/design/widget/ValueAnimatorCompat$Impl;)>
<android.support.design.widget.ValueAnimatorCompat: V addListener(Landroid/support/design/widget/ValueAnimatorCompat$AnimatorListener;)>
<android.support.design.widget.ValueAnimatorCompat: V addUpdateListener(Landroid/support/design/widget/ValueAnimatorCompat$AnimatorUpdateListener;)>
<android.support.design.widget.ValueAnimatorCompat: V cancel()>
<android.support.design.widget.ValueAnimatorCompat: V end()>
<android.support.design.widget.ValueAnimatorCompat: F getAnimatedFloatValue()>
<android.support.design.widget.ValueAnimatorCompat: F getAnimatedFraction()>
<android.support.design.widget.ValueAnimatorCompat: I getAnimatedIntValue()>
<android.support.design.widget.ValueAnimatorCompat: J getDuration()>
<android.support.design.widget.ValueAnimatorCompat: Z isRunning()>
<android.support.design.widget.ValueAnimatorCompat: V setDuration(J)>
<android.support.design.widget.ValueAnimatorCompat: V setFloatValues(FF)>
<android.support.design.widget.ValueAnimatorCompat: V setIntValues(II)>
<android.support.design.widget.ValueAnimatorCompat: V setInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.ValueAnimatorCompat: V start()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread$1: V <init>(Landroid/support/design/widget/ValueAnimatorCompatImplGingerbread;)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread$1: V run()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$1: V <init>(Landroid/support/design/widget/ValueAnimatorCompatImplHoneycombMr1;Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorUpdateListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$1: V onAnimationUpdate(Landroid/animation/ValueAnimator;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$2: V <init>(Landroid/support/design/widget/ValueAnimatorCompatImplHoneycombMr1;Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$2: V onAnimationCancel(Landroid/animation/Animator;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$2: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1$2: V onAnimationStart(Landroid/animation/Animator;)>
<android.support.design.widget.ViewGroupUtils: V <clinit>()>
<android.support.design.widget.ViewGroupUtils: V <init>()>
<android.support.design.widget.ViewGroupUtils: V getDescendantRect(Landroid/view/ViewGroup;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.ViewGroupUtils: V offsetDescendantRect(Landroid/view/ViewGroup;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.ViewGroupUtilsHoneycomb: V <clinit>()>
<android.support.design.widget.ViewGroupUtilsHoneycomb: V <init>()>
<android.support.design.widget.ViewGroupUtilsHoneycomb: V offsetDescendantMatrix(Landroid/view/ViewParent;Landroid/view/View;Landroid/graphics/Matrix;)>
<android.support.design.widget.ViewGroupUtilsHoneycomb: V offsetDescendantRect(Landroid/view/ViewGroup;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.ViewOffsetHelper: V <init>(Landroid/view/View;)>
<android.support.design.widget.ViewOffsetHelper: V updateOffsets()>
<android.support.design.widget.ViewOffsetHelper: I getLayoutLeft()>
<android.support.design.widget.ViewOffsetHelper: I getLayoutTop()>
<android.support.design.widget.ViewOffsetHelper: I getLeftAndRightOffset()>
<android.support.design.widget.ViewOffsetHelper: I getTopAndBottomOffset()>
<android.support.design.widget.ViewOffsetHelper: V onViewLayout()>
<android.support.design.widget.ViewOffsetHelper: Z setLeftAndRightOffset(I)>
<android.support.design.widget.ViewOffsetHelper: Z setTopAndBottomOffset(I)>
<android.support.design.widget.ViewUtils: V <clinit>()>
<android.support.design.widget.ViewUtils: V <init>()>
<android.support.design.widget.ViewUtils: Landroid/support/design/widget/ValueAnimatorCompat; createAnimator()>
<android.support.design.widget.ViewUtils: Z objectEquals(Ljava/lang/Object;Ljava/lang/Object;)>
<android.support.design.widget.ViewUtils: Landroid/graphics/PorterDuff$Mode; parseTintMode(ILandroid/graphics/PorterDuff$Mode;)>
<android.support.design.widget.ViewUtilsLollipop: V <clinit>()>
<android.support.design.widget.ViewUtilsLollipop: V <init>()>
<android.support.design.widget.ViewUtilsLollipop: V setBoundsViewOutlineProvider(Landroid/view/View;)>
<android.support.design.widget.ViewUtilsLollipop: V setDefaultAppBarLayoutStateListAnimator(Landroid/view/View;F)>
<android.support.design.widget.ViewUtilsLollipop: V setStateListAnimatorFromAttrs(Landroid/view/View;Landroid/util/AttributeSet;II)>
<android.support.design.widget.VisibilityAwareImageButton: V <init>(Landroid/content/Context;)>
<android.support.design.widget.VisibilityAwareImageButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.VisibilityAwareImageButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.VisibilityAwareImageButton: I getUserSetVisibility()>
<android.support.design.widget.VisibilityAwareImageButton: V internalSetVisibility(IZ)>
<android.support.design.widget.VisibilityAwareImageButton: V setVisibility(I)>
<android.support.fragment.BuildConfig: V <init>()>
<android.support.fragment.R: V <init>()>
<android.support.graphics.drawable.AndroidResources: V <clinit>()>
<android.support.graphics.drawable.AndroidResources: V <init>()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$1: V <init>(Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$1: V invalidateDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$1: V scheduleDrawable(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$1: V unscheduleDrawable(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: V <init>(Landroid/content/Context;Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState;Landroid/graphics/drawable/Drawable$Callback;Landroid/content/res/Resources;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: I getChangingConfigurations()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: Landroid/graphics/drawable/Drawable; newDrawable()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: V <init>(Landroid/graphics/drawable/Drawable$ConstantState;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: Z canApplyTheme()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: I getChangingConfigurations()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.BuildConfig: V <init>()>
<android.support.graphics.drawable.PathParser$ExtractFloatResult: V <init>()>
<android.support.graphics.drawable.PathParser$PathDataNode: V <init>(C[F)>
<android.support.graphics.drawable.PathParser$PathDataNode: V <init>(Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.PathParser$PathDataNode: V addCommand(Landroid/graphics/Path;[FCC[F)>
<android.support.graphics.drawable.PathParser$PathDataNode: V arcToBezier(Landroid/graphics/Path;DDDDDDDDD)>
<android.support.graphics.drawable.PathParser$PathDataNode: V drawArc(Landroid/graphics/Path;FFFFFFFZZ)>
<android.support.graphics.drawable.PathParser$PathDataNode: V nodesToPath([Landroid/support/graphics/drawable/PathParser$PathDataNode;Landroid/graphics/Path;)>
<android.support.graphics.drawable.PathParser$PathDataNode: V interpolatePathDataNode(Landroid/support/graphics/drawable/PathParser$PathDataNode;Landroid/support/graphics/drawable/PathParser$PathDataNode;F)>
<android.support.graphics.drawable.PathParser: V <init>()>
<android.support.graphics.drawable.PathParser: V addNode(Ljava/util/ArrayList;C[F)>
<android.support.graphics.drawable.PathParser: Z canMorph([Landroid/support/graphics/drawable/PathParser$PathDataNode;[Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.PathParser: [F copyOfRange([FII)>
<android.support.graphics.drawable.PathParser: [Landroid/support/graphics/drawable/PathParser$PathDataNode; createNodesFromPathData(Ljava/lang/String;)>
<android.support.graphics.drawable.PathParser: Landroid/graphics/Path; createPathFromPathData(Ljava/lang/String;)>
<android.support.graphics.drawable.PathParser: [Landroid/support/graphics/drawable/PathParser$PathDataNode; deepCopyNodes([Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.PathParser: V extract(Ljava/lang/String;ILandroid/support/graphics/drawable/PathParser$ExtractFloatResult;)>
<android.support.graphics.drawable.PathParser: [F getFloats(Ljava/lang/String;)>
<android.support.graphics.drawable.PathParser: I nextStart(Ljava/lang/String;I)>
<android.support.graphics.drawable.PathParser: V updateNodes([Landroid/support/graphics/drawable/PathParser$PathDataNode;[Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.R: V <init>()>
<android.support.graphics.drawable.TypedArrayUtils: V <init>()>
<android.support.graphics.drawable.TypedArrayUtils: Z getNamedBoolean(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;IZ)>
<android.support.graphics.drawable.TypedArrayUtils: I getNamedColor(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;II)>
<android.support.graphics.drawable.TypedArrayUtils: F getNamedFloat(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;IF)>
<android.support.graphics.drawable.TypedArrayUtils: I getNamedInt(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;II)>
<android.support.graphics.drawable.TypedArrayUtils: Z hasAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;Landroid/support/v4/util/ArrayMap;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: Landroid/graphics/Matrix; access$200(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: Landroid/graphics/Matrix; access$300(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V updateLocalMatrix()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V updateStateFromTypedArray(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: Ljava/lang/String; getGroupName()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: Landroid/graphics/Matrix; getLocalMatrix()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getPivotX()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getPivotY()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getRotation()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getScaleX()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getScaleY()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getTranslateX()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: F getTranslateY()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V inflate(Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setPivotX(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setPivotY(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setRotation(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setScaleX(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setScaleY(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setTranslateX(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: V setTranslateY(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VPath;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: Ljava/lang/String; NodesToString([Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V applyTheme(Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: Z canApplyTheme()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: [Landroid/support/graphics/drawable/PathParser$PathDataNode; getPathData()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: Ljava/lang/String; getPathName()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: Z isClipPath()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V printVPath(I)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V setPathData([Landroid/support/graphics/drawable/PathParser$PathDataNode;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: V toPath(Landroid/graphics/Path;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V <clinit>()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VPathRenderer;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: Landroid/graphics/Paint; access$000(Landroid/support/graphics/drawable/VectorDrawableCompat$VPathRenderer;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: Landroid/graphics/Paint; access$002(Landroid/support/graphics/drawable/VectorDrawableCompat$VPathRenderer;Landroid/graphics/Paint;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: Landroid/graphics/Paint; access$100(Landroid/support/graphics/drawable/VectorDrawableCompat$VPathRenderer;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: Landroid/graphics/Paint; access$102(Landroid/support/graphics/drawable/VectorDrawableCompat$VPathRenderer;Landroid/graphics/Paint;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: F cross(FFFF)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V drawGroupTree(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;Landroid/graphics/Matrix;Landroid/graphics/Canvas;IILandroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V drawPath(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;Landroid/support/graphics/drawable/VectorDrawableCompat$VPath;Landroid/graphics/Canvas;IILandroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: F getMatrixScale(Landroid/graphics/Matrix;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V draw(Landroid/graphics/Canvas;IILandroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: F getAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: I getRootAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V setAlpha(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: V setRootAlpha(I)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Z canReuseBitmap(II)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Z canReuseCache()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V createCachedBitmapIfNeeded(II)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V drawCachedBitmapWithRootAlpha(Landroid/graphics/Canvas;Landroid/graphics/ColorFilter;Landroid/graphics/Rect;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: I getChangingConfigurations()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Landroid/graphics/Paint; getPaint(Landroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Z hasTranslucentRoot()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Landroid/graphics/drawable/Drawable; newDrawable()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V updateCacheStates()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: V updateCachedBitmap(II)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: V <init>(Landroid/graphics/drawable/Drawable$ConstantState;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: Z canApplyTheme()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: I getChangingConfigurations()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: Landroid/graphics/drawable/Drawable; newDrawable(Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.animated.BuildConfig: V <init>()>
<android.support.graphics.drawable.animated.R: V <init>()>
<android.support.mediacompat.BuildConfig: V <init>()>
<android.support.mediacompat.R: V <init>()>
<android.support.transition.BuildConfig: V <init>()>
<android.support.transition.ChangeBoundsPort$3: V <init>(Landroid/support/transition/ChangeBoundsPort;)>
<android.support.transition.ChangeBoundsPort$3: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.ChangeBoundsPort$4: V <init>(Landroid/support/transition/ChangeBoundsPort;Landroid/view/ViewGroup;Landroid/graphics/drawable/BitmapDrawable;Landroid/view/View;)>
<android.support.transition.ChangeBoundsPort$4: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.FadePort$2: V <init>(Landroid/support/transition/FadePort;Landroid/view/View;Landroid/view/View;ILandroid/view/View;Landroid/view/ViewGroup;)>
<android.support.transition.FadePort$2: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.FadePort$3: V <init>(Landroid/support/transition/FadePort;Landroid/view/View;Landroid/view/View;ILandroid/view/View;Landroid/view/ViewGroup;)>
<android.support.transition.FadePort$3: V onAnimationCancel(Landroid/animation/Animator;)>
<android.support.transition.FadePort$3: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.R$id: V <init>()>
<android.support.transition.R: V <init>()>
<android.support.transition.RectEvaluator: V <init>()>
<android.support.transition.RectEvaluator: V <init>(Landroid/graphics/Rect;)>
<android.support.transition.RectEvaluator: Landroid/graphics/Rect; evaluate(FLandroid/graphics/Rect;Landroid/graphics/Rect;)>
<android.support.transition.RectEvaluator: Ljava/lang/Object; evaluate(FLjava/lang/Object;Ljava/lang/Object;)>
<android.support.transition.Scene: V <clinit>()>
<android.support.transition.Scene: V <init>(Landroid/support/transition/SceneImpl;)>
<android.support.transition.Scene: V <init>(Landroid/view/ViewGroup;)>
<android.support.transition.Scene: V <init>(Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.Scene: Landroid/support/transition/SceneImpl; createSceneImpl()>
<android.support.transition.Scene: Landroid/support/transition/Scene; getSceneForLayout(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.Scene: V enter()>
<android.support.transition.Scene: V exit()>
<android.support.transition.Scene: Landroid/view/ViewGroup; getSceneRoot()>
<android.support.transition.Scene: V setEnterAction(Ljava/lang/Runnable;)>
<android.support.transition.Scene: V setExitAction(Ljava/lang/Runnable;)>
<android.support.transition.SceneImpl: V <init>()>
<android.support.transition.ScenePort: V <init>(Landroid/view/ViewGroup;)>
<android.support.transition.ScenePort: V <init>(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.ScenePort: V <init>(Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.ScenePort: Landroid/support/transition/ScenePort; getCurrentScene(Landroid/view/View;)>
<android.support.transition.ScenePort: Landroid/support/transition/ScenePort; getSceneForLayout(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.ScenePort: V setCurrentScene(Landroid/view/View;Landroid/support/transition/ScenePort;)>
<android.support.transition.ScenePort: V enter()>
<android.support.transition.ScenePort: V exit()>
<android.support.transition.ScenePort: Landroid/view/ViewGroup; getSceneRoot()>
<android.support.transition.ScenePort: Z isCreatedFromLayoutResource()>
<android.support.transition.ScenePort: V setEnterAction(Ljava/lang/Runnable;)>
<android.support.transition.ScenePort: V setExitAction(Ljava/lang/Runnable;)>
<android.support.transition.SceneStaticsImpl: V <init>()>
<android.support.transition.TransitionImpl: V <init>()>
<android.support.transition.TransitionImpl: V init(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.TransitionKitKat$CompatListener: V <init>(Landroid/support/transition/TransitionKitKat;)>
<android.support.transition.TransitionKitKat$CompatListener: V addListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionKitKat$CompatListener: Z isEmpty()>
<android.support.transition.TransitionKitKat$CompatListener: V onTransitionCancel(Landroid/transition/Transition;)>
<android.support.transition.TransitionKitKat$CompatListener: V onTransitionEnd(Landroid/transition/Transition;)>
<android.support.transition.TransitionKitKat$CompatListener: V onTransitionPause(Landroid/transition/Transition;)>
<android.support.transition.TransitionKitKat$CompatListener: V onTransitionResume(Landroid/transition/Transition;)>
<android.support.transition.TransitionKitKat$CompatListener: V onTransitionStart(Landroid/transition/Transition;)>
<android.support.transition.TransitionKitKat$CompatListener: V removeListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionKitKat$TransitionWrapper: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.TransitionKitKat$TransitionWrapper: V captureEndValues(Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat$TransitionWrapper: V captureStartValues(Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat$TransitionWrapper: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionManager: V <clinit>()>
<android.support.transition.TransitionManager: V <init>()>
<android.support.transition.TransitionManager: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionManager: V beginDelayedTransition(Landroid/view/ViewGroup;Landroid/support/transition/Transition;)>
<android.support.transition.TransitionManager: V go(Landroid/support/transition/Scene;)>
<android.support.transition.TransitionManager: V go(Landroid/support/transition/Scene;Landroid/support/transition/Transition;)>
<android.support.transition.TransitionManager: V setTransition(Landroid/support/transition/Scene;Landroid/support/transition/Scene;Landroid/support/transition/Transition;)>
<android.support.transition.TransitionManager: V setTransition(Landroid/support/transition/Scene;Landroid/support/transition/Transition;)>
<android.support.transition.TransitionManager: V transitionTo(Landroid/support/transition/Scene;)>
<android.support.transition.TransitionManagerImpl: V <init>()>
<android.support.transition.TransitionManagerPort$MultiListener: V <init>(Landroid/support/transition/TransitionPort;Landroid/view/ViewGroup;)>
<android.support.transition.TransitionManagerPort$MultiListener: V removeListeners()>
<android.support.transition.TransitionManagerPort$MultiListener: Z onPreDraw()>
<android.support.transition.TransitionManagerPort$MultiListener: V onViewAttachedToWindow(Landroid/view/View;)>
<android.support.transition.TransitionManagerPort$MultiListener: V onViewDetachedFromWindow(Landroid/view/View;)>
<android.support.transition.TransitionManagerPort: V <clinit>()>
<android.support.transition.TransitionManagerPort: V <init>()>
<android.support.transition.TransitionManagerPort: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionManagerPort: V beginDelayedTransition(Landroid/view/ViewGroup;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V changeScene(Landroid/support/transition/ScenePort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: Landroid/support/transition/TransitionPort; getDefaultTransition()>
<android.support.transition.TransitionManagerPort: Landroid/support/v4/util/ArrayMap; getRunningTransitions()>
<android.support.transition.TransitionManagerPort: Landroid/support/transition/TransitionPort; getTransition(Landroid/support/transition/ScenePort;)>
<android.support.transition.TransitionManagerPort: V go(Landroid/support/transition/ScenePort;)>
<android.support.transition.TransitionManagerPort: V go(Landroid/support/transition/ScenePort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V sceneChangeRunTransition(Landroid/view/ViewGroup;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V sceneChangeSetup(Landroid/view/ViewGroup;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: Landroid/support/transition/TransitionPort; getNamedTransition(Landroid/support/transition/ScenePort;Ljava/lang/String;)>
<android.support.transition.TransitionManagerPort: Landroid/support/transition/TransitionPort; getNamedTransition(Ljava/lang/String;Landroid/support/transition/ScenePort;)>
<android.support.transition.TransitionManagerPort: [Ljava/lang/String; getTargetSceneNames(Landroid/support/transition/ScenePort;)>
<android.support.transition.TransitionManagerPort: V setDefaultTransition(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V setTransition(Landroid/support/transition/ScenePort;Landroid/support/transition/ScenePort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V setTransition(Landroid/support/transition/ScenePort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V setTransition(Landroid/support/transition/ScenePort;Ljava/lang/String;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V setTransition(Ljava/lang/String;Landroid/support/transition/ScenePort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionManagerPort: V transitionTo(Landroid/support/transition/ScenePort;)>
<android.support.transition.TransitionManagerStaticsImpl: V <init>()>
<android.support.transition.TransitionPort$1: V <init>(Landroid/support/transition/TransitionPort;Landroid/support/v4/util/ArrayMap;)>
<android.support.transition.TransitionPort$1: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.TransitionPort$1: V onAnimationStart(Landroid/animation/Animator;)>
<android.support.transition.TransitionPort$2: V <init>(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionPort$2: V onAnimationEnd(Landroid/animation/Animator;)>
<android.support.transition.TransitionPort$AnimationInfo: V <init>(Landroid/view/View;Ljava/lang/String;Landroid/support/transition/WindowIdPort;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionPort$ArrayListManager: V <init>()>
<android.support.transition.TransitionPort$ArrayListManager: Ljava/util/ArrayList; add(Ljava/util/ArrayList;Ljava/lang/Object;)>
<android.support.transition.TransitionPort$ArrayListManager: Ljava/util/ArrayList; remove(Ljava/util/ArrayList;Ljava/lang/Object;)>
<android.support.transition.TransitionPort: V <clinit>()>
<android.support.transition.TransitionPort: V <init>()>
<android.support.transition.TransitionPort: V captureHierarchy(Landroid/view/View;Z)>
<android.support.transition.TransitionPort: Ljava/util/ArrayList; excludeId(Ljava/util/ArrayList;IZ)>
<android.support.transition.TransitionPort: Ljava/util/ArrayList; excludeType(Ljava/util/ArrayList;Ljava/lang/Class;Z)>
<android.support.transition.TransitionPort: Ljava/util/ArrayList; excludeView(Ljava/util/ArrayList;Landroid/view/View;Z)>
<android.support.transition.TransitionPort: Landroid/support/v4/util/ArrayMap; getRunningAnimators()>
<android.support.transition.TransitionPort: V runAnimator(Landroid/animation/Animator;Landroid/support/v4/util/ArrayMap;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; addListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; addTarget(I)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; addTarget(Landroid/view/View;)>
<android.support.transition.TransitionPort: V animate(Landroid/animation/Animator;)>
<android.support.transition.TransitionPort: V cancel()>
<android.support.transition.TransitionPort: V captureValues(Landroid/view/ViewGroup;Z)>
<android.support.transition.TransitionPort: V clearValues(Z)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; clone()>
<android.support.transition.TransitionPort: Ljava/lang/Object; clone()>
<android.support.transition.TransitionPort: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionPort: V createAnimators(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValuesMaps;Landroid/support/transition/TransitionValuesMaps;)>
<android.support.transition.TransitionPort: V end()>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeChildren(IZ)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeChildren(Landroid/view/View;Z)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeChildren(Ljava/lang/Class;Z)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeTarget(IZ)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeTarget(Landroid/view/View;Z)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; excludeTarget(Ljava/lang/Class;Z)>
<android.support.transition.TransitionPort: J getDuration()>
<android.support.transition.TransitionPort: Landroid/animation/TimeInterpolator; getInterpolator()>
<android.support.transition.TransitionPort: Ljava/lang/String; getName()>
<android.support.transition.TransitionPort: J getStartDelay()>
<android.support.transition.TransitionPort: Ljava/util/List; getTargetIds()>
<android.support.transition.TransitionPort: Ljava/util/List; getTargets()>
<android.support.transition.TransitionPort: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionValues; getTransitionValues(Landroid/view/View;Z)>
<android.support.transition.TransitionPort: Z isValidTarget(Landroid/view/View;J)>
<android.support.transition.TransitionPort: V pause(Landroid/view/View;)>
<android.support.transition.TransitionPort: V playTransition(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; removeListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; removeTarget(I)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; removeTarget(Landroid/view/View;)>
<android.support.transition.TransitionPort: V resume(Landroid/view/View;)>
<android.support.transition.TransitionPort: V runAnimators()>
<android.support.transition.TransitionPort: V setCanRemoveViews(Z)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; setDuration(J)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; setSceneRoot(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionPort: Landroid/support/transition/TransitionPort; setStartDelay(J)>
<android.support.transition.TransitionPort: V start()>
<android.support.transition.TransitionPort: Ljava/lang/String; toString()>
<android.support.transition.TransitionPort: Ljava/lang/String; toString(Ljava/lang/String;)>
<android.support.transition.TransitionValues: V <init>()>
<android.support.transition.TransitionValues: Z equals(Ljava/lang/Object;)>
<android.support.transition.TransitionValues: I hashCode()>
<android.support.transition.TransitionValues: Ljava/lang/String; toString()>
<android.support.transition.TransitionValuesMaps: V <init>()>
<android.support.transition.ViewOverlay$OverlayViewGroup$TouchInterceptor: V <init>(Landroid/content/Context;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V <clinit>()>
<android.support.transition.ViewOverlay$OverlayViewGroup: V <init>(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/view/View;Landroid/support/transition/ViewOverlay;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V getOffset([I)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V add(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V add(Landroid/view/View;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V clear()>
<android.support.transition.ViewOverlay$OverlayViewGroup: V dispatchDraw(Landroid/graphics/Canvas;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: Z dispatchTouchEvent(Landroid/view/MotionEvent;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V invalidateChildFast(Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: Landroid/view/ViewParent; invalidateChildInParent([ILandroid/graphics/Rect;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: Landroid/view/ViewParent; invalidateChildInParentFast(IILandroid/graphics/Rect;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V invalidateDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: Z isEmpty()>
<android.support.transition.ViewOverlay$OverlayViewGroup: V onLayout(ZIIII)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V remove(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: V remove(Landroid/view/View;)>
<android.support.transition.ViewOverlay$OverlayViewGroup: Z verifyDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.ViewOverlay: V <init>(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.ViewOverlay: Landroid/support/transition/ViewOverlay; createFrom(Landroid/view/View;)>
<android.support.transition.ViewOverlay: Landroid/view/ViewGroup; getContentView(Landroid/view/View;)>
<android.support.transition.ViewOverlay: V add(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.ViewOverlay: V clear()>
<android.support.transition.ViewOverlay: Landroid/view/ViewGroup; getOverlayView()>
<android.support.transition.ViewOverlay: Z isEmpty()>
<android.support.transition.ViewOverlay: V remove(Landroid/graphics/drawable/Drawable;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: V <init>(Landroid/support/transition/VisibilityInterface;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: V captureEndValues(Landroid/transition/TransitionValues;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: V captureStartValues(Landroid/transition/TransitionValues;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: Z isVisible(Landroid/transition/TransitionValues;)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;ILandroid/transition/TransitionValues;I)>
<android.support.transition.VisibilityKitKat$VisibilityWrapper: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;ILandroid/transition/TransitionValues;I)>
<android.support.transition.VisibilityPort$VisibilityInfo: V <init>()>
<android.support.transition.WindowIdPort: V <init>(Landroid/os/IBinder;)>
<android.support.transition.WindowIdPort: Landroid/support/transition/WindowIdPort; getWindowId(Landroid/view/View;)>
<android.support.transition.WindowIdPort: Z equals(Ljava/lang/Object;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: V <init>(Landroid/content/Context;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/content/DialogInterface$OnClickListener; access$000(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/content/DialogInterface$OnClickListener; access$100(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/content/DialogInterface$OnClickListener; access$200(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/content/DialogInterface$OnClickListener; access$300(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: V addButtonsCallback()>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: V addListCallbacks()>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: V setUpMultiChoiceCallback([ZLandroid/content/DialogInterface$OnMultiChoiceClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; alwaysCallMultiChoiceCallback()>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; alwaysCallSingleChoiceCallback()>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; autoDismiss(Z)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/app/Dialog; create()>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setAdapter(Landroid/widget/ListAdapter;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setAdapter(Landroid/widget/ListAdapter;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setCancelable(Z)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setIcon(I)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setIcon(Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setIconAttribute(I)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setItems(ILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setItems([Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setMessage(I)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setMessage(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setMultiChoiceItems(I[ZLandroid/content/DialogInterface$OnMultiChoiceClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setMultiChoiceItems([Ljava/lang/String;[ZLandroid/content/DialogInterface$OnMultiChoiceClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setNegativeButton(ILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setNegativeButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setNeutralButton(ILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setNeutralButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setOnCancelListener(Landroid/content/DialogInterface$OnCancelListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setOnDismissListener(Landroid/content/DialogInterface$OnDismissListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setOnKeyListener(Landroid/content/DialogInterface$OnKeyListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setOnShowListener(Landroid/content/DialogInterface$OnShowListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setPositiveButton(ILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setPositiveButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setSingleChoiceItems(IILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setSingleChoiceItems([Ljava/lang/String;ILandroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setTitle(I)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setTitle(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder; setView(Landroid/view/View;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder: Landroid/app/Dialog; show()>
<com.afollestad.materialdialogs.AlertDialogWrapper: V <init>()>
<com.afollestad.materialdialogs.BuildConfig: V <init>()>
<com.afollestad.materialdialogs.DefaultAdapter$1: V <clinit>()>
<com.afollestad.materialdialogs.DefaultAdapter: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog;I)>
<com.afollestad.materialdialogs.DefaultAdapter: Z isRTL()>
<com.afollestad.materialdialogs.DefaultAdapter: V setupGravity(Landroid/view/ViewGroup;)>
<com.afollestad.materialdialogs.DefaultAdapter: I getCount()>
<com.afollestad.materialdialogs.DefaultAdapter: Ljava/lang/Object; getItem(I)>
<com.afollestad.materialdialogs.DefaultAdapter: J getItemId(I)>
<com.afollestad.materialdialogs.DefaultAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.afollestad.materialdialogs.DefaultAdapter: Z hasStableIds()>
<com.afollestad.materialdialogs.DialogAction: V <clinit>()>
<com.afollestad.materialdialogs.DialogAction: V <init>(Ljava/lang/String;I)>
<com.afollestad.materialdialogs.DialogAction: Lcom/afollestad/materialdialogs/DialogAction; valueOf(Ljava/lang/String;)>
<com.afollestad.materialdialogs.DialogAction: [Lcom/afollestad/materialdialogs/DialogAction; values()>
<com.afollestad.materialdialogs.DialogBase: V <init>(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.DialogBase: Landroid/view/View; findViewById(I)>
<com.afollestad.materialdialogs.DialogBase: V onShow(Landroid/content/DialogInterface;)>
<com.afollestad.materialdialogs.DialogBase: V setContentView(I)>
<com.afollestad.materialdialogs.DialogBase: V setContentView(Landroid/view/View;)>
<com.afollestad.materialdialogs.DialogBase: V setContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.afollestad.materialdialogs.DialogBase: V setOnShowListener(Landroid/content/DialogInterface$OnShowListener;)>
<com.afollestad.materialdialogs.DialogBase: V setOnShowListenerInternal()>
<com.afollestad.materialdialogs.DialogBase: V setViewInternal(Landroid/view/View;)>
<com.afollestad.materialdialogs.DialogInit: V <init>()>
<com.afollestad.materialdialogs.DialogInit: V fixCanvasScalingWhenHardwareAccelerated(Landroid/widget/ProgressBar;)>
<com.afollestad.materialdialogs.DialogInit: I getInflateLayout(Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.DialogInit: I getTheme(Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.DialogInit: V init(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.DialogInit: V setupInputDialog(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.DialogInit: V setupProgressDialog(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.GravityEnum$1: V <clinit>()>
<com.afollestad.materialdialogs.GravityEnum: V <clinit>()>
<com.afollestad.materialdialogs.GravityEnum: V <init>(Ljava/lang/String;I)>
<com.afollestad.materialdialogs.GravityEnum: Lcom/afollestad/materialdialogs/GravityEnum; valueOf(Ljava/lang/String;)>
<com.afollestad.materialdialogs.GravityEnum: [Lcom/afollestad/materialdialogs/GravityEnum; values()>
<com.afollestad.materialdialogs.GravityEnum: I getGravityInt()>
<com.afollestad.materialdialogs.GravityEnum: I getTextAlignment()>
<com.afollestad.materialdialogs.MaterialDialog$1$1: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog$1;I)>
<com.afollestad.materialdialogs.MaterialDialog$1$1: V run()>
<com.afollestad.materialdialogs.MaterialDialog$1: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$1: V onGlobalLayout()>
<com.afollestad.materialdialogs.MaterialDialog$2: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$2: V run()>
<com.afollestad.materialdialogs.MaterialDialog$3: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$3: V afterTextChanged(Landroid/text/Editable;)>
<com.afollestad.materialdialogs.MaterialDialog$3: V beforeTextChanged(Ljava/lang/CharSequence;III)>
<com.afollestad.materialdialogs.MaterialDialog$3: V onTextChanged(Ljava/lang/CharSequence;III)>
<com.afollestad.materialdialogs.MaterialDialog$4: V <clinit>()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: V <init>(Landroid/content/Context;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: V checkSingleton()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; adapter(Landroid/widget/ListAdapter;Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; alwaysCallInputCallback()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; alwaysCallMultiChoiceCallback()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; alwaysCallSingleChoiceCallback()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; autoDismiss(Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; backgroundColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; backgroundColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; backgroundColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; btnSelector(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; btnSelector(ILcom/afollestad/materialdialogs/DialogAction;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; btnSelectorStacked(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; btnStackedGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog; build()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; buttonRippleColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; buttonRippleColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; buttonRippleColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; buttonsGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; callback(Lcom/afollestad/materialdialogs/MaterialDialog$ButtonCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; cancelListener(Landroid/content/DialogInterface$OnCancelListener;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; cancelable(Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; canceledOnTouchOutside(Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; content(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; content(I[Ljava/lang/Object;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; content(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; contentColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; contentColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; contentColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; contentGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; contentLineSpacing(F)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; customView(IZ)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; customView(Landroid/view/View;Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; dismissListener(Landroid/content/DialogInterface$OnDismissListener;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; dividerColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; dividerColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; dividerColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; forceStacking(Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Landroid/content/Context; getContext()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: I getItemColor()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Landroid/graphics/Typeface; getRegularFont()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; icon(Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; iconAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; iconRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; input(IILcom/afollestad/materialdialogs/MaterialDialog$InputCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; input(IIZLcom/afollestad/materialdialogs/MaterialDialog$InputCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; input(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Lcom/afollestad/materialdialogs/MaterialDialog$InputCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; input(Ljava/lang/CharSequence;Ljava/lang/CharSequence;ZLcom/afollestad/materialdialogs/MaterialDialog$InputCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputMaxLength(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputMaxLength(II)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputMaxLengthRes(II)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputRange(II)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputRange(III)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputRangeRes(III)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; inputType(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; items(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; items(Ljava/util/Collection;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; items([Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsCallback(Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsCallbackMultiChoice([Ljava/lang/Integer;Lcom/afollestad/materialdialogs/MaterialDialog$ListCallbackMultiChoice;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsCallbackSingleChoice(ILcom/afollestad/materialdialogs/MaterialDialog$ListCallbackSingleChoice;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsDisabledIndices([Ljava/lang/Integer;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsIds(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; itemsIds([I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; keyListener(Landroid/content/DialogInterface$OnKeyListener;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; limitIconToDefaultSize()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; linkColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; linkColor(Landroid/content/res/ColorStateList;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; linkColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; linkColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; listSelector(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; maxIconSize(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; maxIconSizeRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeColor(Landroid/content/res/ColorStateList;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeText(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; negativeText(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralColor(Landroid/content/res/ColorStateList;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralText(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; neutralText(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; onAny(Lcom/afollestad/materialdialogs/MaterialDialog$SingleButtonCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; onNegative(Lcom/afollestad/materialdialogs/MaterialDialog$SingleButtonCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog$SingleButtonCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; onPositive(Lcom/afollestad/materialdialogs/MaterialDialog$SingleButtonCallback;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveColor(Landroid/content/res/ColorStateList;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveText(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; positiveText(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; progress(ZI)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; progress(ZIZ)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; progressIndeterminateStyle(Z)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; progressNumberFormat(Ljava/lang/String;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; progressPercentFormat(Ljava/text/NumberFormat;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog; show()>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; showListener(Landroid/content/DialogInterface$OnShowListener;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; stackingBehavior(Lcom/afollestad/materialdialogs/StackingBehavior;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; theme(Lcom/afollestad/materialdialogs/Theme;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; title(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; title(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; titleColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; titleColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; titleColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; titleGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; typeface(Landroid/graphics/Typeface;Landroid/graphics/Typeface;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; typeface(Ljava/lang/String;Ljava/lang/String;)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; widgetColor(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; widgetColorAttr(I)>
<com.afollestad.materialdialogs.MaterialDialog$Builder: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; widgetColorRes(I)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V <init>()>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: Ljava/lang/Object; clone()>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: Z equals(Ljava/lang/Object;)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V finalize()>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: I hashCode()>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V onAny(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.MaterialDialog$ButtonCallback: Ljava/lang/String; toString()>
<com.afollestad.materialdialogs.MaterialDialog$DialogException: V <init>(Ljava/lang/String;)>
<com.afollestad.materialdialogs.MaterialDialog$ListType: V <clinit>()>
<com.afollestad.materialdialogs.MaterialDialog$ListType: V <init>(Ljava/lang/String;I)>
<com.afollestad.materialdialogs.MaterialDialog$ListType: I getLayoutForType(Lcom/afollestad/materialdialogs/MaterialDialog$ListType;)>
<com.afollestad.materialdialogs.MaterialDialog$ListType: Lcom/afollestad/materialdialogs/MaterialDialog$ListType; valueOf(Ljava/lang/String;)>
<com.afollestad.materialdialogs.MaterialDialog$ListType: [Lcom/afollestad/materialdialogs/MaterialDialog$ListType; values()>
<com.afollestad.materialdialogs.MaterialDialog$NotImplementedException: V <init>(Ljava/lang/String;)>
<com.afollestad.materialdialogs.R$anim: V <init>()>
<com.afollestad.materialdialogs.R$attr: V <init>()>
<com.afollestad.materialdialogs.R$bool: V <init>()>
<com.afollestad.materialdialogs.R$color: V <init>()>
<com.afollestad.materialdialogs.R$dimen: V <init>()>
<com.afollestad.materialdialogs.R$drawable: V <init>()>
<com.afollestad.materialdialogs.R$id: V <init>()>
<com.afollestad.materialdialogs.R$integer: V <init>()>
<com.afollestad.materialdialogs.R$layout: V <init>()>
<com.afollestad.materialdialogs.R$string: V <init>()>
<com.afollestad.materialdialogs.R$style: V <init>()>
<com.afollestad.materialdialogs.R$styleable: V <clinit>()>
<com.afollestad.materialdialogs.R$styleable: V <init>()>
<com.afollestad.materialdialogs.R: V <init>()>
<com.afollestad.materialdialogs.StackingBehavior: V <clinit>()>
<com.afollestad.materialdialogs.StackingBehavior: V <init>(Ljava/lang/String;I)>
<com.afollestad.materialdialogs.StackingBehavior: Lcom/afollestad/materialdialogs/StackingBehavior; valueOf(Ljava/lang/String;)>
<com.afollestad.materialdialogs.StackingBehavior: [Lcom/afollestad/materialdialogs/StackingBehavior; values()>
<com.afollestad.materialdialogs.Theme: V <clinit>()>
<com.afollestad.materialdialogs.Theme: V <init>(Ljava/lang/String;I)>
<com.afollestad.materialdialogs.Theme: Lcom/afollestad/materialdialogs/Theme; valueOf(Ljava/lang/String;)>
<com.afollestad.materialdialogs.Theme: [Lcom/afollestad/materialdialogs/Theme; values()>
<com.afollestad.materialdialogs.internal.MDButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.afollestad.materialdialogs.internal.MDButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.afollestad.materialdialogs.internal.MDButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;II)>
<com.afollestad.materialdialogs.internal.MDButton: V init(Landroid/content/Context;Landroid/util/AttributeSet;II)>
<com.afollestad.materialdialogs.internal.MDButton: V setAllCapsCompat(Z)>
<com.afollestad.materialdialogs.internal.MDButton: V setDefaultSelector(Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.internal.MDButton: V setStacked(ZZ)>
<com.afollestad.materialdialogs.internal.MDButton: V setStackedGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.internal.MDButton: V setStackedSelector(Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.internal.MDRootLayout$1: V <init>(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Landroid/view/View;ZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout$1: Z onPreDraw()>
<com.afollestad.materialdialogs.internal.MDRootLayout$2: V <init>(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Landroid/view/ViewGroup;ZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout$2: V onScrollChanged()>
<com.afollestad.materialdialogs.internal.MDRootLayout$3: V <clinit>()>
<com.afollestad.materialdialogs.internal.MDRootLayout: V <init>(Landroid/content/Context;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;II)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z access$000(Landroid/webkit/WebView;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z access$102(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Z)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z access$202(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Z)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V access$300(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Landroid/view/ViewGroup;ZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: [Lcom/afollestad/materialdialogs/internal/MDButton; access$400(Lcom/afollestad/materialdialogs/internal/MDRootLayout;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V access$500(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Landroid/webkit/WebView;ZZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V access$600(Lcom/afollestad/materialdialogs/internal/MDRootLayout;Landroid/view/ViewGroup;ZZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V addScrollListener(Landroid/view/ViewGroup;ZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z canAdapterViewScroll(Landroid/widget/AdapterView;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z canRecyclerViewScroll(Landroid/support/v7/widget/RecyclerView;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z canScrollViewScroll(Landroid/widget/ScrollView;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z canWebViewScroll(Landroid/webkit/WebView;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Landroid/view/View; getBottomView(Landroid/view/ViewGroup;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: Landroid/view/View; getTopView(Landroid/view/ViewGroup;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V init(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V invalidateDividersForScrollingView(Landroid/view/ViewGroup;ZZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V invalidateDividersForWebView(Landroid/webkit/WebView;ZZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V invertGravityIfNecessary()>
<com.afollestad.materialdialogs.internal.MDRootLayout: Z isVisible(Landroid/view/View;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V setUpDividersVisibility(Landroid/view/View;ZZ)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V noTitleNoPadding()>
<com.afollestad.materialdialogs.internal.MDRootLayout: V onDraw(Landroid/graphics/Canvas;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V onFinishInflate()>
<com.afollestad.materialdialogs.internal.MDRootLayout: V onLayout(ZIIII)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V onMeasure(II)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V setButtonGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V setButtonStackedGravity(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V setDividerColor(I)>
<com.afollestad.materialdialogs.internal.MDRootLayout: V setStackingBehavior(Lcom/afollestad/materialdialogs/StackingBehavior;)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V <init>()>
<com.afollestad.materialdialogs.internal.MDTintHelper: Landroid/content/res/ColorStateList; createEditTextColorStateList(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setCursorTint(Landroid/widget/EditText;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/CheckBox;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/EditText;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/ProgressBar;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/ProgressBar;IZ)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/RadioButton;I)>
<com.afollestad.materialdialogs.internal.MDTintHelper: V setTint(Landroid/widget/SeekBar;I)>
<com.afollestad.materialdialogs.internal.ThemeSingleton: V <init>()>
<com.afollestad.materialdialogs.internal.ThemeSingleton: Lcom/afollestad/materialdialogs/internal/ThemeSingleton; get()>
<com.afollestad.materialdialogs.internal.ThemeSingleton: Lcom/afollestad/materialdialogs/internal/ThemeSingleton; get(Z)>
<com.afollestad.materialdialogs.util.DialogUtils$1: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog;Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.util.DialogUtils$1: V run()>
<com.afollestad.materialdialogs.util.DialogUtils$2: V <clinit>()>
<com.afollestad.materialdialogs.util.DialogUtils: V <init>()>
<com.afollestad.materialdialogs.util.DialogUtils: I adjustAlpha(IF)>
<com.afollestad.materialdialogs.util.DialogUtils: Landroid/content/res/ColorStateList; getActionTextColorStateList(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: Landroid/content/res/ColorStateList; getActionTextStateList(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: I getColor(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: [I getColorArray(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: I getDisabledColor(Landroid/content/Context;)>
<com.afollestad.materialdialogs.util.DialogUtils: I gravityEnumToAttrInt(Lcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.util.DialogUtils: V hideKeyboard(Landroid/content/DialogInterface;Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.util.DialogUtils: Z isColorDark(I)>
<com.afollestad.materialdialogs.util.DialogUtils: Z isIn(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.afollestad.materialdialogs.util.DialogUtils: Landroid/content/res/ColorStateList; resolveActionTextColorStateList(Landroid/content/Context;ILandroid/content/res/ColorStateList;)>
<com.afollestad.materialdialogs.util.DialogUtils: Z resolveBoolean(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: Z resolveBoolean(Landroid/content/Context;IZ)>
<com.afollestad.materialdialogs.util.DialogUtils: I resolveColor(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: I resolveColor(Landroid/content/Context;II)>
<com.afollestad.materialdialogs.util.DialogUtils: I resolveDimension(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: I resolveDimension(Landroid/content/Context;II)>
<com.afollestad.materialdialogs.util.DialogUtils: Landroid/graphics/drawable/Drawable; resolveDrawable(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: Landroid/graphics/drawable/Drawable; resolveDrawable(Landroid/content/Context;ILandroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.util.DialogUtils: Lcom/afollestad/materialdialogs/GravityEnum; resolveGravityEnum(Landroid/content/Context;ILcom/afollestad/materialdialogs/GravityEnum;)>
<com.afollestad.materialdialogs.util.DialogUtils: Ljava/lang/String; resolveString(Landroid/content/Context;I)>
<com.afollestad.materialdialogs.util.DialogUtils: V setBackgroundCompat(Landroid/view/View;Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.util.DialogUtils: V showKeyboard(Landroid/content/DialogInterface;Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.util.RippleHelper: V <init>()>
<com.afollestad.materialdialogs.util.RippleHelper: V applyColor(Landroid/graphics/drawable/Drawable;I)>
<com.afollestad.materialdialogs.util.TypefaceHelper: V <clinit>()>
<com.afollestad.materialdialogs.util.TypefaceHelper: V <init>()>
<com.afollestad.materialdialogs.util.TypefaceHelper: Landroid/graphics/Typeface; get(Landroid/content/Context;Ljava/lang/String;)>
<com.getbase.floatingactionbutton.AddFloatingActionButton$1: V <init>(Lcom/getbase/floatingactionbutton/AddFloatingActionButton;FFFF)>
<com.getbase.floatingactionbutton.AddFloatingActionButton$1: V draw(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<com.getbase.floatingactionbutton.BuildConfig: V <init>()>
<com.getbase.floatingactionbutton.FloatingActionButton$1: V <init>(Lcom/getbase/floatingactionbutton/FloatingActionButton;IIIII)>
<com.getbase.floatingactionbutton.FloatingActionButton$1: Landroid/graphics/Shader; resize(II)>
<com.getbase.floatingactionbutton.FloatingActionButton$TranslucentLayerDrawable: V <init>(I[Landroid/graphics/drawable/Drawable;)>
<com.getbase.floatingactionbutton.FloatingActionButton$TranslucentLayerDrawable: V draw(Landroid/graphics/Canvas;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V <init>(Landroid/content/Context;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.getbase.floatingactionbutton.FloatingActionButton: I adjustColorBrightness(IF)>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/graphics/drawable/Drawable; createCircleDrawable(IF)>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/graphics/drawable/StateListDrawable; createFillDrawable(F)>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/graphics/drawable/Drawable; createInnerStrokesDrawable(IF)>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/graphics/drawable/Drawable; createOuterStrokeDrawable(F)>
<com.getbase.floatingactionbutton.FloatingActionButton: I darkenColor(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: I halfTransparent(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: I lightenColor(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: I opacityToAlpha(F)>
<com.getbase.floatingactionbutton.FloatingActionButton: I opaque(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setBackgroundCompat(Landroid/graphics/drawable/Drawable;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V updateCircleSize()>
<com.getbase.floatingactionbutton.FloatingActionButton: V updateDrawableSize()>
<com.getbase.floatingactionbutton.FloatingActionButton: I getColor(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: I getColorDisabled()>
<com.getbase.floatingactionbutton.FloatingActionButton: I getColorNormal()>
<com.getbase.floatingactionbutton.FloatingActionButton: I getColorPressed()>
<com.getbase.floatingactionbutton.FloatingActionButton: F getDimension(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/graphics/drawable/Drawable; getIconDrawable()>
<com.getbase.floatingactionbutton.FloatingActionButton: Landroid/widget/TextView; getLabelView()>
<com.getbase.floatingactionbutton.FloatingActionButton: I getSize()>
<com.getbase.floatingactionbutton.FloatingActionButton: Ljava/lang/String; getTitle()>
<com.getbase.floatingactionbutton.FloatingActionButton: V init(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.FloatingActionButton: Z isStrokeVisible()>
<com.getbase.floatingactionbutton.FloatingActionButton: V onMeasure(II)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorDisabled(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorDisabledResId(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorNormal(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorNormalResId(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorPressed(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setColorPressedResId(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setIcon(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setIconDrawable(Landroid/graphics/drawable/Drawable;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setSize(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setStrokeVisible(Z)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setTitle(Ljava/lang/String;)>
<com.getbase.floatingactionbutton.FloatingActionButton: V setVisibility(I)>
<com.getbase.floatingactionbutton.FloatingActionButton: V updateBackground()>
<com.getbase.floatingactionbutton.FloatingActionsMenu$2: V <init>(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$2: V onClick(Landroid/view/View;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams$1: V <init>(Lcom/getbase/floatingactionbutton/FloatingActionsMenu$LayoutParams;Landroid/view/View;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams$1: V onAnimationEnd(Landroid/animation/Animator;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams$1: V onAnimationStart(Landroid/animation/Animator;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams: V <init>(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;Landroid/view/ViewGroup$LayoutParams;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams: Landroid/animation/ObjectAnimator; access$700(Lcom/getbase/floatingactionbutton/FloatingActionsMenu$LayoutParams;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams: Landroid/animation/ObjectAnimator; access$800(Lcom/getbase/floatingactionbutton/FloatingActionsMenu$LayoutParams;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams: V addLayerTypeListener(Landroid/animation/Animator;Landroid/view/View;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams: V setAnimationsTarget(Landroid/view/View;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable: V <init>(Landroid/graphics/drawable/Drawable;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable: V draw(Landroid/graphics/Canvas;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable: F getRotation()>
<com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable: V setRotation(F)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState$1: V <init>()>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState$1: Lcom/getbase/floatingactionbutton/FloatingActionsMenu$SavedState; createFromParcel(Landroid/os/Parcel;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState$1: [Lcom/getbase/floatingactionbutton/FloatingActionsMenu$SavedState; newArray(I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState$1: [Ljava/lang/Object; newArray(I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState: V <clinit>()>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState: V <init>(Landroid/os/Parcel;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState: V <init>(Landroid/os/Parcel;Lcom/getbase/floatingactionbutton/FloatingActionsMenu$1;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState: V <init>(Landroid/os/Parcelable;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V <clinit>()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V <init>(Landroid/content/Context;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I access$000(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I access$100(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/animation/Interpolator; access$1000()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/animation/Interpolator; access$1100()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I access$1200(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I access$200(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Z access$300(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Lcom/getbase/floatingactionbutton/FloatingActionsMenu$RotatingDrawable; access$402(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;Lcom/getbase/floatingactionbutton/FloatingActionsMenu$RotatingDrawable;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/animation/AnimatorSet; access$500(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/animation/AnimatorSet; access$600(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/animation/Interpolator; access$900()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I adjustForOvershoot(I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V collapse(Z)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V createAddButton(Landroid/content/Context;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V createLabels()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Z expandsHorizontally()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: I getColor(I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V init(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V addButton(Lcom/getbase/floatingactionbutton/FloatingActionButton;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Z checkLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V collapse()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V collapseImmediately()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V expand()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/ViewGroup$LayoutParams; generateDefaultLayoutParams()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Z isExpanded()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V onFinishInflate()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V onLayout(ZIIII)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V onMeasure(II)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: Landroid/os/Parcelable; onSaveInstanceState()>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V removeButton(Lcom/getbase/floatingactionbutton/FloatingActionButton;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V setEnabled(Z)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V setOnFloatingActionsMenuUpdateListener(Lcom/getbase/floatingactionbutton/FloatingActionsMenu$OnFloatingActionsMenuUpdateListener;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu: V toggle()>
<com.getbase.floatingactionbutton.R$attr: V <init>()>
<com.getbase.floatingactionbutton.R$dimen: V <init>()>
<com.getbase.floatingactionbutton.R$drawable: V <init>()>
<com.getbase.floatingactionbutton.R$id: V <init>()>
<com.getbase.floatingactionbutton.R$styleable: V <clinit>()>
<com.getbase.floatingactionbutton.R$styleable: V <init>()>
<com.getbase.floatingactionbutton.R: V <init>()>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V <clinit>()>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V <init>(Landroid/view/View;)>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V addTouchDelegate(Landroid/view/TouchDelegate;)>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V clearTouchDelegates()>
<com.getbase.floatingactionbutton.TouchDelegateGroup: Z onTouchEvent(Landroid/view/MotionEvent;)>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V removeTouchDelegate(Landroid/view/TouchDelegate;)>
<com.getbase.floatingactionbutton.TouchDelegateGroup: V setEnabled(Z)>
<com.ichi2.anim.ActivityTransitionAnimation: V <clinit>()>
<com.ichi2.anim.ActivityTransitionAnimation: V <init>()>
<com.ichi2.anim.ActivityTransitionAnimation: V slide(Landroid/app/Activity;I)>
<com.ichi2.anim.ViewAnimation: V <init>()>
<com.ichi2.anim.ViewAnimation: Landroid/view/animation/Animation; fade(III)>
<com.ichi2.anim.ViewAnimation: Landroid/view/animation/Animation; slide(III)>
<com.ichi2.anki.AbstractFlashcardViewer$11: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$11: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$12: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$12: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.AbstractFlashcardViewer$14: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$14: V onClick(Landroid/view/View;)>
<com.ichi2.anki.AbstractFlashcardViewer$15: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$15: V onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer$15: Z shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer$16: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$16: Z onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$17: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$17: Z onKey(Landroid/view/View;ILandroid/view/KeyEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$18: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$18: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$19: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$19: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$1: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$1: V handleMessage(Landroid/os/Message;)>
<com.ichi2.anki.AbstractFlashcardViewer$20: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;ILandroid/util/TypedValue;)>
<com.ichi2.anki.AbstractFlashcardViewer$20: V onChronometerTick(Landroid/widget/Chronometer;)>
<com.ichi2.anki.AbstractFlashcardViewer$21: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$21: V handleMessage(Landroid/os/Message;)>
<com.ichi2.anki.AbstractFlashcardViewer$2: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$2: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$3: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$3: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$4: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$4: V onClick(Landroid/view/View;)>
<com.ichi2.anki.AbstractFlashcardViewer$5: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$5: V onClick(Landroid/view/View;)>
<com.ichi2.anki.AbstractFlashcardViewer$6: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$6: Z onTouch(Landroid/view/View;Landroid/view/MotionEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$7: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$7: Z onLongClick(Landroid/view/View;)>
<com.ichi2.anki.AbstractFlashcardViewer$AnkiDroidWebChromeClient: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$AnkiDroidWebChromeClient: Z onJsAlert(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyGestureDetector: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyGestureDetector: Z onDoubleTap(Landroid/view/MotionEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyGestureDetector: Z onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)>
<com.ichi2.anki.AbstractFlashcardViewer$MyGestureDetector: Z onSingleTapConfirmed(Landroid/view/MotionEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyGestureDetector: Z onSingleTapUp(Landroid/view/MotionEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView$1: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer$MyWebView;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView$1: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView$2: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer$MyWebView;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView$2: V run()>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;Landroid/content/Context;)>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView: Z onCheckIsTextEditor()>
<com.ichi2.anki.AbstractFlashcardViewer$MyWebView: V onScrollChanged(IIII)>
<com.ichi2.anki.AnkiDroidApp: V <clinit>()>
<com.ichi2.anki.AnkiDroidApp: V <init>()>
<com.ichi2.anki.AnkiDroidApp: Landroid/content/res/Resources; getAppResources()>
<com.ichi2.anki.AnkiDroidApp: Ljava/lang/String; getCacheStorageDirectory()>
<com.ichi2.anki.AnkiDroidApp: Ljava/lang/String; getExceptionHash(Ljava/lang/Throwable;)>
<com.ichi2.anki.AnkiDroidApp: Ljava/lang/String; getFeedbackUrl()>
<com.ichi2.anki.AnkiDroidApp: Lcom/ichi2/anki/AnkiDroidApp; getInstance()>
<com.ichi2.anki.AnkiDroidApp: Ljava/lang/String; getManualUrl()>
<com.ichi2.anki.AnkiDroidApp: Landroid/content/SharedPreferences; getSharedPrefs(Landroid/content/Context;)>
<com.ichi2.anki.AnkiDroidApp: Z initiateGestures(Landroid/content/SharedPreferences;)>
<com.ichi2.anki.AnkiDroidApp: Z isCurrentLanguage(Ljava/lang/String;)>
<com.ichi2.anki.AnkiDroidApp: Z isSdCardMounted()>
<com.ichi2.anki.AnkiDroidApp: V sendExceptionReport(Ljava/lang/Throwable;Ljava/lang/String;)>
<com.ichi2.anki.AnkiDroidApp: V sendExceptionReport(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.AnkiDroidApp: V setLanguage(Ljava/lang/String;)>
<com.ichi2.anki.AnkiDroidApp: V onConfigurationChanged(Landroid/content/res/Configuration;)>
<com.ichi2.anki.AnkiDroidApp: V onCreate()>
<com.ichi2.anki.AnkiDroidApp: V setAcraReportingMode(Ljava/lang/String;)>
<com.ichi2.anki.AnkiFont: V <clinit>()>
<com.ichi2.anki.AnkiFont: V <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)>
<com.ichi2.anki.AnkiFont: Lcom/ichi2/anki/AnkiFont; createAnkiFont(Landroid/content/Context;Ljava/lang/String;Z)>
<com.ichi2.anki.AnkiFont: Landroid/graphics/Typeface; getTypeface(Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.anki.AnkiFont: V setAsDefault()>
<com.ichi2.anki.AnkiFont: V setAsOverride()>
<com.ichi2.anki.AnkiFont: Ljava/lang/String; getCSS(Z)>
<com.ichi2.anki.AnkiFont: Ljava/lang/String; getDeclaration()>
<com.ichi2.anki.AnkiFont: Ljava/lang/String; getName()>
<com.ichi2.anki.AnkiFont: Ljava/lang/String; getPath()>
<com.ichi2.anki.BackupManager$1: V <init>(Ljava/lang/String;Ljava/io/File;Ljava/io/File;)>
<com.ichi2.anki.BackupManager$1: V run()>
<com.ichi2.anki.BackupManager: V <clinit>()>
<com.ichi2.anki.BackupManager: V <init>()>
<com.ichi2.anki.BackupManager: Z deleteDeckBackups(Ljava/io/File;I)>
<com.ichi2.anki.BackupManager: Z deleteDeckBackups(Ljava/lang/String;I)>
<com.ichi2.anki.BackupManager: Z deleteDeckBackups([Ljava/io/File;I)>
<com.ichi2.anki.BackupManager: Z enoughDiscSpace(Ljava/lang/String;)>
<com.ichi2.anki.BackupManager: Ljava/io/File; getBackupDirectory(Ljava/io/File;)>
<com.ichi2.anki.BackupManager: [Ljava/io/File; getBackups(Ljava/io/File;)>
<com.ichi2.anki.BackupManager: Ljava/io/File; getBrokenDirectory(Ljava/io/File;)>
<com.ichi2.anki.BackupManager: J getFreeDiscSpace(Ljava/io/File;)>
<com.ichi2.anki.BackupManager: J getFreeDiscSpace(Ljava/lang/String;)>
<com.ichi2.anki.BackupManager: Z isActivated()>
<com.ichi2.anki.BackupManager: Z moveDatabaseToBrokenFolder(Ljava/lang/String;Z)>
<com.ichi2.anki.BackupManager: Z performBackupInBackground(Ljava/lang/String;)>
<com.ichi2.anki.BackupManager: Z performBackupInBackground(Ljava/lang/String;I)>
<com.ichi2.anki.BackupManager: Z performBackupInBackground(Ljava/lang/String;IZ)>
<com.ichi2.anki.BackupManager: Z performBackupInBackground(Ljava/lang/String;Z)>
<com.ichi2.anki.BackupManager: Z removeDir(Ljava/io/File;)>
<com.ichi2.anki.BackupManager: Z repairCollection(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.BuildConfig: V <init>()>
<com.ichi2.anki.CardBrowser$11: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$11: V onClick(Landroid/view/View;)>
<com.ichi2.anki.CardBrowser$18: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$18: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.CardBrowser$4: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$4: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.CardBrowser$4: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.CardBrowser$5: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$5: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.CardBrowser$5: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.CardBrowser$6: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$6: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.CardBrowser$6: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.CardBrowser$7: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$7: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.CardBrowser$8: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$8: Z onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: V <init>(Lcom/ichi2/anki/CardBrowser;Landroid/content/Context;I[Ljava/lang/String;[ILjava/lang/String;ILjava/lang/String;)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: V bindView(ILandroid/view/View;)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: I getColor(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: V setFont(Landroid/widget/TextView;)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: I getCount()>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: [Ljava/lang/String; getFromMapping()>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: Ljava/lang/Object; getItem(I)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: J getItemId(I)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.ichi2.anki.CardBrowser$MultiColumnListAdapter: V setFromMapping([Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$RenderOnScroll: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$RenderOnScroll: V <init>(Lcom/ichi2/anki/CardBrowser;Lcom/ichi2/anki/CardBrowser$1;)>
<com.ichi2.anki.CardBrowser$RenderOnScroll: V onScroll(Landroid/widget/AbsListView;III)>
<com.ichi2.anki.CardBrowser$RenderOnScroll: V onScrollStateChanged(Landroid/widget/AbsListView;I)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$1: V <init>(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;Lorg/json/JSONArray;I)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$1: V afterTextChanged(Landroid/text/Editable;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$1: V beforeTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$1: V onTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$3: V <init>(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$3: V run()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$4: V <init>(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$4: V run()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$5: V <init>(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$5: V run()>
<com.ichi2.anki.CollectionHelper$LazyHolder: V <clinit>()>
<com.ichi2.anki.CollectionHelper$LazyHolder: V <init>()>
<com.ichi2.anki.CollectionHelper$LazyHolder: Lcom/ichi2/anki/CollectionHelper; access$000()>
<com.ichi2.anki.CollectionHelper: V <init>()>
<com.ichi2.anki.CollectionHelper: Ljava/lang/String; getCollectionPath(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: Ljava/lang/String; getCurrentAnkiDroidDirectory(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: Ljava/lang/String; getDefaultAnkiDroidDirectory()>
<com.ichi2.anki.CollectionHelper: Lcom/ichi2/anki/CollectionHelper; getInstance()>
<com.ichi2.anki.CollectionHelper: Ljava/lang/String; getParentDirectory(Ljava/lang/String;)>
<com.ichi2.anki.CollectionHelper: Z hasStorageAccessPermission(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: V initializeAnkiDroidDirectory(Ljava/lang/String;)>
<com.ichi2.anki.CollectionHelper: Z isCurrentAnkiDroidDirAccessible(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: V closeCollection(Z)>
<com.ichi2.anki.CollectionHelper: Z colIsOpen()>
<com.ichi2.anki.CollectionHelper: Z exceededCursorSizeLimit(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: Lcom/ichi2/libanki/Collection; getCol(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: Lcom/ichi2/libanki/Collection; getColSafe(Landroid/content/Context;)>
<com.ichi2.anki.CollectionHelper: Z isCollectionLocked()>
<com.ichi2.anki.CollectionHelper: V lockCollection()>
<com.ichi2.anki.CollectionHelper: V unlockCollection()>
<com.ichi2.anki.CustomExceptionHandler: V <init>()>
<com.ichi2.anki.CustomExceptionHandler: V collectInformation()>
<com.ichi2.anki.CustomExceptionHandler: J getAvailableInternalMemorySize()>
<com.ichi2.anki.CustomExceptionHandler: Lcom/ichi2/anki/CustomExceptionHandler; getInstance()>
<com.ichi2.anki.CustomExceptionHandler: J getTotalInternalMemorySize()>
<com.ichi2.anki.CustomExceptionHandler: V saveReportToFile(Ljava/lang/String;)>
<com.ichi2.anki.CustomExceptionHandler: V init(Landroid/content/Context;)>
<com.ichi2.anki.CustomExceptionHandler: V uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)>
<com.ichi2.anki.CustomExceptionHandler: V uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;Ljava/lang/String;)>
<com.ichi2.anki.CustomExceptionHandler: V uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions$1: V <init>(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions$1: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: V <init>(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: V access$300(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack$Editor;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: V remConf()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: V apply()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; clear()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Z commit()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putBoolean(Ljava/lang/String;Z)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putFloat(Ljava/lang/String;F)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putInt(Ljava/lang/String;I)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putLong(Ljava/lang/String;J)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putString(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putStringSet(Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; remove(Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: V <init>(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Lcom/afollestad/materialdialogs/MaterialDialog; access$400(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Lcom/afollestad/materialdialogs/MaterialDialog; access$402(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Ljava/util/Map; access$600(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Ljava/util/Map; access$700(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: V cacheValues()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Z contains(Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Landroid/content/SharedPreferences$Editor; edit()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack$Editor; edit()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Ljava/util/Map; getAll()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Z getBoolean(Ljava/lang/String;Z)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: F getFloat(Ljava/lang/String;F)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: I getInt(Ljava/lang/String;I)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: J getLong(Ljava/lang/String;J)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Ljava/lang/String; getString(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: Ljava/util/Set; getStringSet(Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: V registerOnSharedPreferenceChangeListener(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack: V unregisterOnSharedPreferenceChangeListener(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)>
<com.ichi2.anki.DeckOptions$JSONNameComparator: V <init>(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions$JSONNameComparator: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.DeckOptions$JSONNameComparator: I compare(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.DeckPicker$10: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$10: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$11: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$11: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$12: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$12: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$18$1: V <init>(Lcom/ichi2/anki/DeckPicker$18;J)>
<com.ichi2.anki.DeckPicker$18$1: Z onKey(Landroid/content/DialogInterface;ILandroid/view/KeyEvent;)>
<com.ichi2.anki.DeckPicker$19: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$19: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.DeckPicker$1: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$20: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$20: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$21: V <init>(Lcom/ichi2/anki/DeckPicker;Landroid/net/Uri;)>
<com.ichi2.anki.DeckPicker$21: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$22: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$22: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$28$1: V <init>(Lcom/ichi2/anki/DeckPicker$28;Ljava/util/List;)>
<com.ichi2.anki.DeckPicker$28$1: V run()>
<com.ichi2.anki.DeckPicker$2: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$3: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$3: V onClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$4: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$4: Z onLongClick(Landroid/view/View;)>
<com.ichi2.anki.DeckPicker$9: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$9: V onClick(Landroid/view/View;)>
<com.ichi2.anki.FieldEditText: V <clinit>()>
<com.ichi2.anki.FieldEditText: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.FieldEditText: V <init>(Landroid/content/Context;ILjava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.FieldEditText: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.anki.FieldEditText: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.ichi2.anki.FieldEditText: Landroid/widget/TextView; getLabel()>
<com.ichi2.anki.FieldEditText: Ljava/lang/String; getName()>
<com.ichi2.anki.FieldEditText: I getOrd()>
<com.ichi2.anki.FieldEditText: V init(ILjava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.FieldEditText: V setDefaultStyle()>
<com.ichi2.anki.FieldEditText: V setDupeStyle()>
<com.ichi2.anki.FilteredDeckOptions$1: V <init>(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions$1: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: V <init>(Lcom/ichi2/anki/FilteredDeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: V apply()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; clear()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Z commit()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putBoolean(Ljava/lang/String;Z)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putFloat(Ljava/lang/String;F)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putInt(Ljava/lang/String;I)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putLong(Ljava/lang/String;J)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putString(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; putStringSet(Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: Landroid/content/SharedPreferences$Editor; remove(Ljava/lang/String;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: V <init>(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Ljava/util/Map; access$100(Lcom/ichi2/anki/FilteredDeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Ljava/util/Map; access$500(Lcom/ichi2/anki/FilteredDeckOptions$DeckPreferenceHack;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: V cacheValues()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Z contains(Ljava/lang/String;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Landroid/content/SharedPreferences$Editor; edit()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Lcom/ichi2/anki/FilteredDeckOptions$DeckPreferenceHack$Editor; edit()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Ljava/util/Map; getAll()>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Z getBoolean(Ljava/lang/String;Z)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: F getFloat(Ljava/lang/String;F)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: I getInt(Ljava/lang/String;I)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: J getLong(Ljava/lang/String;J)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Ljava/lang/String; getString(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: Ljava/util/Set; getStringSet(Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: V registerOnSharedPreferenceChangeListener(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)>
<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: V unregisterOnSharedPreferenceChangeListener(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)>
<com.ichi2.anki.FlashCardsContract$Card: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$Card: V <init>()>
<com.ichi2.anki.FlashCardsContract$CardTemplate: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$CardTemplate: V <init>()>
<com.ichi2.anki.FlashCardsContract$Deck: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$Deck: V <init>()>
<com.ichi2.anki.FlashCardsContract$Model: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$Model: V <init>()>
<com.ichi2.anki.FlashCardsContract$Note: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$Note: V <init>()>
<com.ichi2.anki.FlashCardsContract$ReviewInfo: V <clinit>()>
<com.ichi2.anki.FlashCardsContract$ReviewInfo: V <init>()>
<com.ichi2.anki.FlashCardsContract: V <clinit>()>
<com.ichi2.anki.FlashCardsContract: V <init>()>
<com.ichi2.anki.Info$1: V <init>(Lcom/ichi2/anki/Info;Landroid/view/View;)>
<com.ichi2.anki.Info$1: V onProgressChanged(Landroid/webkit/WebView;I)>
<com.ichi2.anki.Info$2: V <init>(Lcom/ichi2/anki/Info;)>
<com.ichi2.anki.Info$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.Info$3: V <init>(Lcom/ichi2/anki/Info;)>
<com.ichi2.anki.Info$3: V onClick(Landroid/view/View;)>
<com.ichi2.anki.IntentHandler: V <init>()>
<com.ichi2.anki.IntentHandler: V access$000(Lcom/ichi2/anki/IntentHandler;)>
<com.ichi2.anki.IntentHandler: Z copyFileToCache(Landroid/content/Intent;Ljava/lang/String;)>
<com.ichi2.anki.IntentHandler: V finishWithFade()>
<com.ichi2.anki.IntentHandler: Z hasValidZipFile(Landroid/content/Intent;)>
<com.ichi2.anki.IntentHandler: V sendDoSyncMsg()>
<com.ichi2.anki.IntentHandler: V sendShowImportFileDialogMsg(Ljava/lang/String;)>
<com.ichi2.anki.IntentHandler: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Lookup: V <init>()>
<com.ichi2.anki.Lookup: V access$000(Ljava/lang/String;I)>
<com.ichi2.anki.Lookup: Ljava/lang/String; access$100()>
<com.ichi2.anki.Lookup: Ljava/lang/String; access$102(Ljava/lang/String;)>
<com.ichi2.anki.Lookup: V access$200(Ljava/lang/String;Ljava/lang/CharSequence;)>
<com.ichi2.anki.Lookup: Ljava/lang/String; getLanguage(I)>
<com.ichi2.anki.Lookup: Ljava/lang/String; getSearchStringTitle()>
<com.ichi2.anki.Lookup: Z initialize(Landroid/content/Context;)>
<com.ichi2.anki.Lookup: Z isAvailable()>
<com.ichi2.anki.Lookup: Z lookUp(Ljava/lang/String;)>
<com.ichi2.anki.Lookup: V lookupLeo(Ljava/lang/String;Ljava/lang/CharSequence;)>
<com.ichi2.anki.Lookup: V storeLanguage(Ljava/lang/String;I)>
<com.ichi2.anki.Manifest$permission: V <init>()>
<com.ichi2.anki.Manifest: V <init>()>
<com.ichi2.anki.MetaDB: V <clinit>()>
<com.ichi2.anki.MetaDB: V <init>()>
<com.ichi2.anki.MetaDB: V closeDB()>
<com.ichi2.anki.MetaDB: Ljava/lang/String; getLanguage(Landroid/content/Context;JII)>
<com.ichi2.anki.MetaDB: I getLookupDictionary(Landroid/content/Context;J)>
<com.ichi2.anki.MetaDB: I getNotificationStatus(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: Z getWhiteboardState(Landroid/content/Context;J)>
<com.ichi2.anki.MetaDB: [I getWidgetSmallStatus(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: V openDB(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: V openDBIfClosed(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: Z resetDB(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: Z resetDeckLanguages(Landroid/content/Context;J)>
<com.ichi2.anki.MetaDB: Z resetLanguages(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: Z resetWidget(Landroid/content/Context;)>
<com.ichi2.anki.MetaDB: V storeLanguage(Landroid/content/Context;JIILjava/lang/String;)>
<com.ichi2.anki.MetaDB: V storeLookupDictionary(Landroid/content/Context;JI)>
<com.ichi2.anki.MetaDB: V storeSmallWidgetStatus(Landroid/content/Context;Landroid/util/Pair;)>
<com.ichi2.anki.MetaDB: V storeWhiteboardState(Landroid/content/Context;JZ)>
<com.ichi2.anki.MetaDB: Ljava/lang/String; stripQuotes(Ljava/lang/String;)>
<com.ichi2.anki.MetaDB: V updateLanguage(Landroid/content/Context;JIILjava/lang/String;)>
<com.ichi2.anki.MetaDB: Landroid/database/sqlite/SQLiteDatabase; upgradeDB(Landroid/database/sqlite/SQLiteDatabase;I)>
<com.ichi2.anki.ModelBrowser$4: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$4: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.ModelBrowser$5: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$5: Z onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.ModelBrowser$7: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$7: V run()>
<com.ichi2.anki.ModelBrowser$8: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$8: V run()>
<com.ichi2.anki.ModelBrowser$DisplayPair: V <init>(Lcom/ichi2/anki/ModelBrowser;Ljava/lang/String;I)>
<com.ichi2.anki.ModelBrowser$DisplayPair: I getCount()>
<com.ichi2.anki.ModelBrowser$DisplayPair: Ljava/lang/String; getName()>
<com.ichi2.anki.ModelBrowser$DisplayPair: Ljava/lang/String; toString()>
<com.ichi2.anki.ModelBrowser$DisplayPairAdapter: V <init>(Lcom/ichi2/anki/ModelBrowser;Landroid/content/Context;Ljava/util/ArrayList;)>
<com.ichi2.anki.ModelBrowser$DisplayPairAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.ichi2.anki.ModelFieldEditor$1: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$1: V run()>
<com.ichi2.anki.ModelFieldEditor$2: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$2: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.ModelFieldEditor$3$1: V <init>(Lcom/ichi2/anki/ModelFieldEditor$3;)>
<com.ichi2.anki.ModelFieldEditor$3$1: V run()>
<com.ichi2.anki.ModelFieldEditor$4: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$4: V run()>
<com.ichi2.anki.ModelFieldEditor$5$1: V <init>(Lcom/ichi2/anki/ModelFieldEditor$5;)>
<com.ichi2.anki.ModelFieldEditor$5$1: V run()>
<com.ichi2.anki.ModelFieldEditor$6$1: V <init>(Lcom/ichi2/anki/ModelFieldEditor$6;)>
<com.ichi2.anki.ModelFieldEditor$6$1: V run()>
<com.ichi2.anki.ModelFieldEditor$7: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$7: V run()>
<com.ichi2.anki.MyAccount$1: V <init>(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.MyAccount$2: V <init>(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.MyAccount$3: V <init>(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount$3: V onClick(Landroid/view/View;)>
<com.ichi2.anki.MyAccount$4: V <init>(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount$4: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NavigationDrawerActivity$1: V <init>(Lcom/ichi2/anki/NavigationDrawerActivity;)>
<com.ichi2.anki.NavigationDrawerActivity$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NavigationDrawerActivity$2: V <init>(Lcom/ichi2/anki/NavigationDrawerActivity;Landroid/content/SharedPreferences;)>
<com.ichi2.anki.NavigationDrawerActivity$2: V onCheckedChanged(Landroid/widget/CompoundButton;Z)>
<com.ichi2.anki.NavigationDrawerActivity$4: V <init>(Lcom/ichi2/anki/NavigationDrawerActivity;Landroid/view/MenuItem;)>
<com.ichi2.anki.NavigationDrawerActivity$4: V run()>
<com.ichi2.anki.NoteEditor$11: V <init>(Lcom/ichi2/anki/NoteEditor;I)>
<com.ichi2.anki.NoteEditor$11: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NoteEditor$12: V <init>(Lcom/ichi2/anki/NoteEditor;I)>
<com.ichi2.anki.NoteEditor$12: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NoteEditor$13: V <init>(Lcom/ichi2/anki/NoteEditor;I)>
<com.ichi2.anki.NoteEditor$13: V afterTextChanged(Landroid/text/Editable;)>
<com.ichi2.anki.NoteEditor$13: V beforeTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.NoteEditor$13: V onTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.NoteEditor$2: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NoteEditor$3: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$3: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.NoteEditor$3: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.NoteEditor$4: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$4: V onClick(Landroid/view/View;)>
<com.ichi2.anki.NoteEditor$5: V <init>(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor$5: V run()>
<com.ichi2.anki.NoteEditor$6: V <init>(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor$6: V run()>
<com.ichi2.anki.NoteEditor$7: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$7: V run()>
<com.ichi2.anki.NoteEditor$8: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$8: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.NoteEditor$EditNoteTypeListener: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$EditNoteTypeListener: V <init>(Lcom/ichi2/anki/NoteEditor;Lcom/ichi2/anki/NoteEditor$1;)>
<com.ichi2.anki.NoteEditor$EditNoteTypeListener: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.NoteEditor$EditNoteTypeListener: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.NoteEditor$JSONNameComparator: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$JSONNameComparator: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.NoteEditor$JSONNameComparator: I compare(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor$SetNoteTypeListener: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$SetNoteTypeListener: V <init>(Lcom/ichi2/anki/NoteEditor;Lcom/ichi2/anki/NoteEditor$1;)>
<com.ichi2.anki.NoteEditor$SetNoteTypeListener: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.NoteEditor$SetNoteTypeListener: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.Preferences$2: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$2: Z onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)>
<com.ichi2.anki.Preferences$3: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$3: Z onPreferenceClick(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences$4: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$4: Z onPreferenceClick(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences$5: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$5: Z onPreferenceChange(Landroid/preference/Preference;Ljava/lang/Object;)>
<com.ichi2.anki.Preferences$6: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$6: Z onPreferenceClick(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences$7: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$7: Z onPreferenceClick(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences$8: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$8: Z onPreferenceClick(Landroid/preference/Preference;)>
<com.ichi2.anki.Previewer$1: V <init>(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.R$anim: V <init>()>
<com.ichi2.anki.R$animator: V <init>()>
<com.ichi2.anki.R$array: V <init>()>
<com.ichi2.anki.R$attr: V <init>()>
<com.ichi2.anki.R$bool: V <init>()>
<com.ichi2.anki.R$color: V <init>()>
<com.ichi2.anki.R$dimen: V <init>()>
<com.ichi2.anki.R$drawable: V <init>()>
<com.ichi2.anki.R$id: V <init>()>
<com.ichi2.anki.R$integer: V <init>()>
<com.ichi2.anki.R$interpolator: V <init>()>
<com.ichi2.anki.R$layout: V <init>()>
<com.ichi2.anki.R$menu: V <init>()>
<com.ichi2.anki.R$plurals: V <init>()>
<com.ichi2.anki.R$string: V <init>()>
<com.ichi2.anki.R$style: V <init>()>
<com.ichi2.anki.R$styleable: V <clinit>()>
<com.ichi2.anki.R$styleable: V <init>()>
<com.ichi2.anki.R$xml: V <init>()>
<com.ichi2.anki.R: V <init>()>
<com.ichi2.anki.ReadText$2: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.ichi2.anki.ReadText$2: V run()>
<com.ichi2.anki.ReadText$3: V <init>()>
<com.ichi2.anki.ReadText$3: V onInit(I)>
<com.ichi2.anki.ReadText: V <clinit>()>
<com.ichi2.anki.ReadText: V <init>()>
<com.ichi2.anki.ReadText: Ljava/lang/String; access$000()>
<com.ichi2.anki.ReadText: J access$100()>
<com.ichi2.anki.ReadText: I access$200()>
<com.ichi2.anki.ReadText: I access$300()>
<com.ichi2.anki.ReadText: Ljava/lang/ref/WeakReference; access$400()>
<com.ichi2.anki.ReadText: Ljava/util/ArrayList; access$500()>
<com.ichi2.anki.ReadText: Landroid/speech/tts/TextToSpeech; access$600()>
<com.ichi2.anki.ReadText: V buildAvailableLanguages()>
<com.ichi2.anki.ReadText: Ljava/lang/String; getLanguage(JII)>
<com.ichi2.anki.ReadText: V initializeTts(Landroid/content/Context;)>
<com.ichi2.anki.ReadText: V releaseTts()>
<com.ichi2.anki.ReadText: V selectTts(Ljava/lang/String;JII)>
<com.ichi2.anki.ReadText: V speak(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.ReadText: V stopTts()>
<com.ichi2.anki.ReadText: V textToSpeech(Ljava/lang/String;JII)>
<com.ichi2.anki.Reviewer$1: V <init>(Lcom/ichi2/anki/Reviewer;)>
<com.ichi2.anki.Reviewer$1: Z onTouch(Landroid/view/View;Landroid/view/MotionEvent;)>
<com.ichi2.anki.Statistics$1: V <init>(Lcom/ichi2/anki/Statistics;)>
<com.ichi2.anki.Statistics$1: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.ichi2.anki.Statistics$1: V onNothingSelected(Landroid/widget/AdapterView;)>
<com.ichi2.anki.Statistics$2: V <clinit>()>
<com.ichi2.anki.StudyOptionsFragment$1: V <init>(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.StudyOptionsFragment$2: V <init>(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.StudyOptionsFragment$3$1$1: V <init>(Lcom/ichi2/anki/StudyOptionsFragment$3$1;I)>
<com.ichi2.anki.StudyOptionsFragment$3$1$1: V run()>
<com.ichi2.anki.StudyOptionsFragment$3$1: V <init>(Lcom/ichi2/anki/StudyOptionsFragment$3;)>
<com.ichi2.anki.StudyOptionsFragment$3$1: V run()>
<com.ichi2.anki.UIUtils: V <init>()>
<com.ichi2.anki.UIUtils: J getDayStart()>
<com.ichi2.anki.UIUtils: F getDensityAdjustedValue(Landroid/content/Context;F)>
<com.ichi2.anki.UIUtils: V saveCollectionInBackground(Landroid/content/Context;)>
<com.ichi2.anki.UIUtils: V showSimpleSnackbar(Landroid/app/Activity;IZ)>
<com.ichi2.anki.UIUtils: V showSimpleSnackbar(Landroid/app/Activity;Ljava/lang/String;Z)>
<com.ichi2.anki.UIUtils: V showSnackbar(Landroid/app/Activity;IZILandroid/view/View$OnClickListener;Landroid/view/View;)>
<com.ichi2.anki.UIUtils: V showSnackbar(Landroid/app/Activity;IZILandroid/view/View$OnClickListener;Landroid/view/View;Landroid/support/design/widget/Snackbar$Callback;)>
<com.ichi2.anki.UIUtils: V showSnackbar(Landroid/app/Activity;Ljava/lang/String;ZILandroid/view/View$OnClickListener;Landroid/view/View;Landroid/support/design/widget/Snackbar$Callback;)>
<com.ichi2.anki.UIUtils: V showThemedToast(Landroid/content/Context;Ljava/lang/String;Z)>
<com.ichi2.anki.VideoPlayer$1: V <init>(Lcom/ichi2/anki/VideoPlayer;)>
<com.ichi2.anki.VideoPlayer$1: V onCompletion(Landroid/media/MediaPlayer;)>
<com.ichi2.anki.VideoPlayer: V <init>()>
<com.ichi2.anki.VideoPlayer: V onConfigurationChanged(Landroid/content/res/Configuration;)>
<com.ichi2.anki.VideoPlayer: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.VideoPlayer: V onStop()>
<com.ichi2.anki.VideoPlayer: V surfaceChanged(Landroid/view/SurfaceHolder;III)>
<com.ichi2.anki.VideoPlayer: V surfaceCreated(Landroid/view/SurfaceHolder;)>
<com.ichi2.anki.VideoPlayer: V surfaceDestroyed(Landroid/view/SurfaceHolder;)>
<com.ichi2.anki.Whiteboard$UndoStack: V <init>(Lcom/ichi2/anki/Whiteboard;)>
<com.ichi2.anki.Whiteboard$UndoStack: V <init>(Lcom/ichi2/anki/Whiteboard;Lcom/ichi2/anki/Whiteboard$1;)>
<com.ichi2.anki.Whiteboard$UndoStack: V add(FF)>
<com.ichi2.anki.Whiteboard$UndoStack: V add(Landroid/graphics/Path;)>
<com.ichi2.anki.Whiteboard$UndoStack: V apply()>
<com.ichi2.anki.Whiteboard$UndoStack: V clear()>
<com.ichi2.anki.Whiteboard$UndoStack: V pop()>
<com.ichi2.anki.Whiteboard$UndoStack: I size()>
<com.ichi2.anki.Whiteboard: V <init>(Lcom/ichi2/anki/AnkiActivity;ZZ)>
<com.ichi2.anki.Whiteboard: Landroid/graphics/Bitmap; access$100(Lcom/ichi2/anki/Whiteboard;)>
<com.ichi2.anki.Whiteboard: Landroid/graphics/Paint; access$200(Lcom/ichi2/anki/Whiteboard;)>
<com.ichi2.anki.Whiteboard: Landroid/graphics/Canvas; access$300(Lcom/ichi2/anki/Whiteboard;)>
<com.ichi2.anki.Whiteboard: V createBitmap()>
<com.ichi2.anki.Whiteboard: V createBitmap(IILandroid/graphics/Bitmap$Config;)>
<com.ichi2.anki.Whiteboard: I getDisplayHeight()>
<com.ichi2.anki.Whiteboard: I getDisplayWidth()>
<com.ichi2.anki.Whiteboard: V touchMove(FF)>
<com.ichi2.anki.Whiteboard: V touchStart(FF)>
<com.ichi2.anki.Whiteboard: V touchUp()>
<com.ichi2.anki.Whiteboard: V clear()>
<com.ichi2.anki.Whiteboard: Z handleTouchEvent(Landroid/view/MotionEvent;)>
<com.ichi2.anki.Whiteboard: Z isUndoModeActive()>
<com.ichi2.anki.Whiteboard: V onDraw(Landroid/graphics/Canvas;)>
<com.ichi2.anki.Whiteboard: V undo()>
<com.ichi2.anki.Whiteboard: I undoSize()>
<com.ichi2.anki.api.AddContentApi: V <clinit>()>
<com.ichi2.anki.api.AddContentApi: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.api.AddContentApi: [Ljava/lang/String; access$200()>
<com.ichi2.anki.api.AddContentApi: Landroid/content/ContentResolver; access$300(Lcom/ichi2/anki/api/AddContentApi;)>
<com.ichi2.anki.api.AddContentApi: Landroid/net/Uri; access$400(Lcom/ichi2/anki/api/AddContentApi;JLandroid/content/ContentValues;)>
<com.ichi2.anki.api.AddContentApi: Landroid/net/Uri; addNoteForContentValues(JLandroid/content/ContentValues;)>
<com.ichi2.anki.api.AddContentApi: Landroid/net/Uri; addNoteInternal(JJ[Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/String; getAnkiDroidPackageName(Landroid/content/Context;)>
<com.ichi2.anki.api.AddContentApi: Lcom/ichi2/anki/api/AddContentApi$Compat; getCompat()>
<com.ichi2.anki.api.AddContentApi: Z hasReadWritePermission()>
<com.ichi2.anki.api.AddContentApi: Z updateNote(J[Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/Long; addNewBasic2Model(Ljava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/Long; addNewBasicModel(Ljava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/Long; addNewCustomModel(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Integer;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/Long; addNewDeck(Ljava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/Long; addNote(JJ[Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.api.AddContentApi: I addNotes(JJLjava/util/List;Ljava/util/List;)>
<com.ichi2.anki.api.AddContentApi: Landroid/util/SparseArray; findDuplicateNotes(JLjava/util/List;)>
<com.ichi2.anki.api.AddContentApi: Ljava/util/List; findDuplicateNotes(JLjava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: I getApiHostSpecVersion()>
<com.ichi2.anki.api.AddContentApi: J getCurrentModelId()>
<com.ichi2.anki.api.AddContentApi: Ljava/util/Map; getDeckList()>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/String; getDeckName(Ljava/lang/Long;)>
<com.ichi2.anki.api.AddContentApi: [Ljava/lang/String; getFieldList(J)>
<com.ichi2.anki.api.AddContentApi: Ljava/util/Map; getModelList()>
<com.ichi2.anki.api.AddContentApi: Ljava/util/Map; getModelList(I)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/String; getModelName(Ljava/lang/Long;)>
<com.ichi2.anki.api.AddContentApi: Lcom/ichi2/anki/api/NoteInfo; getNote(J)>
<com.ichi2.anki.api.AddContentApi: I getNoteCount(J)>
<com.ichi2.anki.api.AddContentApi: Ljava/lang/String; getSelectedDeckName()>
<com.ichi2.anki.api.AddContentApi: Ljava/util/Map; previewNewNote(J[Ljava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: Z updateNoteFields(J[Ljava/lang/String;)>
<com.ichi2.anki.api.AddContentApi: Z updateNoteTags(JLjava/util/Set;)>
<com.ichi2.anki.api.Basic2Model: V <clinit>()>
<com.ichi2.anki.api.Basic2Model: V <init>()>
<com.ichi2.anki.api.BasicModel: V <clinit>()>
<com.ichi2.anki.api.BasicModel: V <init>()>
<com.ichi2.anki.api.BuildConfig: V <init>()>
<com.ichi2.anki.api.NoteInfo: V <init>(J[Ljava/lang/String;Ljava/util/Set;)>
<com.ichi2.anki.api.NoteInfo: V <init>(Lcom/ichi2/anki/api/NoteInfo;)>
<com.ichi2.anki.api.NoteInfo: Lcom/ichi2/anki/api/NoteInfo; buildFromCursor(Landroid/database/Cursor;)>
<com.ichi2.anki.api.NoteInfo: [Ljava/lang/String; getFields()>
<com.ichi2.anki.api.NoteInfo: J getId()>
<com.ichi2.anki.api.NoteInfo: Ljava/lang/String; getKey()>
<com.ichi2.anki.api.NoteInfo: Ljava/util/Set; getTags()>
<com.ichi2.anki.api.R$string: V <init>()>
<com.ichi2.anki.api.R: V <init>()>
<com.ichi2.anki.api.Utils: V <clinit>()>
<com.ichi2.anki.api.Utils: V <init>()>
<com.ichi2.anki.api.Utils: Ljava/lang/String; entsToTxt(Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: Ljava/lang/Long; fieldChecksum(Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: Ljava/lang/String; joinFields([Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: Ljava/lang/String; joinTags(Ljava/util/Set;)>
<com.ichi2.anki.api.Utils: [Ljava/lang/String; splitFields(Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: [Ljava/lang/String; splitTags(Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: Ljava/lang/String; stripHTML(Ljava/lang/String;)>
<com.ichi2.anki.api.Utils: Ljava/lang/String; stripHTMLMedia(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter$1: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$MySearchesArrayAdapter;I)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter$2: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$MySearchesArrayAdapter;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter$2: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter$2: I compare(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;Landroid/content/Context;Ljava/util/ArrayList;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter: Z areAllItemsEnabled()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$MySearchesArrayAdapter: V notifyDataSetChanged()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: V <init>()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/TextView; access$400(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/TextView; access$402(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;Landroid/widget/TextView;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/TextView; access$500(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/TextView; access$502(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;Landroid/widget/TextView;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/ImageButton; access$600(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$ViewHolder: Landroid/widget/ImageButton; access$602(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$ViewHolder;Landroid/widget/ImageButton;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$1: V <init>(Lcom/ichi2/anki/dialogs/ConfirmationDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$1: V run()>
<com.ichi2.anki.dialogs.ConfirmationDialog$2: V <init>(Lcom/ichi2/anki/dialogs/ConfirmationDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$2: V run()>
<com.ichi2.anki.dialogs.ContextMenuHelper: V <init>()>
<com.ichi2.anki.dialogs.ContextMenuHelper: [Ljava/lang/String; getValuesFromKeys(Ljava/util/HashMap;[I)>
<com.ichi2.anki.dialogs.ContextMenuHelper: [I integerListToArray(Ljava/util/ArrayList;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$3: V <init>(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$3: V afterTextChanged(Landroid/text/Editable;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$3: V beforeTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.dialogs.CustomStudyDialog$3: V onTextChanged(Ljava/lang/CharSequence;III)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog$1: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerBackupNoSpaceLeftDialog;)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog$1: V onCancel(Landroid/content/DialogInterface;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog$1: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerNoSpaceLeftDialog;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog$1: V onCancel(Landroid/content/DialogInterface;)>
<com.ichi2.anki.dialogs.DialogHandler$1: V <init>(Lcom/ichi2/anki/dialogs/DialogHandler;)>
<com.ichi2.anki.dialogs.DialogHandler$1: V run()>
<com.ichi2.anki.dialogs.DialogHandler: V <init>(Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.anki.dialogs.DialogHandler: V storeMessage(Landroid/os/Message;)>
<com.ichi2.anki.dialogs.DialogHandler: V handleMessage(Landroid/os/Message;)>
<com.ichi2.anki.dialogs.DialogHandler: V readMessage()>
<com.ichi2.anki.dialogs.ImportDialog$2: V <init>(Lcom/ichi2/anki/dialogs/ImportDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$2: V onShow(Landroid/content/DialogInterface;)>
<com.ichi2.anki.dialogs.TagsDialog$1: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$1: V onCheckedChanged(Landroid/widget/RadioGroup;I)>
<com.ichi2.anki.dialogs.TagsDialog$3: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$3: Ljava/lang/CharSequence; filter(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)>
<com.ichi2.anki.dialogs.TagsDialog$4: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;Landroid/text/InputFilter;)>
<com.ichi2.anki.dialogs.TagsDialog$4: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.dialogs.TagsDialog$6: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$6: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$1: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$1: I compare(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$2: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$TagsFilter: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$TagsFilter: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter;Lcom/ichi2/anki/dialogs/TagsDialog$1;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$TagsFilter: Landroid/widget/Filter$FilterResults; performFiltering(Ljava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$TagsFilter: V publishResults(Ljava/lang/CharSequence;Landroid/widget/Filter$FilterResults;)>
<com.ichi2.anki.exception.ConfirmModSchemaException: V <init>()>
<com.ichi2.anki.exception.DeckRenameException: V <init>(I)>
<com.ichi2.anki.exception.DeckRenameException: Ljava/lang/String; getLocalizedMessage(Landroid/content/res/Resources;)>
<com.ichi2.anki.exception.MediaSyncException: V <init>(Ljava/lang/String;)>
<com.ichi2.anki.exception.StorageAccessException: V <init>()>
<com.ichi2.anki.exception.StorageAccessException: V <init>(Ljava/lang/String;)>
<com.ichi2.anki.exception.UnknownHttpResponseException: V <init>(Ljava/lang/String;Ljava/lang/Integer;)>
<com.ichi2.anki.exception.UnknownHttpResponseException: I getResponseCode()>
<com.ichi2.anki.multimediacard.AudioView$1: V <clinit>()>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton$1$1: V <init>(Lcom/ichi2/anki/multimediacard/AudioView$PlayPauseButton$1;)>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton$1$1: V onCompletion(Landroid/media/MediaPlayer;)>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton$1: V <init>(Lcom/ichi2/anki/multimediacard/AudioView$PlayPauseButton;)>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton: V <init>(Lcom/ichi2/anki/multimediacard/AudioView;Landroid/content/Context;)>
<com.ichi2.anki.multimediacard.AudioView$PlayPauseButton: V update()>
<com.ichi2.anki.multimediacard.AudioView$RecordButton$1: V <init>(Lcom/ichi2/anki/multimediacard/AudioView$RecordButton;)>
<com.ichi2.anki.multimediacard.AudioView$RecordButton$1: Landroid/media/MediaRecorder; initMediaRecorder()>
<com.ichi2.anki.multimediacard.AudioView$RecordButton$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.AudioView$RecordButton: V <init>(Lcom/ichi2/anki/multimediacard/AudioView;Landroid/content/Context;)>
<com.ichi2.anki.multimediacard.AudioView$RecordButton: V update()>
<com.ichi2.anki.multimediacard.AudioView$Status: V <clinit>()>
<com.ichi2.anki.multimediacard.AudioView$Status: V <init>(Ljava/lang/String;I)>
<com.ichi2.anki.multimediacard.AudioView$Status: Lcom/ichi2/anki/multimediacard/AudioView$Status; valueOf(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView$Status: [Lcom/ichi2/anki/multimediacard/AudioView$Status; values()>
<com.ichi2.anki.multimediacard.AudioView$StopButton$1: V <init>(Lcom/ichi2/anki/multimediacard/AudioView$StopButton;)>
<com.ichi2.anki.multimediacard.AudioView$StopButton$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.AudioView$StopButton: V <init>(Lcom/ichi2/anki/multimediacard/AudioView;Landroid/content/Context;)>
<com.ichi2.anki.multimediacard.AudioView$StopButton: V update()>
<com.ichi2.anki.multimediacard.AudioView: V <init>(Landroid/content/Context;IIIIILjava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: V <init>(Landroid/content/Context;IIILjava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: Lcom/ichi2/anki/multimediacard/AudioView$Status; access$000(Lcom/ichi2/anki/multimediacard/AudioView;)>
<com.ichi2.anki.multimediacard.AudioView: Lcom/ichi2/anki/multimediacard/AudioView$Status; access$002(Lcom/ichi2/anki/multimediacard/AudioView;Lcom/ichi2/anki/multimediacard/AudioView$Status;)>
<com.ichi2.anki.multimediacard.AudioView: Landroid/media/MediaPlayer; access$100(Lcom/ichi2/anki/multimediacard/AudioView;)>
<com.ichi2.anki.multimediacard.AudioView: Landroid/media/MediaPlayer; access$102(Lcom/ichi2/anki/multimediacard/AudioView;Landroid/media/MediaPlayer;)>
<com.ichi2.anki.multimediacard.AudioView: Ljava/lang/String; access$200(Lcom/ichi2/anki/multimediacard/AudioView;I)>
<com.ichi2.anki.multimediacard.AudioView: V access$300(Lcom/ichi2/anki/multimediacard/AudioView;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: Landroid/media/MediaRecorder; access$400(Lcom/ichi2/anki/multimediacard/AudioView;)>
<com.ichi2.anki.multimediacard.AudioView: Landroid/media/MediaRecorder; access$402(Lcom/ichi2/anki/multimediacard/AudioView;Landroid/media/MediaRecorder;)>
<com.ichi2.anki.multimediacard.AudioView: Lcom/ichi2/anki/multimediacard/AudioView; createPlayerInstance(Landroid/content/Context;IIILjava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: Lcom/ichi2/anki/multimediacard/AudioView; createRecorderInstance(Landroid/content/Context;IIIIILjava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.AudioView: V showToast(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.AudioView: Ljava/lang/String; getAudioPath()>
<com.ichi2.anki.multimediacard.AudioView: V notifyPause()>
<com.ichi2.anki.multimediacard.AudioView: V notifyPlay()>
<com.ichi2.anki.multimediacard.AudioView: V notifyRecord()>
<com.ichi2.anki.multimediacard.AudioView: V notifyReleaseRecorder()>
<com.ichi2.anki.multimediacard.AudioView: V notifyStop()>
<com.ichi2.anki.multimediacard.AudioView: V notifyStopRecord()>
<com.ichi2.anki.multimediacard.AudioView: V setOnRecordingFinishEventListener(Lcom/ichi2/anki/multimediacard/AudioView$OnRecordingFinishEventListener;)>
<com.ichi2.anki.multimediacard.AudioView: V setRecordButtonVisible(Z)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$1: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$2: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity$1;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: Ljava/lang/String; doInBackground([Ljava/lang/Void;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: Ljava/lang/String; getAddress()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: V onPostExecute(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$BackgroundPost: V setAddress(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: V <init>(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity$1;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: Ljava/lang/String; doInBackground([Ljava/lang/Void;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: V onPostExecute(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity$DownloadFileTask: V setAddress(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V <clinit>()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V <init>()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity; access$100(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: Ljava/lang/String; computeAddressOfTranslationPage()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V dismissCarefullyProgressDialog()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V failNoPronunciation()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V finishCancel()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V showProgressDialog(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V showToast(Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V showToastLong(Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V stop(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V stopAllTasks()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V onCancel(Landroid/content/DialogInterface;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V onLoadPronunciation(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V onPause()>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V processPostFinished(Lcom/ichi2/anki/multimediacard/activity/LoadPronounciationActivity$BackgroundPost;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.LoadPronounciationActivity: V receiveMp3File(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$1: V <init>(Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$2: V <init>(Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$3: V <init>(Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$3: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$4: V <init>(Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity$4: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$1: V <init>(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;Landroid/content/SharedPreferences;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: V <init>(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: V <init>(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;Lcom/ichi2/anki/multimediacard/activity/TranslationActivity$1;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: Ljava/lang/String; doInBackground([Ljava/lang/Void;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity$BackgroundPost: V onPostExecute(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.beolingus.parsing.BeolingusParser: V <clinit>()>
<com.ichi2.anki.multimediacard.beolingus.parsing.BeolingusParser: V <init>()>
<com.ichi2.anki.multimediacard.beolingus.parsing.BeolingusParser: Ljava/lang/String; getMp3AddressFromPronounciation(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.beolingus.parsing.BeolingusParser: Ljava/lang/String; getPronounciationAddressFromTranslation(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.BasicControllerFactory$1: V <clinit>()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController$1: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicImageFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController$2: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicImageFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$1: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$1: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$2: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$2: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$3$1: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController$3;Ljava/util/ArrayList;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$3$1: V onClick(Landroid/content/DialogInterface;I)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$3: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$3: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$4: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController$4: V onClick(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.EFieldType: V <clinit>()>
<com.ichi2.anki.multimediacard.fields.EFieldType: V <init>(Ljava/lang/String;I)>
<com.ichi2.anki.multimediacard.fields.EFieldType: Lcom/ichi2/anki/multimediacard/fields/EFieldType; valueOf(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.EFieldType: [Lcom/ichi2/anki/multimediacard/fields/EFieldType; values()>
<com.ichi2.anki.multimediacard.fields.FieldBase: V <init>()>
<com.ichi2.anki.multimediacard.fields.FieldBase: Z getThisModified()>
<com.ichi2.anki.multimediacard.fields.FieldBase: V setThisModified()>
<com.ichi2.anki.multimediacard.glosbe.json.Meaning: V <init>()>
<com.ichi2.anki.multimediacard.glosbe.json.Meaning: Ljava/lang/String; getLanguage()>
<com.ichi2.anki.multimediacard.glosbe.json.Meaning: Ljava/lang/String; getText()>
<com.ichi2.anki.multimediacard.glosbe.json.Meaning: V setLanguage(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Meaning: V setText(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Phrase: V <init>()>
<com.ichi2.anki.multimediacard.glosbe.json.Phrase: Ljava/lang/String; getLanguage()>
<com.ichi2.anki.multimediacard.glosbe.json.Phrase: Ljava/lang/String; getText()>
<com.ichi2.anki.multimediacard.glosbe.json.Phrase: V setLanguage(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Phrase: V setText(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V <init>()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: Ljava/lang/String; getDest()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: Ljava/lang/String; getFrom()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: Ljava/lang/String; getPhrase()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: Ljava/lang/String; getResult()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: Ljava/util/List; getTuc()>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V setDest(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V setFrom(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V setPhrase(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V setResult(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.glosbe.json.Response: V setTuc(Ljava/util/List;)>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: V <init>()>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: Ljava/util/List; getAuthors()>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: Ljava/lang/Number; getMeaningId()>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: Ljava/util/List; getMeanings()>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: Lcom/ichi2/anki/multimediacard/glosbe/json/Phrase; getPhrase()>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: V setAuthors(Ljava/util/List;)>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: V setMeaningId(Ljava/lang/Number;)>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: V setMeanings(Ljava/util/List;)>
<com.ichi2.anki.multimediacard.glosbe.json.Tuc: V setPhrase(Lcom/ichi2/anki/multimediacard/glosbe/json/Phrase;)>
<com.ichi2.anki.multimediacard.impl.NoteFactory: V <init>()>
<com.ichi2.anki.multimediacard.impl.NoteFactory: Lcom/ichi2/anki/multimediacard/IMultimediaEditableNote; createNote()>
<com.ichi2.anki.multimediacard.language.LanguageListerBase$1: V <init>(Lcom/ichi2/anki/multimediacard/language/LanguageListerBase;)>
<com.ichi2.anki.multimediacard.language.LanguageListerBase$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.language.LanguageListerBase$1: I compare(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.language.LanguageListerBase: V <init>()>
<com.ichi2.anki.multimediacard.language.LanguageListerBase: V addLanguage(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.language.LanguageListerBase: Ljava/lang/String; getCodeFor(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.language.LanguageListerBase: Ljava/util/ArrayList; getLanguages()>
<com.ichi2.anki.multimediacard.language.LanguagesLister$1: V <init>(Lcom/ichi2/anki/multimediacard/language/LanguagesLister;)>
<com.ichi2.anki.multimediacard.language.LanguagesLister$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.anki.multimediacard.language.LanguagesLister$1: I compare(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.language.LanguagesLister: V <init>()>
<com.ichi2.anki.multimediacard.language.LanguagesLister: Ljava/lang/String; getCodeFor(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.language.LanguagesLister: Ljava/util/ArrayList; getLanguages()>
<com.ichi2.anki.multimediacard.test.MockNoteFactory: V <init>()>
<com.ichi2.anki.multimediacard.test.MockNoteFactory: Lcom/ichi2/anki/multimediacard/IMultimediaEditableNote; makeNote()>
<com.ichi2.anki.multimediacard.test.MockPronounciationPageFetcher: V <init>()>
<com.ichi2.anki.multimediacard.test.MockPronounciationPageFetcher: Ljava/lang/String; get()>
<com.ichi2.anki.multimediacard.test.MockTranslationFetcher: V <init>()>
<com.ichi2.anki.multimediacard.test.MockTranslationFetcher: Ljava/lang/String; get()>
<com.ichi2.anki.provider.CardContentProvider: V <clinit>()>
<com.ichi2.anki.provider.CardContentProvider: V <init>()>
<com.ichi2.anki.provider.CardContentProvider: V addCardToCursor(Lcom/ichi2/libanki/Card;Landroid/database/MatrixCursor;Lcom/ichi2/libanki/Collection;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: V addDeckToCursor(JLjava/lang/String;Lorg/json/JSONArray;Landroid/database/MatrixCursor;Lcom/ichi2/libanki/Collection;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: V addModelToCursor(Ljava/lang/Long;Lcom/ichi2/libanki/Models;Landroid/database/MatrixCursor;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: V addReviewInfoToCursor(Lcom/ichi2/libanki/Card;Lorg/json/JSONArray;ILandroid/database/MatrixCursor;Lcom/ichi2/libanki/Collection;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: V addTemplateToCursor(Lorg/json/JSONObject;Lorg/json/JSONObject;ILcom/ichi2/libanki/Models;Landroid/database/MatrixCursor;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: V answerCard(Lcom/ichi2/libanki/Collection;Lcom/ichi2/libanki/Sched;Lcom/ichi2/libanki/Card;IJ)>
<com.ichi2.anki.provider.CardContentProvider: I bulkInsertNotes([Landroid/content/ContentValues;J)>
<com.ichi2.anki.provider.CardContentProvider: Ljava/lang/String; getCallingPackageSafe()>
<com.ichi2.anki.provider.CardContentProvider: Lcom/ichi2/libanki/Card; getCard(JILcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.provider.CardContentProvider: Lcom/ichi2/libanki/Card; getCardFromUri(Landroid/net/Uri;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.provider.CardContentProvider: Lorg/json/JSONArray; getDeckCountsFromDueTreeNode(Lcom/ichi2/libanki/Sched$DeckDueTreeNode;)>
<com.ichi2.anki.provider.CardContentProvider: Ljava/lang/String; getLogMessage(Ljava/lang/String;Landroid/net/Uri;)>
<com.ichi2.anki.provider.CardContentProvider: J getModelIdFromUri(Landroid/net/Uri;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.provider.CardContentProvider: Lcom/ichi2/libanki/Note; getNoteFromUri(Landroid/net/Uri;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.provider.CardContentProvider: Lorg/json/JSONObject; getTemplateFromUri(Landroid/net/Uri;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.provider.CardContentProvider: Z hasReadWritePermission()>
<com.ichi2.anki.provider.CardContentProvider: Z knownRogueClient()>
<com.ichi2.anki.provider.CardContentProvider: I projSearch([Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: [Ljava/lang/String; sanitizeNoteProjection([Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: Z selectDeckWithCheck(Lcom/ichi2/libanki/Collection;J)>
<com.ichi2.anki.provider.CardContentProvider: Z shouldEnforceQueryOrInsertSecurity()>
<com.ichi2.anki.provider.CardContentProvider: Z shouldEnforceUpdateSecurity(Landroid/net/Uri;)>
<com.ichi2.anki.provider.CardContentProvider: V throwSecurityException(Ljava/lang/String;Landroid/net/Uri;)>
<com.ichi2.anki.provider.CardContentProvider: I bulkInsert(Landroid/net/Uri;[Landroid/content/ContentValues;)>
<com.ichi2.anki.provider.CardContentProvider: I delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: Ljava/lang/String; getType(Landroid/net/Uri;)>
<com.ichi2.anki.provider.CardContentProvider: Landroid/net/Uri; insert(Landroid/net/Uri;Landroid/content/ContentValues;)>
<com.ichi2.anki.provider.CardContentProvider: Z onCreate()>
<com.ichi2.anki.provider.CardContentProvider: Landroid/database/Cursor; query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.provider.CardContentProvider: I update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)>
<com.ichi2.anki.receiver.BootReceiver: V <init>()>
<com.ichi2.anki.receiver.BootReceiver: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.receiver.ReminderReceiver: V <init>()>
<com.ichi2.anki.receiver.ReminderReceiver: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.receiver.SdCardReceiver: V <init>()>
<com.ichi2.anki.receiver.SdCardReceiver: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.runtimetools.TaskOperations: V <init>()>
<com.ichi2.anki.runtimetools.TaskOperations: V stopTaskGracefully(Landroid/os/AsyncTask;)>
<com.ichi2.anki.servicelayer.NoteService$1: V <clinit>()>
<com.ichi2.anki.servicelayer.NoteService: V <init>()>
<com.ichi2.anki.servicelayer.NoteService: Lcom/ichi2/anki/multimediacard/impl/MultimediaEditableNote; createEmptyNote(Lorg/json/JSONObject;)>
<com.ichi2.anki.servicelayer.NoteService: V importMediaToDirectory(Lcom/ichi2/libanki/Collection;Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.servicelayer.NoteService: V saveMedia(Lcom/ichi2/libanki/Collection;Lcom/ichi2/anki/multimediacard/impl/MultimediaEditableNote;)>
<com.ichi2.anki.servicelayer.NoteService: V updateJsonNoteFromMultimediaNote(Lcom/ichi2/anki/multimediacard/IMultimediaEditableNote;Lcom/ichi2/libanki/Note;)>
<com.ichi2.anki.servicelayer.NoteService: V updateMultimediaNoteFromJsonNote(Lcom/ichi2/libanki/Collection;Lcom/ichi2/libanki/Note;Lcom/ichi2/anki/multimediacard/IMultimediaEditableNote;)>
<com.ichi2.anki.services.BootService: V <init>()>
<com.ichi2.anki.services.BootService: V onHandleIntent(Landroid/content/Intent;)>
<com.ichi2.anki.services.NotificationService: V <init>()>
<com.ichi2.anki.services.NotificationService: Landroid/os/IBinder; onBind(Landroid/content/Intent;)>
<com.ichi2.anki.services.NotificationService: V onCreate()>
<com.ichi2.anki.services.NotificationService: I onStartCommand(Landroid/content/Intent;II)>
<com.ichi2.anki.services.ReminderService: V <init>()>
<com.ichi2.anki.services.ReminderService: V onHandleIntent(Landroid/content/Intent;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: V <init>(Lcom/ichi2/anki/stats/AnkiStatsTaskHandler;Lcom/ichi2/libanki/Stats$ChartType;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: Lcom/wildplot/android/rendering/PlotSheet; doInBackground([Landroid/view/View;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: V onCancelled()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: V onPostExecute(Lcom/wildplot/android/rendering/PlotSheet;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateChartTask: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: V <init>(Lcom/ichi2/anki/stats/AnkiStatsTaskHandler;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: Ljava/lang/String; doInBackground([Landroid/view/View;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: V onCancelled()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: V onPostExecute(Ljava/lang/String;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: V <init>()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: Ljava/lang/String; doInBackground([Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: V onCancelled()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics: V onPostExecute(Ljava/lang/String;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: V <clinit>()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Ljava/util/concurrent/locks/Lock; access$000()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/libanki/Collection; access$100(Lcom/ichi2/anki/stats/AnkiStatsTaskHandler;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Z access$200(Lcom/ichi2/anki/stats/AnkiStatsTaskHandler;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/libanki/Stats$AxisType; access$300(Lcom/ichi2/anki/stats/AnkiStatsTaskHandler;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/anki/stats/AnkiStatsTaskHandler$DeckPreviewStatistics; createReviewSummaryStatistics(Lcom/ichi2/libanki/Collection;Landroid/widget/TextView;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/anki/stats/AnkiStatsTaskHandler; getInstance()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/anki/stats/AnkiStatsTaskHandler$CreateChartTask; createChart(Lcom/ichi2/libanki/Stats$ChartType;[Landroid/view/View;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/anki/stats/AnkiStatsTaskHandler$CreateStatisticsOverview; createStatisticsOverview([Landroid/view/View;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: Lcom/ichi2/libanki/Stats$AxisType; getStatType()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: F getmStandardTextSize()>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: V setIsWholeCollection(Z)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: V setStatType(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.anki.stats.AnkiStatsTaskHandler: V setmStandardTextSize(F)>
<com.ichi2.anki.stats.ChartBuilder$1: V <clinit>()>
<com.ichi2.anki.stats.ChartBuilder: V <init>(Lcom/ichi2/anki/stats/ChartView;Lcom/ichi2/libanki/Collection;ZLcom/ichi2/libanki/Stats$ChartType;)>
<com.ichi2.anki.stats.ChartBuilder: V calcStats(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.anki.stats.ChartBuilder: Lcom/wildplot/android/rendering/PlotSheet; createPieChart(Lcom/wildplot/android/rendering/PlotSheet;)>
<com.ichi2.anki.stats.ChartBuilder: V setupBarGraphs(Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/PlotSheet;)>
<com.ichi2.anki.stats.ChartBuilder: V setupCumulative(Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/PlotSheet;)>
<com.ichi2.anki.stats.ChartBuilder: V setupGrid(Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.ichi2.anki.stats.ChartBuilder: V setupXaxis(Lcom/wildplot/android/rendering/PlotSheet;DZ)>
<com.ichi2.anki.stats.ChartBuilder: V setupYaxis(Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/PlotSheet;DIZZ)>
<com.ichi2.anki.stats.ChartBuilder: Lcom/wildplot/android/rendering/PlotSheet; renderChart(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.anki.stats.ChartBuilder: D ticksCalcX(ILcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;DD)>
<com.ichi2.anki.stats.ChartBuilder: D ticksCalcY(ILcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;DD)>
<com.ichi2.anki.stats.ChartBuilder: D ticsCalc(ILcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.ichi2.anki.stats.ChartView: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.stats.ChartView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.anki.stats.ChartView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.ichi2.anki.stats.ChartView: V addFragment(Lcom/ichi2/anki/Statistics$ChartFragment;)>
<com.ichi2.anki.stats.ChartView: V onDraw(Landroid/graphics/Canvas;)>
<com.ichi2.anki.stats.ChartView: V onSizeChanged(IIII)>
<com.ichi2.anki.stats.ChartView: V setData(Lcom/wildplot/android/rendering/PlotSheet;)>
<com.ichi2.anki.stats.OverviewStatsBuilder$1: V <clinit>()>
<com.ichi2.anki.stats.OverviewStatsBuilder$OverviewStats: V <init>(Lcom/ichi2/anki/stats/OverviewStatsBuilder;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: V <init>(Landroid/webkit/WebView;Lcom/ichi2/libanki/Collection;ZLcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: Ljava/util/List; _due(Ljava/lang/Integer;Ljava/lang/Integer;I)>
<com.ichi2.anki.stats.OverviewStatsBuilder: Ljava/lang/String; _limit()>
<com.ichi2.anki.stats.OverviewStatsBuilder: Ljava/lang/String; _subtitle(Ljava/lang/String;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: Ljava/lang/String; _title(Ljava/lang/String;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: V appendOverViewStats(Ljava/lang/StringBuilder;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: V appendTodaysStats(Ljava/lang/StringBuilder;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: V calculateForecastOverview(Lcom/ichi2/libanki/Stats$AxisType;Lcom/ichi2/anki/stats/OverviewStatsBuilder$OverviewStats;)>
<com.ichi2.anki.stats.OverviewStatsBuilder: Ljava/lang/String; createInfoHtmlString()>
<com.ichi2.anki.stats.StatsMetaInfo: V <init>()>
<com.ichi2.anki.stats.StatsMetaInfo: [I getmAxisTitles()>
<com.ichi2.anki.stats.StatsMetaInfo: [I getmColors()>
<com.ichi2.anki.stats.StatsMetaInfo: [[D getmCumulative()>
<com.ichi2.anki.stats.StatsMetaInfo: D getmFirstElement()>
<com.ichi2.anki.stats.StatsMetaInfo: D getmLastElement()>
<com.ichi2.anki.stats.StatsMetaInfo: I getmMaxCards()>
<com.ichi2.anki.stats.StatsMetaInfo: I getmMaxElements()>
<com.ichi2.anki.stats.StatsMetaInfo: D getmMcount()>
<com.ichi2.anki.stats.StatsMetaInfo: [[D getmSeriesList()>
<com.ichi2.anki.stats.StatsMetaInfo: I getmTitle()>
<com.ichi2.anki.stats.StatsMetaInfo: Lcom/ichi2/libanki/Stats$AxisType; getmType()>
<com.ichi2.anki.stats.StatsMetaInfo: [I getmValueLabels()>
<com.ichi2.anki.stats.StatsMetaInfo: I getmZeroIndex()>
<com.ichi2.anki.stats.StatsMetaInfo: Z isDataAvailable()>
<com.ichi2.anki.stats.StatsMetaInfo: Z isStatsCalculated()>
<com.ichi2.anki.stats.StatsMetaInfo: Z ismBackwards()>
<com.ichi2.anki.stats.StatsMetaInfo: Z ismDynamicAxis()>
<com.ichi2.anki.stats.StatsMetaInfo: Z ismHasColoredCumulative()>
<com.ichi2.anki.stats.StatsMetaInfo: V setDataAvailable(Z)>
<com.ichi2.anki.stats.StatsMetaInfo: V setStatsCalculated(Z)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmAxisTitles([I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmBackwards(Z)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmColors([I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmCumulative([[D)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmDynamicAxis(Z)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmFirstElement(D)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmHasColoredCumulative(Z)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmLastElement(D)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmMaxCards(I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmMaxElements(I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmMcount(D)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmSeriesList([[D)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmTitle(I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmType(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmValueLabels([I)>
<com.ichi2.anki.stats.StatsMetaInfo: V setmZeroIndex(I)>
<com.ichi2.anki.web.HttpFetcher: V <init>()>
<com.ichi2.anki.web.HttpFetcher: Ljava/lang/String; downloadFileToSdCard(Ljava/lang/String;Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.anki.web.HttpFetcher: Ljava/lang/String; downloadFileToSdCardMethod(Ljava/lang/String;Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.web.HttpFetcher: Ljava/lang/String; fetchThroughHttp(Ljava/lang/String;)>
<com.ichi2.anki.web.HttpFetcher: Ljava/lang/String; fetchThroughHttp(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.widgets.DeckDropDownAdapter$DeckDropDownViewHolder: V <init>()>
<com.ichi2.anki.widgets.DeckDropDownAdapter: V <init>(Landroid/content/Context;Ljava/util/ArrayList;)>
<com.ichi2.anki.widgets.DeckDropDownAdapter: I getCount()>
<com.ichi2.anki.widgets.DeckDropDownAdapter: Landroid/view/View; getDropDownView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.ichi2.anki.widgets.DeckDropDownAdapter: Ljava/lang/Object; getItem(I)>
<com.ichi2.anki.widgets.DeckDropDownAdapter: J getItemId(I)>
<com.ichi2.anki.widgets.DeckDropDownAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<com.ichi2.async.BaseAsyncTask: V <clinit>()>
<com.ichi2.async.BaseAsyncTask: V <init>()>
<com.ichi2.async.BaseAsyncTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.async.BaseAsyncTask: V onCancelled()>
<com.ichi2.async.BaseAsyncTask: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.async.BaseAsyncTask: V onPreExecute()>
<com.ichi2.async.BaseAsyncTask: V onProgressUpdate([Ljava/lang/Object;)>
<com.ichi2.async.Connection$CancelCallback: V <init>(Lcom/ichi2/async/Connection;)>
<com.ichi2.async.Connection$CancelCallback: V cancelAllConnections()>
<com.ichi2.async.Connection$CancelCallback: V setConnectionManager(Lorg/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager;)>
<com.ichi2.async.Connection$Payload: V <init>()>
<com.ichi2.async.Connection$Payload: V <init>(I[Ljava/lang/Object;)>
<com.ichi2.async.Connection$Payload: V <init>(I[Ljava/lang/Object;Ljava/lang/String;)>
<com.ichi2.async.Connection$Payload: V <init>([Ljava/lang/Object;)>
<com.ichi2.async.DeckTask$1: V <init>(Lcom/ichi2/async/DeckTask;)>
<com.ichi2.async.DeckTask$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.async.DeckTask$1: I compare(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.async.DeckTask$2: V <clinit>()>
<com.ichi2.async.DeckTask$ProgressCallback: V <init>(Lcom/ichi2/async/DeckTask;Lcom/ichi2/async/DeckTask;Landroid/content/res/Resources;)>
<com.ichi2.async.DeckTask$ProgressCallback: Landroid/content/res/Resources; getResources()>
<com.ichi2.async.DeckTask$ProgressCallback: V publishProgress(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(I)>
<com.ichi2.async.DeckTask$TaskData: V <init>(IJZ)>
<com.ichi2.async.DeckTask$TaskData: V <init>(ILcom/ichi2/libanki/Card;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(ILjava/lang/String;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(IZ)>
<com.ichi2.async.DeckTask$TaskData: V <init>(I[Ljava/lang/Object;Z)>
<com.ichi2.async.DeckTask$TaskData: V <init>(J)>
<com.ichi2.async.DeckTask$TaskData: V <init>(JZ)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Landroid/content/Context;II)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Lcom/ichi2/libanki/Card;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Lcom/ichi2/libanki/Card;Ljava/lang/String;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Lcom/ichi2/libanki/Card;Z)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Lcom/ichi2/libanki/Note;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Ljava/lang/String;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Ljava/lang/String;JZ)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Ljava/lang/String;Z)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Ljava/util/List;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Ljava/util/List;Ljava/util/Comparator;)>
<com.ichi2.async.DeckTask$TaskData: V <init>(Z)>
<com.ichi2.async.DeckTask$TaskData: V <init>([Ljava/lang/Object;)>
<com.ichi2.async.DeckTask$TaskData: Z getBoolean()>
<com.ichi2.async.DeckTask$TaskData: Lcom/ichi2/libanki/Card; getCard()>
<com.ichi2.async.DeckTask$TaskData: Ljava/util/List; getCards()>
<com.ichi2.async.DeckTask$TaskData: Ljava/util/Comparator; getComparator()>
<com.ichi2.async.DeckTask$TaskData: Landroid/content/Context; getContext()>
<com.ichi2.async.DeckTask$TaskData: I getInt()>
<com.ichi2.async.DeckTask$TaskData: J getLong()>
<com.ichi2.async.DeckTask$TaskData: Lcom/ichi2/libanki/Note; getNote()>
<com.ichi2.async.DeckTask$TaskData: [Ljava/lang/Object; getObjArray()>
<com.ichi2.async.DeckTask$TaskData: Ljava/lang/String; getString()>
<com.ichi2.async.DeckTask$TaskData: I getType()>
<com.ichi2.async.DeckTask$TaskData: V setCards(Ljava/util/List;)>
<com.ichi2.compat.CompatHelper: V <init>()>
<com.ichi2.compat.CompatHelper: Lcom/ichi2/compat/Compat; getCompat()>
<com.ichi2.compat.CompatHelper: Lcom/ichi2/compat/CompatHelper; getInstance()>
<com.ichi2.compat.CompatHelper: I getSdkVersion()>
<com.ichi2.compat.CompatHelper: Z hasKanaAndEmojiKeys()>
<com.ichi2.compat.CompatHelper: Z hasScrollKeys()>
<com.ichi2.compat.CompatHelper: Z isChromebook()>
<com.ichi2.compat.CompatHelper: Z isHoneycomb()>
<com.ichi2.compat.CompatHelper: Z isKindle()>
<com.ichi2.compat.CompatHelper: Z isLollipop()>
<com.ichi2.compat.CompatHelper: Z isMarshmallow()>
<com.ichi2.compat.CompatHelper: Z isNook()>
<com.ichi2.compat.CompatHelper: Z isNookHd()>
<com.ichi2.compat.CompatHelper: Z isNookHdOrHdPlus()>
<com.ichi2.compat.CompatHelper: Z isNookHdPlus()>
<com.ichi2.compat.CompatHelper: V removeHiddenPreferences(Landroid/content/Context;)>
<com.ichi2.compat.CompatV10$1: V <init>(Lcom/ichi2/compat/CompatV10;)>
<com.ichi2.compat.CompatV10$1: V onUtteranceCompleted(Ljava/lang/String;)>
<com.ichi2.compat.CompatV15$1: V <init>(Lcom/ichi2/compat/CompatV15;)>
<com.ichi2.compat.CompatV15$1: V onDone(Ljava/lang/String;)>
<com.ichi2.compat.CompatV15$1: V onError(Ljava/lang/String;)>
<com.ichi2.compat.CompatV15$1: V onStart(Ljava/lang/String;)>
<com.ichi2.compat.CompatV19$1: V <init>(Lcom/ichi2/compat/CompatV19;Lcom/ichi2/anki/AbstractFlashcardViewer;I)>
<com.ichi2.compat.CompatV19$1: V onSystemUiVisibilityChange(I)>
<com.ichi2.compat.CompatV19$2: V <init>(Lcom/ichi2/compat/CompatV19;Landroid/view/View;)>
<com.ichi2.compat.CompatV19$2: V onAnimationEnd(Landroid/animation/Animator;)>
<com.ichi2.compat.customtabs.CustomTabsHelper: V <init>()>
<com.ichi2.compat.customtabs.CustomTabsHelper: V addKeepAliveExtra(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.compat.customtabs.CustomTabsHelper: Ljava/lang/String; getPackageNameToUse(Landroid/content/Context;)>
<com.ichi2.compat.customtabs.CustomTabsHelper: [Ljava/lang/String; getPackages()>
<com.ichi2.compat.customtabs.CustomTabsHelper: Z hasSpecializedHandlerIntents(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.compat.customtabs.KeepAliveService: V <clinit>()>
<com.ichi2.compat.customtabs.KeepAliveService: V <init>()>
<com.ichi2.compat.customtabs.KeepAliveService: Landroid/os/IBinder; onBind(Landroid/content/Intent;)>
<com.ichi2.libanki.Card: V <clinit>()>
<com.ichi2.libanki.Card: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Card: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/Long;)>
<com.ichi2.libanki.Card: Ljava/util/HashMap; _getQA()>
<com.ichi2.libanki.Card: Ljava/util/HashMap; _getQA(Z)>
<com.ichi2.libanki.Card: Ljava/util/HashMap; _getQA(ZZ)>
<com.ichi2.libanki.Card: Ljava/lang/String; a()>
<com.ichi2.libanki.Card: Lcom/ichi2/libanki/Card; clone()>
<com.ichi2.libanki.Card: Ljava/lang/Object; clone()>
<com.ichi2.libanki.Card: Ljava/lang/String; css()>
<com.ichi2.libanki.Card: V flush()>
<com.ichi2.libanki.Card: V flush(Z)>
<com.ichi2.libanki.Card: V flushSched()>
<com.ichi2.libanki.Card: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.libanki.Card: J getDid()>
<com.ichi2.libanki.Card: J getDue()>
<com.ichi2.libanki.Card: I getFactor()>
<com.ichi2.libanki.Card: J getId()>
<com.ichi2.libanki.Card: I getIvl()>
<com.ichi2.libanki.Card: I getLapses()>
<com.ichi2.libanki.Card: I getLastIvl()>
<com.ichi2.libanki.Card: I getLeft()>
<com.ichi2.libanki.Card: J getNid()>
<com.ichi2.libanki.Card: J getODid()>
<com.ichi2.libanki.Card: J getODue()>
<com.ichi2.libanki.Card: I getOrd()>
<com.ichi2.libanki.Card: Ljava/lang/String; getPureAnswer()>
<com.ichi2.libanki.Card: I getQueue()>
<com.ichi2.libanki.Card: I getReps()>
<com.ichi2.libanki.Card: I getType()>
<com.ichi2.libanki.Card: Z getWasNew()>
<com.ichi2.libanki.Card: Z isEmpty()>
<com.ichi2.libanki.Card: V load()>
<com.ichi2.libanki.Card: Lorg/json/JSONObject; model()>
<com.ichi2.libanki.Card: Lcom/ichi2/libanki/Note; note()>
<com.ichi2.libanki.Card: Lcom/ichi2/libanki/Note; note(Z)>
<com.ichi2.libanki.Card: Ljava/lang/String; q()>
<com.ichi2.libanki.Card: Ljava/lang/String; q(Z)>
<com.ichi2.libanki.Card: Ljava/lang/String; q(ZZ)>
<com.ichi2.libanki.Card: Ljava/lang/String; qSimple()>
<com.ichi2.libanki.Card: V resumeTimer()>
<com.ichi2.libanki.Card: V setCol(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Card: V setDid(J)>
<com.ichi2.libanki.Card: V setDue(J)>
<com.ichi2.libanki.Card: V setFactor(I)>
<com.ichi2.libanki.Card: V setIvl(I)>
<com.ichi2.libanki.Card: V setLapses(I)>
<com.ichi2.libanki.Card: V setLastIvl(I)>
<com.ichi2.libanki.Card: V setLeft(I)>
<com.ichi2.libanki.Card: V setMod(J)>
<com.ichi2.libanki.Card: V setNid(J)>
<com.ichi2.libanki.Card: V setODid(J)>
<com.ichi2.libanki.Card: V setODue(J)>
<com.ichi2.libanki.Card: V setOrd(I)>
<com.ichi2.libanki.Card: V setQueue(I)>
<com.ichi2.libanki.Card: I setReps(I)>
<com.ichi2.libanki.Card: V setTimerStarted(D)>
<com.ichi2.libanki.Card: V setType(I)>
<com.ichi2.libanki.Card: V setUsn(I)>
<com.ichi2.libanki.Card: V setWasNew(Z)>
<com.ichi2.libanki.Card: Z shouldShowTimer()>
<com.ichi2.libanki.Card: Z showTimer()>
<com.ichi2.libanki.Card: V startTimer()>
<com.ichi2.libanki.Card: V stopTimer()>
<com.ichi2.libanki.Card: Lorg/json/JSONObject; template()>
<com.ichi2.libanki.Card: I timeLimit()>
<com.ichi2.libanki.Card: I timeTaken()>
<com.ichi2.libanki.Card: Ljava/lang/String; toString()>
<com.ichi2.libanki.CardStats: V <init>()>
<com.ichi2.libanki.CardStats: Ljava/lang/String; report(Landroid/content/Context;Lcom/ichi2/libanki/Card;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Collection$1: V <clinit>()>
<com.ichi2.libanki.Collection$DismissType: V <clinit>()>
<com.ichi2.libanki.Collection$DismissType: V <init>(Ljava/lang/String;II)>
<com.ichi2.libanki.Collection$DismissType: Lcom/ichi2/libanki/Collection$DismissType; valueOf(Ljava/lang/String;)>
<com.ichi2.libanki.Collection$DismissType: [Lcom/ichi2/libanki/Collection$DismissType; values()>
<com.ichi2.libanki.Collection: V <clinit>()>
<com.ichi2.libanki.Collection: V <init>(Landroid/content/Context;Lcom/ichi2/libanki/DB;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: V <init>(Landroid/content/Context;Lcom/ichi2/libanki/DB;Ljava/lang/String;Z)>
<com.ichi2.libanki.Collection: V <init>(Landroid/content/Context;Lcom/ichi2/libanki/DB;Ljava/lang/String;ZZ)>
<com.ichi2.libanki.Collection: V _closeLog()>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; _fieldData(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Card; _newCard(Lcom/ichi2/libanki/Note;Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Card; _newCard(Lcom/ichi2/libanki/Note;Lorg/json/JSONObject;IZ)>
<com.ichi2.libanki.Collection: V _openLog()>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; _tmplsFromOrds(Lorg/json/JSONObject;Ljava/util/ArrayList;)>
<com.ichi2.libanki.Collection: I _dueForDid(JI)>
<com.ichi2.libanki.Collection: V _logRem([JI)>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; _qaData()>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; _qaData(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: V _remNotes([J)>
<com.ichi2.libanki.Collection: Ljava/util/HashMap; _renderQA([Ljava/lang/Object;)>
<com.ichi2.libanki.Collection: Ljava/util/HashMap; _renderQA([Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: I addNote(Lcom/ichi2/libanki/Note;)>
<com.ichi2.libanki.Collection: Z basicCheck()>
<com.ichi2.libanki.Collection: V beforeUpload()>
<com.ichi2.libanki.Collection: I cardCount()>
<com.ichi2.libanki.Collection: I cardCount([Ljava/lang/Long;)>
<com.ichi2.libanki.Collection: V clearUndo()>
<com.ichi2.libanki.Collection: V close()>
<com.ichi2.libanki.Collection: V close(Z)>
<com.ichi2.libanki.Collection: Ljava/lang/String; emptyCardReport(Ljava/util/List;)>
<com.ichi2.libanki.Collection: Ljava/util/List; emptyCids()>
<com.ichi2.libanki.Collection: Ljava/util/List; findCards(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: Ljava/util/List; findCards(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: Ljava/util/List; findCardsForCardBrowser(Ljava/lang/String;ZLjava/util/Map;)>
<com.ichi2.libanki.Collection: Ljava/util/List; findDupes(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: Ljava/util/List; findDupes(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: Ljava/util/List; findNotes(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: I findReplace(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: I findReplace(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Collection: I findReplace(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.libanki.Collection: I findReplace(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Z)>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; findTemplates(Lcom/ichi2/libanki/Note;)>
<com.ichi2.libanki.Collection: J fixIntegrity()>
<com.ichi2.libanki.Collection: V flush()>
<com.ichi2.libanki.Collection: V flush(J)>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; genCards(Ljava/util/List;)>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; genCards([J)>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Card; getCard(J)>
<com.ichi2.libanki.Collection: Lorg/json/JSONObject; getConf()>
<com.ichi2.libanki.Collection: Landroid/content/Context; getContext()>
<com.ichi2.libanki.Collection: J getCrt()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/DB; getDb()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Decks; getDecks()>
<com.ichi2.libanki.Collection: Z getDirty()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Media; getMedia()>
<com.ichi2.libanki.Collection: J getMod()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Models; getModels()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Note; getNote(J)>
<com.ichi2.libanki.Collection: Ljava/lang/String; getPath()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Sched; getSched()>
<com.ichi2.libanki.Collection: J getScm()>
<com.ichi2.libanki.Collection: Z getServer()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Tags; getTags()>
<com.ichi2.libanki.Collection: J getTimeLimit()>
<com.ichi2.libanki.Collection: I getUsnForSync()>
<com.ichi2.libanki.Collection: Z isEmpty()>
<com.ichi2.libanki.Collection: V load()>
<com.ichi2.libanki.Collection: V lock()>
<com.ichi2.libanki.Collection: V log([Ljava/lang/Object;)>
<com.ichi2.libanki.Collection: V markReview(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Collection: V markUndo(Lcom/ichi2/libanki/Collection$DismissType;[Ljava/lang/Object;)>
<com.ichi2.libanki.Collection: V modSchema()>
<com.ichi2.libanki.Collection: V modSchema(Z)>
<com.ichi2.libanki.Collection: V modSchemaNoCheck()>
<com.ichi2.libanki.Collection: Ljava/lang/String; name()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Note; newNote()>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Note; newNote(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Collection: Lcom/ichi2/libanki/Note; newNote(Z)>
<com.ichi2.libanki.Collection: I nextID(Ljava/lang/String;)>
<com.ichi2.libanki.Collection: I noteCount()>
<com.ichi2.libanki.Collection: V optimize()>
<com.ichi2.libanki.Collection: Ljava/util/List; previewCards(Lcom/ichi2/libanki/Note;)>
<com.ichi2.libanki.Collection: Ljava/util/List; previewCards(Lcom/ichi2/libanki/Note;I)>
<com.ichi2.libanki.Collection: V remCards([J)>
<com.ichi2.libanki.Collection: V remCards([JZ)>
<com.ichi2.libanki.Collection: V remNotes([J)>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; renderQA()>
<com.ichi2.libanki.Collection: Ljava/util/ArrayList; renderQA([ILjava/lang/String;)>
<com.ichi2.libanki.Collection: V reopen()>
<com.ichi2.libanki.Collection: V reset()>
<com.ichi2.libanki.Collection: V save()>
<com.ichi2.libanki.Collection: V save(J)>
<com.ichi2.libanki.Collection: V save(Ljava/lang/String;J)>
<com.ichi2.libanki.Collection: Z schemaChanged()>
<com.ichi2.libanki.Collection: V setConf(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Collection: V setCrt(J)>
<com.ichi2.libanki.Collection: V setLs(J)>
<com.ichi2.libanki.Collection: V setMod()>
<com.ichi2.libanki.Collection: V setServer(Z)>
<com.ichi2.libanki.Collection: V setTimeLimit(J)>
<com.ichi2.libanki.Collection: V setUsnAfterSync(I)>
<com.ichi2.libanki.Collection: V startTimebox()>
<com.ichi2.libanki.Collection: [Ljava/lang/Long; timeboxReached()>
<com.ichi2.libanki.Collection: J undo()>
<com.ichi2.libanki.Collection: Z undoAvailable()>
<com.ichi2.libanki.Collection: Ljava/lang/String; undoName(Landroid/content/res/Resources;)>
<com.ichi2.libanki.Collection: V updateFieldCache([J)>
<com.ichi2.libanki.Collection: I usn()>
<com.ichi2.libanki.Collection: Z validCollection()>
<com.ichi2.libanki.Consts: V <init>()>
<com.ichi2.libanki.DB: V <clinit>()>
<com.ichi2.libanki.DB: V <init>(Ljava/lang/String;)>
<com.ichi2.libanki.DB: Ljava/lang/String; getCursorMethodName(Ljava/lang/String;)>
<com.ichi2.libanki.DB: V close()>
<com.ichi2.libanki.DB: V commit()>
<com.ichi2.libanki.DB: V execute(Ljava/lang/String;)>
<com.ichi2.libanki.DB: V execute(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.libanki.DB: V executeMany(Ljava/lang/String;Ljava/util/List;)>
<com.ichi2.libanki.DB: V executeScript(Ljava/lang/String;)>
<com.ichi2.libanki.DB: Lio/requery/android/database/sqlite/SQLiteDatabase; getDatabase()>
<com.ichi2.libanki.DB: Z getMod()>
<com.ichi2.libanki.DB: Ljava/lang/String; getPath()>
<com.ichi2.libanki.DB: J insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)>
<com.ichi2.libanki.DB: Ljava/util/ArrayList; queryColumn(Ljava/lang/Class;Ljava/lang/String;I)>
<com.ichi2.libanki.DB: J queryLongScalar(Ljava/lang/String;)>
<com.ichi2.libanki.DB: I queryScalar(Ljava/lang/String;)>
<com.ichi2.libanki.DB: I queryScalar(Ljava/lang/String;[Ljava/lang/String;)>
<com.ichi2.libanki.DB: Ljava/lang/String; queryString(Ljava/lang/String;)>
<com.ichi2.libanki.DB: V setMod(Z)>
<com.ichi2.libanki.DB: I update(Ljava/lang/String;Landroid/content/ContentValues;)>
<com.ichi2.libanki.DB: I update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)>
<com.ichi2.libanki.Decks$1: V <init>(Lcom/ichi2/libanki/Decks;)>
<com.ichi2.libanki.Decks$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.libanki.Decks$1: I compare(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Decks: V <clinit>()>
<com.ichi2.libanki.Decks: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Decks: Ljava/lang/String; _basename(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Z _canDragAndDrop(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Z _isAncestor(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Z _isParent(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/util/List; _path(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: V maybeAddToActive()>
<com.ichi2.libanki.Decks: Ljava/lang/String; _ensureParents(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/util/LinkedList; active()>
<com.ichi2.libanki.Decks: Ljava/util/ArrayList; all()>
<com.ichi2.libanki.Decks: Ljava/util/ArrayList; allConf()>
<com.ichi2.libanki.Decks: [Ljava/lang/Long; allIds()>
<com.ichi2.libanki.Decks: Ljava/util/ArrayList; allNames()>
<com.ichi2.libanki.Decks: Ljava/util/ArrayList; allNames(Z)>
<com.ichi2.libanki.Decks: Ljava/util/ArrayList; allSorted()>
<com.ichi2.libanki.Decks: V beforeUpload()>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; byName(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/util/TreeMap; children(J)>
<com.ichi2.libanki.Decks: [Ljava/lang/Long; cids(J)>
<com.ichi2.libanki.Decks: [Ljava/lang/Long; cids(JZ)>
<com.ichi2.libanki.Decks: V collapseBrowser(J)>
<com.ichi2.libanki.Decks: V collpase(J)>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; confForDid(J)>
<com.ichi2.libanki.Decks: J confId(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: J confId(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: I count()>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; current()>
<com.ichi2.libanki.Decks: Ljava/util/List; didsForConf(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Decks: V flush()>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; get(J)>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; get(JZ)>
<com.ichi2.libanki.Decks: Ljava/lang/String; getActualDescription()>
<com.ichi2.libanki.Decks: Lorg/json/JSONObject; getConf(J)>
<com.ichi2.libanki.Decks: Ljava/util/HashMap; getDecks()>
<com.ichi2.libanki.Decks: Ljava/lang/Long; id(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/lang/Long; id(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/lang/Long; id(Ljava/lang/String;Z)>
<com.ichi2.libanki.Decks: Ljava/lang/Long; id(Ljava/lang/String;ZLjava/lang/String;)>
<com.ichi2.libanki.Decks: Z isDyn(J)>
<com.ichi2.libanki.Decks: V load(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/lang/String; name(J)>
<com.ichi2.libanki.Decks: Ljava/lang/String; name(JZ)>
<com.ichi2.libanki.Decks: Ljava/lang/String; nameOrNone(J)>
<com.ichi2.libanki.Decks: J newDyn(Ljava/lang/String;)>
<com.ichi2.libanki.Decks: Ljava/util/List; parents(J)>
<com.ichi2.libanki.Decks: V recoverOrphans()>
<com.ichi2.libanki.Decks: V rem(J)>
<com.ichi2.libanki.Decks: V rem(JZ)>
<com.ichi2.libanki.Decks: V rem(JZZ)>
<com.ichi2.libanki.Decks: V remConf(J)>
<com.ichi2.libanki.Decks: V rename(Lorg/json/JSONObject;Ljava/lang/String;)>
<com.ichi2.libanki.Decks: V renameForDragAndDrop(Ljava/lang/Long;Ljava/lang/Long;)>
<com.ichi2.libanki.Decks: V restoreToDefault(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Decks: V save()>
<com.ichi2.libanki.Decks: V save(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Decks: V select(J)>
<com.ichi2.libanki.Decks: J selected()>
<com.ichi2.libanki.Decks: V setConf(Lorg/json/JSONObject;J)>
<com.ichi2.libanki.Decks: V setDeck([JJ)>
<com.ichi2.libanki.Decks: V update(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Decks: V updateConf(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Exporter: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Exporter: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/Long;)>
<com.ichi2.libanki.Finder$SearchState: V <init>(Lcom/ichi2/libanki/Finder;)>
<com.ichi2.libanki.Finder$SearchState: V add(Ljava/lang/String;)>
<com.ichi2.libanki.Finder$SearchState: V add(Ljava/lang/String;Z)>
<com.ichi2.libanki.Finder: V <clinit>()>
<com.ichi2.libanki.Finder: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findAdded(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findCardState(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; _findCards(Ljava/lang/String;Ljava/lang/Object;)>
<com.ichi2.libanki.Finder: Ljava/util/List; _findCardsForCardBrowser(Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findCids(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findDupes(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findField(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findMid(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findModel(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findNids(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findProp(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findRated(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findTag(Ljava/lang/String;Ljava/util/List;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findTemplate(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findText(Ljava/lang/String;Ljava/util/List;)>
<com.ichi2.libanki.Finder: Landroid/util/Pair; _order(Ljava/lang/Boolean;)>
<com.ichi2.libanki.Finder: Landroid/util/Pair; _order(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _query(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _queryForCardBrowser(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; dids(Ljava/lang/Long;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findDupes(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findDupes(Lcom/ichi2/libanki/Collection;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: I findReplace(Lcom/ichi2/libanki/Collection;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: I findReplace(Lcom/ichi2/libanki/Collection;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: I findReplace(Lcom/ichi2/libanki/Collection;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.libanki.Finder: I findReplace(Lcom/ichi2/libanki/Collection;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Z)>
<com.ichi2.libanki.Finder: Ljava/lang/Integer; ordForMid(Lcom/ichi2/libanki/Collection;Ljava/util/Map;JLjava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/lang/String; _findDeck(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: [Ljava/lang/String; _tokenize(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Landroid/util/Pair; _where([Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; fieldNames(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Finder: Ljava/util/List; fieldNames(Lcom/ichi2/libanki/Collection;Z)>
<com.ichi2.libanki.Finder: Ljava/util/List; findCards(Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findCards(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findCards(Ljava/lang/String;Z)>
<com.ichi2.libanki.Finder: Ljava/util/List; findCardsForCardBrowser(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findCardsForCardBrowser(Ljava/lang/String;ZLjava/util/Map;)>
<com.ichi2.libanki.Finder: Ljava/util/List; findNotes(Ljava/lang/String;)>
<com.ichi2.libanki.LaTeX: V <clinit>()>
<com.ichi2.libanki.LaTeX: V <init>()>
<com.ichi2.libanki.LaTeX: Ljava/lang/String; _imgLink(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.LaTeX: Ljava/lang/String; _latexFromHtml(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.LaTeX: Ljava/lang/String; mungeQA(Ljava/lang/String;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.LaTeX: V installHook(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.Media: V <clinit>()>
<com.ichi2.libanki.Media: V <init>(Lcom/ichi2/libanki/Collection;Z)>
<com.ichi2.libanki.Media: Landroid/util/Pair; _changes()>
<com.ichi2.libanki.Media: Ljava/lang/String; _checksum(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Ljava/util/List; _expandClozes(Ljava/lang/String;)>
<com.ichi2.libanki.Media: V _logChanges()>
<com.ichi2.libanki.Media: J _mtime(Ljava/lang/String;)>
<com.ichi2.libanki.Media: V _normalizeNoteRefs(J)>
<com.ichi2.libanki.Media: Ljava/util/List; check([Ljava/io/File;)>
<com.ichi2.libanki.Media: I indexOfFname(Ljava/util/regex/Pattern;)>
<com.ichi2.libanki.Media: Ljava/lang/String; writeData(Ljava/io/File;)>
<com.ichi2.libanki.Media: Ljava/lang/Long; _changed()>
<com.ichi2.libanki.Media: V _initDB()>
<com.ichi2.libanki.Media: Ljava/lang/String; addFile(Ljava/io/File;)>
<com.ichi2.libanki.Media: I addFilesFromZip(Ljava/util/zip/ZipFile;)>
<com.ichi2.libanki.Media: Ljava/util/List; check()>
<com.ichi2.libanki.Media: V close()>
<com.ichi2.libanki.Media: V connect()>
<com.ichi2.libanki.Media: Ljava/lang/String; dir()>
<com.ichi2.libanki.Media: I dirtyCount()>
<com.ichi2.libanki.Media: Ljava/lang/String; escapeImages(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Ljava/lang/String; escapeImages(Ljava/lang/String;Z)>
<com.ichi2.libanki.Media: Ljava/util/List; filesInStr(Ljava/lang/Long;Ljava/lang/String;)>
<com.ichi2.libanki.Media: Ljava/util/List; filesInStr(Ljava/lang/Long;Ljava/lang/String;Z)>
<com.ichi2.libanki.Media: V findChanges()>
<com.ichi2.libanki.Media: V findChanges(Z)>
<com.ichi2.libanki.Media: V forceResync()>
<com.ichi2.libanki.Media: Lcom/ichi2/libanki/DB; getDb()>
<com.ichi2.libanki.Media: Z hasIllegal(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Z have(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Z haveDirty()>
<com.ichi2.libanki.Media: I lastUsn()>
<com.ichi2.libanki.Media: V markClean(Ljava/util/List;)>
<com.ichi2.libanki.Media: V markFileAdd(Ljava/lang/String;)>
<com.ichi2.libanki.Media: V maybeUpgrade()>
<com.ichi2.libanki.Media: Landroid/util/Pair; mediaChangesZip()>
<com.ichi2.libanki.Media: I mediacount()>
<com.ichi2.libanki.Media: Z needScan()>
<com.ichi2.libanki.Media: V removeFile(Ljava/lang/String;)>
<com.ichi2.libanki.Media: V setLastUsn(I)>
<com.ichi2.libanki.Media: Ljava/lang/String; strip(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Ljava/lang/String; stripIllegal(Ljava/lang/String;)>
<com.ichi2.libanki.Media: V syncDelete(Ljava/lang/String;)>
<com.ichi2.libanki.Media: Landroid/util/Pair; syncInfo(Ljava/lang/String;)>
<com.ichi2.libanki.Models: V <clinit>()>
<com.ichi2.libanki.Models: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Models: V _changeCards([JLorg/json/JSONObject;Lorg/json/JSONObject;Ljava/util/Map;)>
<com.ichi2.libanki.Models: V _changeNotes([JLorg/json/JSONObject;Ljava/util/Map;)>
<com.ichi2.libanki.Models: [Ljava/lang/Object; _reqForTemplate(Lorg/json/JSONObject;Ljava/util/ArrayList;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V _setID(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V _syncTemplates(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V _updateRequired(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; addBasicModel(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; addBasicModel(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; addClozeModel(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; addForwardOptionalReverse(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; addForwardReverse(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Models: Z validateBrackets(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; _availClozeOrds(Lorg/json/JSONObject;Ljava/lang/String;)>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; _availClozeOrds(Lorg/json/JSONObject;Ljava/lang/String;Z)>
<com.ichi2.libanki.Models: V _transformFields(Lorg/json/JSONObject;Lcom/ichi2/libanki/Models$TransformFieldVisitor;)>
<com.ichi2.libanki.Models: V _updateFieldOrds(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V _updateTemplOrds(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V add(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V addField(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V addTemplate(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; all()>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; availOrds(Lorg/json/JSONObject;Ljava/lang/String;)>
<com.ichi2.libanki.Models: V beforeUpload()>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; byName(Ljava/lang/String;)>
<com.ichi2.libanki.Models: V change(Lorg/json/JSONObject;[JLorg/json/JSONObject;Ljava/util/Map;Ljava/util/Map;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; copy(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; current()>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; current(Z)>
<com.ichi2.libanki.Models: Ljava/util/Map; fieldMap(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; fieldNames(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V flush()>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; get(J)>
<com.ichi2.libanki.Models: I getId()>
<com.ichi2.libanki.Models: Ljava/util/HashMap; getModels()>
<com.ichi2.libanki.Models: Ljava/lang/String; getName()>
<com.ichi2.libanki.Models: Ljava/util/HashMap; getTemplateNames()>
<com.ichi2.libanki.Models: Z have(J)>
<com.ichi2.libanki.Models: [J ids()>
<com.ichi2.libanki.Models: V load(Ljava/lang/String;)>
<com.ichi2.libanki.Models: V moveField(Lorg/json/JSONObject;Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Models: V moveTemplate(Lorg/json/JSONObject;Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; newField(Ljava/lang/String;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; newModel(Ljava/lang/String;)>
<com.ichi2.libanki.Models: Lorg/json/JSONObject; newTemplate(Ljava/lang/String;)>
<com.ichi2.libanki.Models: Ljava/util/ArrayList; nids(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V rem(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V remField(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Z remTemplate(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V renameField(Lorg/json/JSONObject;Lorg/json/JSONObject;Ljava/lang/String;)>
<com.ichi2.libanki.Models: V save()>
<com.ichi2.libanki.Models: V save(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V save(Lorg/json/JSONObject;Z)>
<com.ichi2.libanki.Models: Ljava/lang/String; scmhash(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V setChanged()>
<com.ichi2.libanki.Models: V setCurrent(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: V setSortIdx(Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Models: I sortIdx(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: I tmplUseCount(Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Models: V update(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: I useCount(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Models: Z validateModel()>
<com.ichi2.libanki.Note: V <clinit>()>
<com.ichi2.libanki.Note: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/Long;)>
<com.ichi2.libanki.Note: V <init>(Lcom/ichi2/libanki/Collection;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Note: V <init>(Lcom/ichi2/libanki/Collection;Lorg/json/JSONObject;Ljava/lang/Long;)>
<com.ichi2.libanki.Note: I _fieldOrd(Ljava/lang/String;)>
<com.ichi2.libanki.Note: V _postFlush()>
<com.ichi2.libanki.Note: V _preFlush()>
<com.ichi2.libanki.Note: V addTag(Ljava/lang/String;)>
<com.ichi2.libanki.Note: Ljava/util/ArrayList; cards()>
<com.ichi2.libanki.Note: Lcom/ichi2/libanki/Note; clone()>
<com.ichi2.libanki.Note: Ljava/lang/Object; clone()>
<com.ichi2.libanki.Note: Z contains(Ljava/lang/String;)>
<com.ichi2.libanki.Note: V delTag(Ljava/lang/String;)>
<com.ichi2.libanki.Note: Ljava/lang/Integer; dupeOrEmpty()>
<com.ichi2.libanki.Note: V flush()>
<com.ichi2.libanki.Note: V flush(Ljava/lang/Long;)>
<com.ichi2.libanki.Note: V flush(Ljava/lang/Long;Z)>
<com.ichi2.libanki.Note: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.libanki.Note: [Ljava/lang/String; getFields()>
<com.ichi2.libanki.Note: J getId()>
<com.ichi2.libanki.Note: Ljava/lang/String; getItem(Ljava/lang/String;)>
<com.ichi2.libanki.Note: J getMid()>
<com.ichi2.libanki.Note: J getMod()>
<com.ichi2.libanki.Note: Ljava/lang/String; getSFld()>
<com.ichi2.libanki.Note: Ljava/util/List; getTags()>
<com.ichi2.libanki.Note: Z hasTag(Ljava/lang/String;)>
<com.ichi2.libanki.Note: [[Ljava/lang/String; items()>
<com.ichi2.libanki.Note: Ljava/lang/String; joinedFields()>
<com.ichi2.libanki.Note: [Ljava/lang/String; keys()>
<com.ichi2.libanki.Note: V load()>
<com.ichi2.libanki.Note: Lorg/json/JSONObject; model()>
<com.ichi2.libanki.Note: V setField(ILjava/lang/String;)>
<com.ichi2.libanki.Note: V setItem(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Note: V setTagsFromStr(Ljava/lang/String;)>
<com.ichi2.libanki.Note: Ljava/lang/String; stringTags()>
<com.ichi2.libanki.Note: [Ljava/lang/String; values()>
<com.ichi2.libanki.Sched$1: V <init>(Lcom/ichi2/libanki/Sched;)>
<com.ichi2.libanki.Sched$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.libanki.Sched$1: I compare([J[J)>
<com.ichi2.libanki.Sched$DeckDueTreeNode: V <init>(Lcom/ichi2/libanki/Sched;Ljava/lang/String;JIII)>
<com.ichi2.libanki.Sched$DeckDueTreeNode: V <init>(Lcom/ichi2/libanki/Sched;Ljava/lang/String;JIIILjava/util/List;)>
<com.ichi2.libanki.Sched$DeckDueTreeNode: V <init>(Lcom/ichi2/libanki/Sched;[Ljava/lang/String;JIII)>
<com.ichi2.libanki.Sched$DeckDueTreeNode: I compareTo(Ljava/lang/Object;)>
<com.ichi2.libanki.Sched$DeckDueTreeNode: Ljava/lang/String; toString()>
<com.ichi2.libanki.Sched: V <clinit>()>
<com.ichi2.libanki.Sched: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Sched: I _adjRevIvl(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V _answerLrnCard(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V _answerRevCard(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V _burySiblings(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: Z _checkLeech(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: I _cntFnNew(JI)>
<com.ichi2.libanki.Sched: I _cntFnRev(JI)>
<com.ichi2.libanki.Sched: I _constrainedIvl(ILorg/json/JSONObject;D)>
<com.ichi2.libanki.Sched: J _daysLate(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: I _deckNewLimit(J)>
<com.ichi2.libanki.Sched: I _deckNewLimit(JLjava/lang/reflect/Method;)>
<com.ichi2.libanki.Sched: I _deckRevLimit(J)>
<com.ichi2.libanki.Sched: I _deckRevLimitSingle(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: I _delayForGrade(Lorg/json/JSONObject;I)>
<com.ichi2.libanki.Sched: I _dynIvlBoost(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: Ljava/lang/String; _dynOrder(II)>
<com.ichi2.libanki.Sched: Ljava/util/List; _fillDyn(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: Z _fillLrn()>
<com.ichi2.libanki.Sched: Z _fillLrnDay()>
<com.ichi2.libanki.Sched: Z _fillNew()>
<com.ichi2.libanki.Sched: Z _fillRev()>
<com.ichi2.libanki.Sched: I _fuzzedIvl(I)>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getCard()>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getLrnCard()>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getLrnCard(Z)>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getLrnDayCard()>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getNewCard()>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; _getRevCard()>
<com.ichi2.libanki.Sched: I _graduatingIvl(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;Z)>
<com.ichi2.libanki.Sched: I _graduatingIvl(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;ZZ)>
<com.ichi2.libanki.Sched: Ljava/util/List; _groupChildren(Ljava/util/List;)>
<com.ichi2.libanki.Sched: Ljava/util/List; _groupChildrenMain(Ljava/util/List;)>
<com.ichi2.libanki.Sched: Lorg/json/JSONObject; _lapseConf(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: I _leftToday(Lorg/json/JSONArray;I)>
<com.ichi2.libanki.Sched: I _leftToday(Lorg/json/JSONArray;IJ)>
<com.ichi2.libanki.Sched: V _logLrn(Lcom/ichi2/libanki/Card;ILorg/json/JSONObject;ZII)>
<com.ichi2.libanki.Sched: V _logRev(Lcom/ichi2/libanki/Card;II)>
<com.ichi2.libanki.Sched: Lorg/json/JSONObject; _lrnConf(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: I _lrnForDeck(J)>
<com.ichi2.libanki.Sched: V _moveToDyn(JLjava/util/List;)>
<com.ichi2.libanki.Sched: Lorg/json/JSONObject; _newConf(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: I _nextLapseIvl(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: I _nextLrnIvl(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: I _nextRevIvl(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: Z _resched(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V _rescheduleAsRev(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;Z)>
<com.ichi2.libanki.Sched: I _rescheduleLapse(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V _rescheduleNew(Lcom/ichi2/libanki/Card;Lorg/json/JSONObject;Z)>
<com.ichi2.libanki.Sched: V _rescheduleRev(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V _resetLrn()>
<com.ichi2.libanki.Sched: V _resetLrnCount()>
<com.ichi2.libanki.Sched: V _resetNew()>
<com.ichi2.libanki.Sched: V _resetNewCount()>
<com.ichi2.libanki.Sched: V _resetRev()>
<com.ichi2.libanki.Sched: V _resetRevCount()>
<com.ichi2.libanki.Sched: Lorg/json/JSONObject; _revConf(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V _sortIntoLrn(JJ)>
<com.ichi2.libanki.Sched: I _startingLeft(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: Z _timeForNewCard()>
<com.ichi2.libanki.Sched: V _updateCutoff()>
<com.ichi2.libanki.Sched: V _updateNewCardRatio()>
<com.ichi2.libanki.Sched: V _updateRevIvl(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V _updateStats(Lcom/ichi2/libanki/Card;Ljava/lang/String;)>
<com.ichi2.libanki.Sched: I _walkingCount(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)>
<com.ichi2.libanki.Sched: Z haveBuried(Ljava/util/List;)>
<com.ichi2.libanki.Sched: V log(JIIIIIII)>
<com.ichi2.libanki.Sched: V removeLrn([J)>
<com.ichi2.libanki.Sched: V unburyCardsForDeck(Ljava/util/List;)>
<com.ichi2.libanki.Sched: V update(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: Lorg/json/JSONObject; _cardConf(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V _checkDay()>
<com.ichi2.libanki.Sched: Ljava/lang/String; _deckLimit()>
<com.ichi2.libanki.Sched: I _deckNewLimitSingle(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: [I _fuzzedIvlRange(I)>
<com.ichi2.libanki.Sched: I _newForDeck(JI)>
<com.ichi2.libanki.Sched: Ljava/lang/String; _nextDueMsg(Landroid/content/Context;)>
<com.ichi2.libanki.Sched: I _revForDeck(JI)>
<com.ichi2.libanki.Sched: V _updateStats(Lcom/ichi2/libanki/Card;Ljava/lang/String;J)>
<com.ichi2.libanki.Sched: I answerButtons(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V answerCard(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V buryCards([J)>
<com.ichi2.libanki.Sched: V buryNote(J)>
<com.ichi2.libanki.Sched: I cardCount()>
<com.ichi2.libanki.Sched: I countIdx(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: [I counts()>
<com.ichi2.libanki.Sched: [I counts(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: Ljava/util/List; deckDueList()>
<com.ichi2.libanki.Sched: Ljava/util/List; deckDueTree()>
<com.ichi2.libanki.Sched: V decrementCounts(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: I dueForecast()>
<com.ichi2.libanki.Sched: I dueForecast(I)>
<com.ichi2.libanki.Sched: V emptyDyn(J)>
<com.ichi2.libanki.Sched: V emptyDyn(JLjava/lang/String;)>
<com.ichi2.libanki.Sched: I eta([I)>
<com.ichi2.libanki.Sched: I eta([IZ)>
<com.ichi2.libanki.Sched: V extendLimits(II)>
<com.ichi2.libanki.Sched: Ljava/lang/CharSequence; finishedMsg(Landroid/content/Context;)>
<com.ichi2.libanki.Sched: V forgetCards([J)>
<com.ichi2.libanki.Sched: Lcom/ichi2/libanki/Card; getCard()>
<com.ichi2.libanki.Sched: J getDayCutoff()>
<com.ichi2.libanki.Sched: Ljava/lang/String; getName()>
<com.ichi2.libanki.Sched: I getReps()>
<com.ichi2.libanki.Sched: I getToday()>
<com.ichi2.libanki.Sched: Z haveBuried()>
<com.ichi2.libanki.Sched: Z haveBuried(J)>
<com.ichi2.libanki.Sched: Z leechActionSuspend(Lcom/ichi2/libanki/Card;)>
<com.ichi2.libanki.Sched: V maybeRandomizeDeck()>
<com.ichi2.libanki.Sched: V maybeRandomizeDeck(Ljava/lang/Long;)>
<com.ichi2.libanki.Sched: Z newDue()>
<com.ichi2.libanki.Sched: I nextIvl(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: Ljava/lang/String; nextIvlStr(Landroid/content/Context;Lcom/ichi2/libanki/Card;I)>
<com.ichi2.libanki.Sched: V orderCards(J)>
<com.ichi2.libanki.Sched: V randomizeCards(J)>
<com.ichi2.libanki.Sched: Ljava/util/List; rebuildDyn(J)>
<com.ichi2.libanki.Sched: V rebuildDyn()>
<com.ichi2.libanki.Sched: V remFromDyn([J)>
<com.ichi2.libanki.Sched: V removeLrn()>
<com.ichi2.libanki.Sched: V reschedCards([JII)>
<com.ichi2.libanki.Sched: V reset()>
<com.ichi2.libanki.Sched: V resetCards([Ljava/lang/Long;)>
<com.ichi2.libanki.Sched: V resortConf(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Sched: Z revDue()>
<com.ichi2.libanki.Sched: V setContext(Ljava/lang/ref/WeakReference;)>
<com.ichi2.libanki.Sched: V setReps(I)>
<com.ichi2.libanki.Sched: V setToday(I)>
<com.ichi2.libanki.Sched: V sortCards([JI)>
<com.ichi2.libanki.Sched: V sortCards([JIIZZ)>
<com.ichi2.libanki.Sched: V suspendCards([J)>
<com.ichi2.libanki.Sched: I totalNewForCurrentDeck()>
<com.ichi2.libanki.Sched: I totalRevForCurrentDeck()>
<com.ichi2.libanki.Sched: V unburyCards()>
<com.ichi2.libanki.Sched: V unburyCardsForDeck()>
<com.ichi2.libanki.Sched: V unburyCardsForDeck(J)>
<com.ichi2.libanki.Sched: V unsuspendCards([J)>
<com.ichi2.libanki.Sound$1: V <init>()>
<com.ichi2.libanki.Sound$1: V onAudioFocusChange(I)>
<com.ichi2.libanki.Sound$2: V <init>(Lcom/ichi2/libanki/Sound;Landroid/widget/VideoView;)>
<com.ichi2.libanki.Sound$2: V onVideoSizeChanged(Landroid/media/MediaPlayer;II)>
<com.ichi2.libanki.Sound$3: V <init>(Lcom/ichi2/libanki/Sound;)>
<com.ichi2.libanki.Sound$3: V onPrepared(Landroid/media/MediaPlayer;)>
<com.ichi2.libanki.Sound$PlayAllCompletionListener: V <init>(Lcom/ichi2/libanki/Sound;I)>
<com.ichi2.libanki.Sound$PlayAllCompletionListener: V <init>(Lcom/ichi2/libanki/Sound;ILcom/ichi2/libanki/Sound$1;)>
<com.ichi2.libanki.Sound$PlayAllCompletionListener: V onCompletion(Landroid/media/MediaPlayer;)>
<com.ichi2.libanki.Sound: V <clinit>()>
<com.ichi2.libanki.Sound: V <init>()>
<com.ichi2.libanki.Sound: V access$100(Landroid/widget/VideoView;II)>
<com.ichi2.libanki.Sound: Landroid/media/MediaPlayer; access$200(Lcom/ichi2/libanki/Sound;)>
<com.ichi2.libanki.Sound: Ljava/util/HashMap; access$300(Lcom/ichi2/libanki/Sound;)>
<com.ichi2.libanki.Sound: V access$400(Lcom/ichi2/libanki/Sound;)>
<com.ichi2.libanki.Sound: V configureVideo(Landroid/widget/VideoView;II)>
<com.ichi2.libanki.Sound: Ljava/lang/String; expandSounds(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Sound: Ljava/lang/String; getSoundPath(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Sound: Z hasURIScheme(Ljava/lang/String;)>
<com.ichi2.libanki.Sound: V releaseSound()>
<com.ichi2.libanki.Sound: V addSounds(Ljava/lang/String;Ljava/lang/String;I)>
<com.ichi2.libanki.Sound: Landroid/media/MediaPlayer$OnCompletionListener; getMediaCompletionListener()>
<com.ichi2.libanki.Sound: J getSoundsLength(I)>
<com.ichi2.libanki.Sound: Z hasAnswer()>
<com.ichi2.libanki.Sound: Z hasQuestion()>
<com.ichi2.libanki.Sound: Ljava/lang/Boolean; makeQuestionAnswerList()>
<com.ichi2.libanki.Sound: V notifyConfigurationChanged(Landroid/widget/VideoView;)>
<com.ichi2.libanki.Sound: V playSound(Ljava/lang/String;Landroid/media/MediaPlayer$OnCompletionListener;)>
<com.ichi2.libanki.Sound: V playSound(Ljava/lang/String;Landroid/media/MediaPlayer$OnCompletionListener;Landroid/widget/VideoView;)>
<com.ichi2.libanki.Sound: V playSounds(I)>
<com.ichi2.libanki.Sound: V resetSounds()>
<com.ichi2.libanki.Sound: V resetSounds(I)>
<com.ichi2.libanki.Sound: V setContext(Ljava/lang/ref/WeakReference;)>
<com.ichi2.libanki.Sound: V stopSounds()>
<com.ichi2.libanki.Stats$1: V <init>(Lcom/ichi2/libanki/Stats;)>
<com.ichi2.libanki.Stats$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.libanki.Stats$1: I compare([D[D)>
<com.ichi2.libanki.Stats$2: V <clinit>()>
<com.ichi2.libanki.Stats$AxisType: V <clinit>()>
<com.ichi2.libanki.Stats$AxisType: V <init>(Ljava/lang/String;III)>
<com.ichi2.libanki.Stats$AxisType: Lcom/ichi2/libanki/Stats$AxisType; valueOf(Ljava/lang/String;)>
<com.ichi2.libanki.Stats$AxisType: [Lcom/ichi2/libanki/Stats$AxisType; values()>
<com.ichi2.libanki.Stats$ChartType: V <clinit>()>
<com.ichi2.libanki.Stats$ChartType: V <init>(Ljava/lang/String;I)>
<com.ichi2.libanki.Stats$ChartType: Lcom/ichi2/libanki/Stats$ChartType; valueOf(Ljava/lang/String;)>
<com.ichi2.libanki.Stats$ChartType: [Lcom/ichi2/libanki/Stats$ChartType; values()>
<com.ichi2.libanki.Stats: V <clinit>()>
<com.ichi2.libanki.Stats: V <init>(Lcom/ichi2/libanki/Collection;Z)>
<com.ichi2.libanki.Stats: Ljava/lang/String; _getDeckFilter()>
<com.ichi2.libanki.Stats: Ljava/lang/String; _limit()>
<com.ichi2.libanki.Stats: I _periodDays()>
<com.ichi2.libanki.Stats: Z calculateDone(Lcom/ichi2/libanki/Stats$AxisType;Lcom/ichi2/libanki/Stats$ChartType;)>
<com.ichi2.libanki.Stats: Z calculateDue(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: [D createCumulative([D)>
<com.ichi2.libanki.Stats: [[D createCumulative([[D)>
<com.ichi2.libanki.Stats: [[D createCumulative([[DI)>
<com.ichi2.libanki.Stats: Ljava/lang/String; getRevlogTimeFilter(Lcom/ichi2/libanki/Stats$AxisType;Z)>
<com.ichi2.libanki.Stats: Z calculateAnswerButtons(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Z calculateBreakdown(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Z calculateCardTypes(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Z calculateDue(Landroid/content/Context;Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Z calculateIntervals(Landroid/content/Context;Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: V calculateOverviewStatistics(Lcom/ichi2/libanki/Stats$AxisType;Lcom/ichi2/anki/stats/OverviewStatsBuilder$OverviewStats;)>
<com.ichi2.libanki.Stats: Z calculateReviewCount(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Z calculateReviewTime(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: [I calculateTodayStats()>
<com.ichi2.libanki.Stats: Z calculateWeeklyBreakdown(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: [[D getCumulative()>
<com.ichi2.libanki.Stats: [Ljava/lang/Object; getMetaInfo()>
<com.ichi2.libanki.Stats: I getNewCards(Lcom/ichi2/libanki/Stats$AxisType;)>
<com.ichi2.libanki.Stats: Ljava/lang/String; getRevlogFilter(Lcom/ichi2/libanki/Stats$AxisType;Z)>
<com.ichi2.libanki.Stats: [[D getSeriesList()>
<com.ichi2.libanki.Storage: V <clinit>()>
<com.ichi2.libanki.Storage: V <init>()>
<com.ichi2.libanki.Storage: Lcom/ichi2/libanki/Collection; Collection(Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.libanki.Storage: Lcom/ichi2/libanki/Collection; Collection(Landroid/content/Context;Ljava/lang/String;ZZ)>
<com.ichi2.libanki.Storage: V _addSchema(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Storage: V _addSchema(Lcom/ichi2/libanki/DB;Z)>
<com.ichi2.libanki.Storage: I _createDB(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Storage: V _setColVars(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Storage: V _updateIndices(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Storage: V _upgrade(Lcom/ichi2/libanki/Collection;I)>
<com.ichi2.libanki.Storage: V _upgradeClozeModel(Lcom/ichi2/libanki/Collection;Lorg/json/JSONObject;)>
<com.ichi2.libanki.Storage: I _upgradeSchema(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Storage: V addIndices(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Tags: V <clinit>()>
<com.ichi2.libanki.Tags: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.Tags: V add(Ljava/lang/String;Ljava/lang/Integer;)>
<com.ichi2.libanki.Tags: Ljava/lang/String; addToStr(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Tags: Ljava/util/List; all()>
<com.ichi2.libanki.Tags: Ljava/util/Set; allItems()>
<com.ichi2.libanki.Tags: V beforeUpload()>
<com.ichi2.libanki.Tags: V bulkAdd(Ljava/util/List;Ljava/lang/String;)>
<com.ichi2.libanki.Tags: V bulkAdd(Ljava/util/List;Ljava/lang/String;Z)>
<com.ichi2.libanki.Tags: V bulkRem(Ljava/util/List;Ljava/lang/String;)>
<com.ichi2.libanki.Tags: Ljava/util/ArrayList; byDeck(JZ)>
<com.ichi2.libanki.Tags: Ljava/util/TreeSet; canonify(Ljava/util/List;)>
<com.ichi2.libanki.Tags: V flush()>
<com.ichi2.libanki.Tags: Z inList(Ljava/lang/String;Ljava/lang/Iterable;)>
<com.ichi2.libanki.Tags: Ljava/lang/String; join(Ljava/util/Collection;)>
<com.ichi2.libanki.Tags: V load(Ljava/lang/String;)>
<com.ichi2.libanki.Tags: V register(Ljava/lang/Iterable;)>
<com.ichi2.libanki.Tags: V register(Ljava/lang/Iterable;Ljava/lang/Integer;)>
<com.ichi2.libanki.Tags: V registerNotes()>
<com.ichi2.libanki.Tags: V registerNotes([J)>
<com.ichi2.libanki.Tags: Ljava/lang/String; remFromStr(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.Tags: V save()>
<com.ichi2.libanki.Tags: Ljava/util/List; split(Ljava/lang/String;)>
<com.ichi2.libanki.Utils$1: V <init>()>
<com.ichi2.libanki.Utils$1: Z accept(Ljava/io/File;)>
<com.ichi2.libanki.Utils: V <clinit>()>
<com.ichi2.libanki.Utils: V <init>()>
<com.ichi2.libanki.Utils: Ljava/lang/String; _incGuid(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: [J arrayList2array(Ljava/util/List;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; base62(ILjava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; base91(I)>
<com.ichi2.libanki.Utils: Ljava/lang/String; checksum(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: [B compress([BI)>
<com.ichi2.libanki.Utils: Ljava/lang/String; convertStreamToString(Ljava/io/InputStream;)>
<com.ichi2.libanki.Utils: V copyFile(Ljava/io/File;Ljava/io/File;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; entsToTxt(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: J fieldChecksum(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; fileChecksum(Ljava/io/File;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; fileChecksum(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; fmtPercentage(Ljava/lang/Double;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; fmtPercentage(Ljava/lang/Double;I)>
<com.ichi2.libanki.Utils: Ljava/sql/Date; genToday(D)>
<com.ichi2.libanki.Utils: Ljava/lang/String; getBaseUrl(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/util/List; getCustomFonts(Landroid/content/Context;)>
<com.ichi2.libanki.Utils: Ljava/util/List; getImportableDecks(Landroid/content/Context;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; guid64()>
<com.ichi2.libanki.Utils: Ljava/lang/String; ids2str(Ljava/util/List;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; ids2str(Lorg/json/JSONArray;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; ids2str([I)>
<com.ichi2.libanki.Utils: Ljava/lang/String; ids2str([J)>
<com.ichi2.libanki.Utils: Ljava/lang/String; ids2str([Ljava/lang/Long;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; incGuid(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: J intNow()>
<com.ichi2.libanki.Utils: J intNow(I)>
<com.ichi2.libanki.Utils: Z isIntentAvailable(Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Z isIntentAvailable(Landroid/content/Context;Ljava/lang/String;Landroid/content/ComponentName;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; joinFields([Ljava/lang/String;)>
<com.ichi2.libanki.Utils: [Ljava/lang/Object; jsonArray2Objects(Lorg/json/JSONArray;)>
<com.ichi2.libanki.Utils: [J jsonArrayToLongArray(Lorg/json/JSONArray;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; jsonToString(Lorg/json/JSONArray;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; jsonToString(Lorg/json/JSONObject;)>
<com.ichi2.libanki.Utils: [Ljava/lang/Long; list2ObjectArray(Ljava/util/List;)>
<com.ichi2.libanki.Utils: J maxID(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; nfcNormalized(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: D now()>
<com.ichi2.libanki.Utils: Ljava/lang/String; platDesc()>
<com.ichi2.libanki.Utils: V printDate(Ljava/lang/String;D)>
<com.ichi2.libanki.Utils: F randomFloatInRange(FF)>
<com.ichi2.libanki.Utils: Ljava/lang/String; replaceLineBreak(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; roundedTimeSpan(Landroid/content/Context;I)>
<com.ichi2.libanki.Utils: [Ljava/lang/String; splitFields(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: [Ljava/lang/String; splitFilename(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; stripHTML(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; stripHTMLMedia(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; timeQuantity(Landroid/content/Context;I)>
<com.ichi2.libanki.Utils: Ljava/lang/String; timeSpan(Landroid/content/Context;I)>
<com.ichi2.libanki.Utils: J timestampID(Lcom/ichi2/libanki/DB;Ljava/lang/String;)>
<com.ichi2.libanki.Utils: [J toPrimitive(Ljava/util/Collection;)>
<com.ichi2.libanki.Utils: [J toPrimitive([Ljava/lang/Long;)>
<com.ichi2.libanki.Utils: Ljava/lang/String; unescape(Ljava/lang/String;)>
<com.ichi2.libanki.Utils: V unzipFiles(Ljava/util/zip/ZipFile;Ljava/lang/String;[Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.Utils: D utcOffset()>
<com.ichi2.libanki.Utils: V writeToFile(Ljava/io/InputStream;Ljava/lang/String;)>
<com.ichi2.libanki.ZipFile: V <init>(Ljava/lang/String;)>
<com.ichi2.libanki.ZipFile: V writeEntry(Ljava/io/BufferedInputStream;Ljava/util/zip/ZipEntry;)>
<com.ichi2.libanki.ZipFile: V close()>
<com.ichi2.libanki.ZipFile: V write(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.ZipFile: V writeStr(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$1: V <clinit>()>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lcom/ichi2/libanki/hooks/AdvancedStatistics$1;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [Ljava/lang/Object; append([Ljava/lang/Object;Ljava/lang/Object;I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [[D createDoubleMatrix(II)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [[I createIntMatrix(II)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: V formatMatrix(Ljava/lang/String;[[ILjava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: I nCols([[I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: I nRows([[I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [J stringToLongArray(Ljava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [[I toIntMatrix([[DI)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [[D transposeMatrix([[D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: [[I transposeMatrix([[I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;JIIIII)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: I getCorrect()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: I getDue()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: D getFactor()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: J getId()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: I getIvl()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: I getLastReview()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: I getType()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setAll(JIIIII)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setAll(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setCorrect(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setDue(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setFactor(D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setIvl(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: V setLastReview(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Card: Ljava/lang/String; toString()>
<com.ichi2.libanki.hooks.AdvancedStatistics$CardIterator: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lio/requery/android/database/sqlite/SQLiteDatabase;ILcom/ichi2/libanki/hooks/AdvancedStatistics$Deck;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$CardIterator: V close()>
<com.ichi2.libanki.hooks.AdvancedStatistics$CardIterator: V current(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$CardIterator: Z moveToNext()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Deck: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;JIII)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Deck: J getDid()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Deck: I getInitialFactor()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Deck: I getNewPerDay()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Deck: I getRevPerDay()>
<com.ichi2.libanki.hooks.AdvancedStatistics$DeckFactory: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$DeckFactory: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lcom/ichi2/libanki/hooks/AdvancedStatistics$1;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$DeckFactory: Lcom/ichi2/libanki/hooks/AdvancedStatistics$Deck; createDeck(JLcom/ichi2/libanki/Decks;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: V applyOutcomeToCard(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: V calculateCumProbabilitiesForNewEasePerCurrentEase()>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: [D calculateProbabilitiesForNewEaseForCurrentEase(Ljava/lang/String;[I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: [D cumsum([D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: I draw([D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: I searchsorted([DD)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: Lcom/ichi2/libanki/hooks/AdvancedStatistics$ReviewOutcome; simSingleReview(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: Lcom/ichi2/libanki/hooks/AdvancedStatistics$ReviewOutcome; simSingleReview(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$NewCardSimulator: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$NewCardSimulator: V reset(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$NewCardSimulator: I simulateNewCard(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Deck;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$PlottableSimulationResult: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Ljava/util/ArrayList;[[D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$PlottableSimulationResult: [[D getNInState()>
<com.ichi2.libanki.hooks.AdvancedStatistics$PlottableSimulationResult: Ljava/util/ArrayList; getNReviews()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lcom/ichi2/libanki/hooks/AdvancedStatistics$Deck;Lcom/ichi2/libanki/hooks/AdvancedStatistics$SimulationResult;Lcom/ichi2/libanki/hooks/AdvancedStatistics$EaseClassifier;Ljava/util/Stack;Ljava/util/List;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lcom/ichi2/libanki/hooks/AdvancedStatistics$Review;Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;IID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V existingCard(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;IID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V rescheduleCurrentReview(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V scheduleCurrentReview(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V scheduleNextReview(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;ID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V writeLog(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: I getT()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V newCard(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;Lcom/ichi2/libanki/hooks/AdvancedStatistics$NewCardSimulator;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Review: V simulateReview()>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card; getCard()>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: D getProb()>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: V setAll(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: Ljava/lang/String; toString()>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewSimulator: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lio/requery/android/database/sqlite/SQLiteDatabase;Lcom/ichi2/libanki/hooks/AdvancedStatistics$EaseClassifier;II)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewSimulator: Lcom/ichi2/libanki/hooks/AdvancedStatistics$SimulationResult; simNreviews(ILcom/ichi2/libanki/hooks/AdvancedStatistics$Deck;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewSimulator: Lcom/ichi2/libanki/hooks/AdvancedStatistics$SimulationResult; simNreviews(ILcom/ichi2/libanki/Decks;Ljava/lang/String;Lcom/ichi2/libanki/hooks/AdvancedStatistics$TodayStats;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Landroid/content/Context;)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: D getComputeMaxError()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getComputeNDays()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: J getDayStartCutoff(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getInitialFactor()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getMaxNewPerDay()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getMaxReviewsPerDay()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getNSecsPerDay()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: J getNow()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getSimulateNIterations()>
<com.ichi2.libanki.hooks.AdvancedStatistics$Settings: I getToday(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;III)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: V add(Lcom/ichi2/libanki/hooks/AdvancedStatistics$SimulationResult;D)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: [[I getNInState()>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: [[I getNReviews()>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: I getnDays()>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: V incrementNReviews(IID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: I nReviewsDoneToday(I)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: V updateNInState(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;IID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$SimulationResult: V updateNInState(Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;Lcom/ichi2/libanki/hooks/AdvancedStatistics$Card;IID)>
<com.ichi2.libanki.hooks.AdvancedStatistics$TodayStats: V <init>(Lcom/ichi2/libanki/hooks/AdvancedStatistics;Lio/requery/android/database/sqlite/SQLiteDatabase;J)>
<com.ichi2.libanki.hooks.AdvancedStatistics$TodayStats: I getNLearned(J)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: V <init>(Lcom/ichi2/libanki/hooks/ExternalHookLoader;)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: V <init>(Lcom/ichi2/libanki/hooks/ExternalHookLoader;Lcom/ichi2/libanki/hooks/ExternalHookLoader$1;)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: Ljava/lang/Boolean; doInBackground([Ljava/io/File;)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: V onCancelled()>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: V onPostExecute(Ljava/lang/Boolean;)>
<com.ichi2.libanki.hooks.ExternalHookLoader$PrepareDexTask: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.ExternalHookLoader: V <init>(Landroid/app/Activity;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.ExternalHookLoader: Z access$100(Lcom/ichi2/libanki/hooks/ExternalHookLoader;Ljava/io/File;Ljava/io/File;)>
<com.ichi2.libanki.hooks.ExternalHookLoader: Z prepareDex(Ljava/io/File;Ljava/io/File;)>
<com.ichi2.libanki.hooks.ExternalHookLoader: Lcom/ichi2/libanki/hooks/HookPlugin; importExternalHook(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.FuriganaFilters: V <clinit>()>
<com.ichi2.libanki.hooks.FuriganaFilters: V <init>()>
<com.ichi2.libanki.hooks.FuriganaFilters: Ljava/util/regex/Pattern; access$000()>
<com.ichi2.libanki.hooks.FuriganaFilters: Ljava/lang/String; access$100(Ljava/util/regex/Matcher;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.FuriganaFilters: Ljava/lang/String; access$200()>
<com.ichi2.libanki.hooks.FuriganaFilters: Ljava/lang/String; noSound(Ljava/util/regex/Matcher;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.FuriganaFilters: V install(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.HintFilter: V <init>()>
<com.ichi2.libanki.hooks.HintFilter: V install(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.Hook: V <init>()>
<com.ichi2.libanki.hooks.Hook: Z equals(Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Hook: I hashCode()>
<com.ichi2.libanki.hooks.Hook: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Hook: V runHook([Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Hooks: V <init>(Landroid/content/Context;)>
<com.ichi2.libanki.hooks.Hooks: Lcom/ichi2/libanki/hooks/Hooks; getInstance(Landroid/content/Context;)>
<com.ichi2.libanki.hooks.Hooks: Ljava/lang/Object; runFilter(Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Hooks: V addHook(Ljava/lang/String;Lcom/ichi2/libanki/hooks/Hook;)>
<com.ichi2.libanki.hooks.Hooks: V remHook(Ljava/lang/String;Lcom/ichi2/libanki/hooks/Hook;)>
<com.ichi2.libanki.hooks.Hooks: V runHook(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Leech$LeechHook$1: V <init>(Lcom/ichi2/libanki/hooks/Leech$LeechHook;Landroid/app/Activity;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.Leech$LeechHook$1: V run()>
<com.ichi2.libanki.hooks.Leech: V <init>()>
<com.ichi2.libanki.hooks.Leech: V installHook(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.importer.Importer: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.importer.Importer: V _prepareTS()>
<com.ichi2.libanki.importer.Importer: Ljava/util/List; getLog()>
<com.ichi2.libanki.importer.Importer: Landroid/content/res/Resources; getRes()>
<com.ichi2.libanki.importer.Importer: V setProgressCallback(Lcom/ichi2/async/DeckTask$ProgressCallback;)>
<com.ichi2.libanki.importer.Importer: J ts()>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: V <init>(Lcom/ichi2/libanki/sync/HttpSyncer;Ljava/io/File;)>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: Ljava/io/InputStream; getContent()>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: J getContentLength()>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: Z isRepeatable()>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: Z isStreaming()>
<com.ichi2.libanki.sync.HttpSyncer$ProgressByteEntity: V writeTo(Ljava/io/OutputStream;)>
<com.ichi2.libanki.sync.HttpSyncer: V <init>(Ljava/lang/String;Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.sync.HttpSyncer: V access$000(Lcom/ichi2/libanki/sync/HttpSyncer;)>
<com.ichi2.libanki.sync.HttpSyncer: Ljava/io/ByteArrayInputStream; getInputStream(Ljava/lang/String;)>
<com.ichi2.libanki.sync.HttpSyncer: V publishProgress()>
<com.ichi2.libanki.sync.HttpSyncer: V abort()>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/json/JSONObject; applyChanges(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: V applyChunk(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: V assertOk(Lorg/apache/http/HttpResponse;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/json/JSONObject; chunk()>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/json/JSONObject; chunk(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: [Ljava/lang/Object; download()>
<com.ichi2.libanki.sync.HttpSyncer: J finish()>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; hostKey(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; meta()>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; register(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;ILjava/io/InputStream;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;Ljava/io/InputStream;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;Ljava/io/InputStream;I)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;Ljava/io/InputStream;ILorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/apache/http/HttpResponse; req(Ljava/lang/String;Ljava/io/InputStream;ILorg/json/JSONObject;Lcom/ichi2/async/Connection$CancelCallback;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/json/JSONObject; sanityCheck2(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: Lorg/json/JSONObject; start(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.HttpSyncer: Ljava/lang/String; stream2String(Ljava/io/InputStream;)>
<com.ichi2.libanki.sync.HttpSyncer: Ljava/lang/String; stream2String(Ljava/io/InputStream;I)>
<com.ichi2.libanki.sync.HttpSyncer: Ljava/lang/String; syncURL()>
<com.ichi2.libanki.sync.HttpSyncer: [Ljava/lang/Object; upload()>
<com.ichi2.libanki.sync.HttpSyncer: V writeToFile(Ljava/io/InputStream;Ljava/lang/String;)>
<com.ichi2.libanki.sync.MediaSyncer: V <init>(Lcom/ichi2/libanki/Collection;Lcom/ichi2/libanki/sync/RemoteMediaServer;Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.sync.MediaSyncer: V _downloadFiles(Ljava/util/List;)>
<com.ichi2.libanki.sync.MediaSyncer: Ljava/lang/String; sync()>
<com.ichi2.libanki.sync.Syncer: V <init>(Lcom/ichi2/libanki/Collection;Lcom/ichi2/libanki/sync/HttpSyncer;)>
<com.ichi2.libanki.sync.Syncer: Ljava/util/List; columnTypesForQuery(Ljava/lang/String;)>
<com.ichi2.libanki.sync.Syncer: Landroid/database/Cursor; cursorForTable(Ljava/lang/String;)>
<com.ichi2.libanki.sync.Syncer: J finish(J)>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; getConf()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONArray; getDecks()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONArray; getModels()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONArray; getTags()>
<com.ichi2.libanki.sync.Syncer: V mergeCards(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: V mergeConf(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: V mergeDecks(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: V mergeModels(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: V mergeNotes(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: V mergeRevlog(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: V mergeTags(Lorg/json/JSONArray;)>
<com.ichi2.libanki.sync.Syncer: Ljava/util/ArrayList; newerRows(Lorg/json/JSONArray;Ljava/lang/String;I)>
<com.ichi2.libanki.sync.Syncer: V prepareToChunk()>
<com.ichi2.libanki.sync.Syncer: V publishProgress(Lcom/ichi2/async/Connection;I)>
<com.ichi2.libanki.sync.Syncer: V remove(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; removed()>
<com.ichi2.libanki.sync.Syncer: V throwExceptionIfCancelled(Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.sync.Syncer: Ljava/lang/String; usnLim()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; applyChanges(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: V applyChunk(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; changes()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; chunk()>
<com.ichi2.libanki.sync.Syncer: J finish()>
<com.ichi2.libanki.sync.Syncer: Ljava/lang/String; getSyncMsg()>
<com.ichi2.libanki.sync.Syncer: V mergeChanges(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; meta()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; sanityCheck()>
<com.ichi2.libanki.sync.Syncer: Lorg/json/JSONObject; start(IZLorg/json/JSONObject;)>
<com.ichi2.libanki.sync.Syncer: [Ljava/lang/Object; sync()>
<com.ichi2.libanki.sync.Syncer: [Ljava/lang/Object; sync(Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.template.Template$1: V <init>(Lcom/ichi2/libanki/template/Template;)>
<com.ichi2.libanki.template.Template$1: I compare(Ljava/lang/Object;Ljava/lang/Object;)>
<com.ichi2.libanki.template.Template$1: I compare(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.template.Template: V <clinit>()>
<com.ichi2.libanki.template.Template: V <init>(Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; clozeText(Ljava/lang/String;Ljava/lang/String;C)>
<com.ichi2.libanki.template.Template: V compile_regexps()>
<com.ichi2.libanki.template.Template: Ljava/lang/String; get_or_attr(Ljava/util/Map;Ljava/lang/String;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; get_or_attr(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_comment()>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_delimiter(Ljava/lang/String;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_sections(Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_tag(Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_tags(Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render_unescaped(Ljava/lang/String;Ljava/util/Map;)>
<com.ichi2.libanki.template.Template: Ljava/lang/String; render()>
<com.ichi2.preferences.CustomDialogPreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.preferences.CustomDialogPreference: V onClick(Landroid/content/DialogInterface;I)>
<com.ichi2.preferences.NumberRangePreference: V <init>(Landroid/content/Context;)>
<com.ichi2.preferences.NumberRangePreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.preferences.NumberRangePreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.ichi2.preferences.NumberRangePreference: I getMaxFromAttributes(Landroid/util/AttributeSet;)>
<com.ichi2.preferences.NumberRangePreference: I getMinFromAttributes(Landroid/util/AttributeSet;)>
<com.ichi2.preferences.NumberRangePreference: I getValidatedRangeFromInt(I)>
<com.ichi2.preferences.NumberRangePreference: I getValidatedRangeFromString(Ljava/lang/String;)>
<com.ichi2.preferences.NumberRangePreference: V updateSettings()>
<com.ichi2.preferences.NumberRangePreference: Ljava/lang/String; getPersistedString(Ljava/lang/String;)>
<com.ichi2.preferences.NumberRangePreference: I getValue()>
<com.ichi2.preferences.NumberRangePreference: V onDialogClosed(Z)>
<com.ichi2.preferences.NumberRangePreference: Z persistString(Ljava/lang/String;)>
<com.ichi2.preferences.NumberRangePreference: V setValue(I)>
<com.ichi2.preferences.StepsPreference: V <init>(Landroid/content/Context;)>
<com.ichi2.preferences.StepsPreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.preferences.StepsPreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.ichi2.preferences.StepsPreference: Ljava/lang/String; convertFromJSON(Lorg/json/JSONArray;)>
<com.ichi2.preferences.StepsPreference: Lorg/json/JSONArray; convertToJSON(Ljava/lang/String;)>
<com.ichi2.preferences.StepsPreference: Z getAllowEmptyFromAttributes(Landroid/util/AttributeSet;)>
<com.ichi2.preferences.StepsPreference: Ljava/lang/String; getValidatedStepsInput(Ljava/lang/String;)>
<com.ichi2.preferences.StepsPreference: V updateSettings()>
<com.ichi2.preferences.StepsPreference: V onDialogClosed(Z)>
<com.ichi2.preferences.TimePreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.preferences.TimePreference: I parseHours(Ljava/lang/String;)>
<com.ichi2.preferences.TimePreference: I parseMinutes(Ljava/lang/String;)>
<com.ichi2.preferences.TimePreference: V onBindDialogView(Landroid/view/View;)>
<com.ichi2.preferences.TimePreference: Landroid/view/View; onCreateDialogView()>
<com.ichi2.preferences.TimePreference: V onDialogClosed(Z)>
<com.ichi2.preferences.TimePreference: V onSetInitialValue(ZLjava/lang/Object;)>
<com.ichi2.themes.HtmlColors: V <clinit>()>
<com.ichi2.themes.HtmlColors: V <init>()>
<com.ichi2.themes.HtmlColors: Ljava/lang/String; invertColors(Ljava/lang/String;)>
<com.ichi2.themes.HtmlColors: Ljava/lang/String; nameToHex(Ljava/lang/String;)>
<com.ichi2.themes.StyledProgressDialog: V <init>(Landroid/content/Context;)>
<com.ichi2.themes.StyledProgressDialog: Z animationEnabled(Landroid/content/Context;)>
<com.ichi2.themes.StyledProgressDialog: Lcom/afollestad/materialdialogs/MaterialDialog; show(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)>
<com.ichi2.themes.StyledProgressDialog: Lcom/afollestad/materialdialogs/MaterialDialog; show(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Z)>
<com.ichi2.themes.StyledProgressDialog: Lcom/afollestad/materialdialogs/MaterialDialog; show(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ZLandroid/content/DialogInterface$OnCancelListener;)>
<com.ichi2.themes.StyledProgressDialog: V setMax(I)>
<com.ichi2.themes.StyledProgressDialog: V setProgress(I)>
<com.ichi2.themes.StyledProgressDialog: V setProgressStyle(I)>
<com.ichi2.themes.StyledProgressDialog: V show()>
<com.ichi2.themes.Themes: V <init>()>
<com.ichi2.themes.Themes: I getColorFromAttr(Landroid/content/Context;I)>
<com.ichi2.themes.Themes: [I getColorFromAttr(Landroid/content/Context;[I)>
<com.ichi2.themes.Themes: I getCurrentTheme(Landroid/content/Context;)>
<com.ichi2.themes.Themes: I getResFromAttr(Landroid/content/Context;I)>
<com.ichi2.themes.Themes: [I getResFromAttr(Landroid/content/Context;[I)>
<com.ichi2.themes.Themes: V setTheme(Landroid/content/Context;)>
<com.ichi2.themes.Themes: V setThemeLegacy(Landroid/content/Context;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V <init>()>
<com.ichi2.ui.AppCompatPreferenceActivity: Landroid/support/v7/app/AppCompatDelegate; getDelegate()>
<com.ichi2.ui.AppCompatPreferenceActivity: V addContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.ichi2.ui.AppCompatPreferenceActivity: Landroid/view/MenuInflater; getMenuInflater()>
<com.ichi2.ui.AppCompatPreferenceActivity: Landroid/support/v7/app/ActionBar; getSupportActionBar()>
<com.ichi2.ui.AppCompatPreferenceActivity: V invalidateOptionsMenu()>
<com.ichi2.ui.AppCompatPreferenceActivity: V onConfigurationChanged(Landroid/content/res/Configuration;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V onDestroy()>
<com.ichi2.ui.AppCompatPreferenceActivity: V onPostCreate(Landroid/os/Bundle;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V onPostResume()>
<com.ichi2.ui.AppCompatPreferenceActivity: V onStop()>
<com.ichi2.ui.AppCompatPreferenceActivity: V onTitleChanged(Ljava/lang/CharSequence;I)>
<com.ichi2.ui.AppCompatPreferenceActivity: V setContentView(I)>
<com.ichi2.ui.AppCompatPreferenceActivity: V setContentView(Landroid/view/View;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V setContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.ichi2.ui.AppCompatPreferenceActivity: V setSupportActionBar(Landroid/support/v7/widget/Toolbar;)>
<com.ichi2.ui.SeekBarPreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.ui.SeekBarPreference: I getValue()>
<com.ichi2.ui.SeekBarPreference: V onBindDialogView(Landroid/view/View;)>
<com.ichi2.ui.SeekBarPreference: Landroid/view/View; onCreateDialogView()>
<com.ichi2.ui.SeekBarPreference: V onPrepareDialogBuilder(Landroid/app/AlertDialog$Builder;)>
<com.ichi2.ui.SeekBarPreference: V onProgressChanged(Landroid/widget/SeekBar;IZ)>
<com.ichi2.ui.SeekBarPreference: V onSetInitialValue(ZLjava/lang/Object;)>
<com.ichi2.ui.SeekBarPreference: V onStartTrackingTouch(Landroid/widget/SeekBar;)>
<com.ichi2.ui.SeekBarPreference: V onStopTrackingTouch(Landroid/widget/SeekBar;)>
<com.ichi2.ui.SeekBarPreference: V setValue(I)>
<com.ichi2.ui.SlidingTabLayout$TabClickListener: V <init>(Lcom/ichi2/ui/SlidingTabLayout;)>
<com.ichi2.ui.SlidingTabLayout$TabClickListener: V <init>(Lcom/ichi2/ui/SlidingTabLayout;Lcom/ichi2/ui/SlidingTabLayout$1;)>
<com.ichi2.ui.SlidingTabLayout$TabClickListener: V onClick(Landroid/view/View;)>
<com.ichi2.ui.SlidingTabLayout: V <init>(Landroid/content/Context;)>
<com.ichi2.ui.SlidingTabLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.ui.SlidingTabLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.ichi2.ui.SlidingTabLayout: Lcom/ichi2/ui/SlidingTabStrip; access$200(Lcom/ichi2/ui/SlidingTabLayout;)>
<com.ichi2.ui.SlidingTabLayout: V access$300(Lcom/ichi2/ui/SlidingTabLayout;II)>
<com.ichi2.ui.SlidingTabLayout: Landroid/support/v4/view/ViewPager$OnPageChangeListener; access$400(Lcom/ichi2/ui/SlidingTabLayout;)>
<com.ichi2.ui.SlidingTabLayout: Landroid/support/v4/view/ViewPager; access$500(Lcom/ichi2/ui/SlidingTabLayout;)>
<com.ichi2.ui.SlidingTabLayout: V populateTabStrip()>
<com.ichi2.ui.SlidingTabLayout: V scrollToTab(II)>
<com.ichi2.ui.SlidingTabLayout: Landroid/widget/TextView; createDefaultTabView(Landroid/content/Context;)>
<com.ichi2.ui.SlidingTabLayout: V onAttachedToWindow()>
<com.ichi2.ui.SlidingTabLayout: V setCustomTabColorizer(Lcom/ichi2/ui/SlidingTabLayout$TabColorizer;)>
<com.ichi2.ui.SlidingTabLayout: V setCustomTabView(II)>
<com.ichi2.ui.SlidingTabLayout: V setDividerColors([I)>
<com.ichi2.ui.SlidingTabLayout: V setOnPageChangeListener(Landroid/support/v4/view/ViewPager$OnPageChangeListener;)>
<com.ichi2.ui.SlidingTabLayout: V setSelectedIndicatorColors([I)>
<com.ichi2.ui.SlidingTabLayout: V setViewPager(Landroid/support/v4/view/ViewPager;)>
<com.ichi2.ui.SlidingTabStrip: V <init>(Landroid/content/Context;)>
<com.ichi2.ui.SlidingTabStrip: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.ui.SlidingTabStrip: I blendColors(IIF)>
<com.ichi2.ui.SlidingTabStrip: I setColorAlpha(IB)>
<com.ichi2.ui.SlidingTabStrip: V onDraw(Landroid/graphics/Canvas;)>
<com.ichi2.ui.SlidingTabStrip: V onViewPagerPageChanged(IF)>
<com.ichi2.ui.SlidingTabStrip: V setCustomTabColorizer(Lcom/ichi2/ui/SlidingTabLayout$TabColorizer;)>
<com.ichi2.ui.SlidingTabStrip: V setDividerColors([I)>
<com.ichi2.ui.SlidingTabStrip: V setSelectedIndicatorColors([I)>
<com.ichi2.upgrade.Upgrade: V <init>()>
<com.ichi2.upgrade.Upgrade: Z upgradeJSONIfNecessary(Lcom/ichi2/libanki/Collection;Lorg/json/JSONObject;Ljava/lang/String;Z)>
<com.ichi2.utils.Base64$1: V <init>(Ljava/io/InputStream;Ljava/lang/ClassLoader;)>
<com.ichi2.utils.Base64$1: Ljava/lang/Class; resolveClass(Ljava/io/ObjectStreamClass;)>
<com.ichi2.utils.Base64$InputStream: V <init>(Ljava/io/InputStream;)>
<com.ichi2.utils.Base64$InputStream: V <init>(Ljava/io/InputStream;I)>
<com.ichi2.utils.Base64$InputStream: I read()>
<com.ichi2.utils.Base64$InputStream: I read([BII)>
<com.ichi2.utils.Base64$OutputStream: V <init>(Ljava/io/OutputStream;)>
<com.ichi2.utils.Base64$OutputStream: V <init>(Ljava/io/OutputStream;I)>
<com.ichi2.utils.Base64$OutputStream: V close()>
<com.ichi2.utils.Base64$OutputStream: V flushBase64()>
<com.ichi2.utils.Base64$OutputStream: V resumeEncoding()>
<com.ichi2.utils.Base64$OutputStream: V suspendEncoding()>
<com.ichi2.utils.Base64$OutputStream: V write(I)>
<com.ichi2.utils.Base64$OutputStream: V write([BII)>
<com.ichi2.utils.Base64: V <clinit>()>
<com.ichi2.utils.Base64: V <init>()>
<com.ichi2.utils.Base64: [B access$000(I)>
<com.ichi2.utils.Base64: [B access$100([BII[BII)>
<com.ichi2.utils.Base64: I access$200([BI[BII)>
<com.ichi2.utils.Base64: [B access$300([B[BII)>
<com.ichi2.utils.Base64: [B decode(Ljava/lang/String;)>
<com.ichi2.utils.Base64: [B decode(Ljava/lang/String;I)>
<com.ichi2.utils.Base64: [B decode([B)>
<com.ichi2.utils.Base64: [B decode([BIII)>
<com.ichi2.utils.Base64: I decode4to3([BI[BII)>
<com.ichi2.utils.Base64: V decodeFileToFile(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.Base64: [B decodeFromFile(Ljava/lang/String;)>
<com.ichi2.utils.Base64: V decodeToFile(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.Base64: Ljava/lang/Object; decodeToObject(Ljava/lang/String;)>
<com.ichi2.utils.Base64: Ljava/lang/Object; decodeToObject(Ljava/lang/String;ILjava/lang/ClassLoader;)>
<com.ichi2.utils.Base64: V encode(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)>
<com.ichi2.utils.Base64: V encode(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;)>
<com.ichi2.utils.Base64: [B encode3to4([BII[BII)>
<com.ichi2.utils.Base64: [B encode3to4([B[BII)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeBytes([B)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeBytes([BI)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeBytes([BII)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeBytes([BIII)>
<com.ichi2.utils.Base64: [B encodeBytesToBytes([B)>
<com.ichi2.utils.Base64: [B encodeBytesToBytes([BIII)>
<com.ichi2.utils.Base64: V encodeFileToFile(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeFromFile(Ljava/lang/String;)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeObject(Ljava/io/Serializable;)>
<com.ichi2.utils.Base64: Ljava/lang/String; encodeObject(Ljava/io/Serializable;I)>
<com.ichi2.utils.Base64: V encodeToFile([BLjava/lang/String;)>
<com.ichi2.utils.Base64: [B getAlphabet(I)>
<com.ichi2.utils.Base64: [B getDecodabet(I)>
<com.ichi2.utils.BitmapUtil: V <init>()>
<com.ichi2.utils.BitmapUtil: Landroid/graphics/Bitmap; decodeFile(Ljava/io/File;I)>
<com.ichi2.utils.BitmapUtil: V freeImageView(Landroid/widget/ImageView;)>
<com.ichi2.utils.DiffEngine$1: V <clinit>()>
<com.ichi2.utils.DiffEngine$DiffAction: V <init>(Lcom/ichi2/utils/DiffEngine$Operation;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine$DiffAction: Z equals(Ljava/lang/Object;)>
<com.ichi2.utils.DiffEngine$DiffAction: Ljava/lang/String; toString()>
<com.ichi2.utils.DiffEngine$LinesToCharsResult: V <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)>
<com.ichi2.utils.DiffEngine$Operation: V <clinit>()>
<com.ichi2.utils.DiffEngine$Operation: V <init>(Ljava/lang/String;I)>
<com.ichi2.utils.DiffEngine$Operation: Lcom/ichi2/utils/DiffEngine$Operation; valueOf(Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine$Operation: [Lcom/ichi2/utils/DiffEngine$Operation; values()>
<com.ichi2.utils.DiffEngine: V <clinit>()>
<com.ichi2.utils.DiffEngine: V <init>()>
<com.ichi2.utils.DiffEngine: I diff_cleanupSemanticScore(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: [Ljava/lang/String; diff_halfMatchI(Ljava/lang/String;Ljava/lang/String;I)>
<com.ichi2.utils.DiffEngine: Ljava/lang/String; diff_linesToCharsMunge(Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)>
<com.ichi2.utils.DiffEngine: Ljava/lang/String; wrapBad(Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/lang/String; wrapGood(Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/lang/String; wrapMissing(Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: V diff_charsToLines(Ljava/util/LinkedList;Ljava/util/List;)>
<com.ichi2.utils.DiffEngine: V diff_cleanupMerge(Ljava/util/LinkedList;)>
<com.ichi2.utils.DiffEngine: V diff_cleanupSemantic(Ljava/util/LinkedList;)>
<com.ichi2.utils.DiffEngine: V diff_cleanupSemanticLossless(Ljava/util/LinkedList;)>
<com.ichi2.utils.DiffEngine: I diff_commonPrefix(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: I diff_commonSuffix(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_compute(Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.utils.DiffEngine: J diff_footprint(II)>
<com.ichi2.utils.DiffEngine: [Ljava/lang/String; diff_halfMatch(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Lcom/ichi2/utils/DiffEngine$LinesToCharsResult; diff_linesToChars(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_main(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_main(Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_map(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_path1(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: Ljava/util/LinkedList; diff_path2(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.DiffEngine: [Ljava/lang/String; diffedHtmlStrings(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.utils.ExifUtil: V <init>()>
<com.ichi2.utils.ExifUtil: Landroid/graphics/Bitmap; rotateFromCamera(Ljava/io/File;Landroid/graphics/Bitmap;)>
<com.ichi2.utils.HttpUtility: V <init>()>
<com.ichi2.utils.HttpUtility: Ljava/lang/Boolean; postReport(Ljava/lang/String;Ljava/util/List;)>
<com.ichi2.utils.LanguageUtil: V <clinit>()>
<com.ichi2.utils.LanguageUtil: V <init>()>
<com.ichi2.utils.LanguageUtil: Ljava/util/Locale; getLocale()>
<com.ichi2.utils.LanguageUtil: Ljava/util/Locale; getLocale(Ljava/lang/String;)>
<com.ichi2.utils.MethodLogger: V <init>()>
<com.ichi2.utils.MethodLogger: V log()>
<com.ichi2.utils.MethodLogger: V log(Ljava/lang/String;)>
<com.ichi2.utils.MethodLogger: V logInternal(Ljava/lang/String;)>
<com.ichi2.utils.Threads: V <init>()>
<com.ichi2.utils.Threads: V checkMainThread()>
<com.ichi2.utils.Threads: V checkNotMainThread()>
<com.ichi2.utils.Threads: Z isOnMainThread()>
<com.ichi2.utils.Threads: Lcom/ichi2/utils/Threads$ThreadChecker; newCurrentThreadChecker()>
<com.ichi2.utils.Threads: Lcom/ichi2/utils/Threads$ThreadChecker; newLazySingleThreadChecker()>
<com.ichi2.utils.Threads: Lcom/ichi2/utils/Threads$ThreadChecker; newSingleThreadChecker(Ljava/lang/Thread;)>
<com.ichi2.utils.VersionUtils: V <init>()>
<com.ichi2.utils.VersionUtils: Ljava/lang/String; getAppName()>
<com.ichi2.utils.VersionUtils: I getPkgVersionCode()>
<com.ichi2.utils.VersionUtils: Ljava/lang/String; getPkgVersionName()>
<com.ichi2.utils.VersionUtils: Z isReleaseVersion()>
<com.ichi2.widget.AddNoteWidget: V <init>()>
<com.ichi2.widget.AddNoteWidget: V onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService$1: V <init>(Lcom/ichi2/widget/AnkiDroidWidgetSmall$UpdateService;)>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService$1: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService: V <init>()>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService: Landroid/widget/RemoteViews; buildUpdate(Landroid/content/Context;Z)>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService: Landroid/os/IBinder; onBind(Landroid/content/Intent;)>
<com.ichi2.widget.AnkiDroidWidgetSmall$UpdateService: V onStart(Landroid/content/Intent;I)>
<com.ichi2.widget.AnkiDroidWidgetSmall: V <clinit>()>
<com.ichi2.widget.AnkiDroidWidgetSmall: V <init>()>
<com.ichi2.widget.AnkiDroidWidgetSmall: Landroid/content/BroadcastReceiver; access$000()>
<com.ichi2.widget.AnkiDroidWidgetSmall: Landroid/content/BroadcastReceiver; access$002(Landroid/content/BroadcastReceiver;)>
<com.ichi2.widget.AnkiDroidWidgetSmall: Z access$100()>
<com.ichi2.widget.AnkiDroidWidgetSmall: Z access$102(Z)>
<com.ichi2.widget.AnkiDroidWidgetSmall: V onDisabled(Landroid/content/Context;)>
<com.ichi2.widget.AnkiDroidWidgetSmall: V onEnabled(Landroid/content/Context;)>
<com.ichi2.widget.AnkiDroidWidgetSmall: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.widget.AnkiDroidWidgetSmall: V onUpdate(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)>
<com.ichi2.widget.WidgetStatus: V <clinit>()>
<com.ichi2.widget.WidgetStatus: V <init>()>
<com.ichi2.widget.WidgetStatus: Z access$100()>
<com.ichi2.widget.WidgetStatus: Z access$200()>
<com.ichi2.widget.WidgetStatus: I fetchDue(Landroid/content/Context;)>
<com.ichi2.widget.WidgetStatus: [I fetchSmall(Landroid/content/Context;)>
<com.ichi2.widget.WidgetStatus: V update(Landroid/content/Context;)>
<com.wildplot.android.parsing.Atom$1: V <clinit>()>
<com.wildplot.android.parsing.Atom$AtomType: V <clinit>()>
<com.wildplot.android.parsing.Atom$AtomType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.Atom$AtomType: Lcom/wildplot/android/parsing/Atom$AtomType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom$AtomType: [Lcom/wildplot/android/parsing/Atom$AtomType; values()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom$1: V <clinit>()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom$MathType: V <clinit>()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom$MathType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom$MathType: Lcom/wildplot/android/parsing/AtomTypes/MathFunctionAtom$MathType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom$MathType: [Lcom/wildplot/android/parsing/AtomTypes/MathFunctionAtom$MathType; values()>
<com.wildplot.android.parsing.Expression$1: V <clinit>()>
<com.wildplot.android.parsing.Expression$ExpressionType: V <clinit>()>
<com.wildplot.android.parsing.Expression$ExpressionType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.Expression$ExpressionType: Lcom/wildplot/android/parsing/Expression$ExpressionType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.Expression$ExpressionType: [Lcom/wildplot/android/parsing/Expression$ExpressionType; values()>
<com.wildplot.android.parsing.ExpressionFormatException: V <init>()>
<com.wildplot.android.parsing.ExpressionFormatException: V <init>(Ljava/lang/String;)>
<com.wildplot.android.parsing.Factor$1: V <clinit>()>
<com.wildplot.android.parsing.Factor$FactorType: V <clinit>()>
<com.wildplot.android.parsing.Factor$FactorType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.Factor$FactorType: Lcom/wildplot/android/parsing/Factor$FactorType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.Factor$FactorType: [Lcom/wildplot/android/parsing/Factor$FactorType; values()>
<com.wildplot.android.parsing.Pow$1: V <clinit>()>
<com.wildplot.android.parsing.Pow$PowType: V <clinit>()>
<com.wildplot.android.parsing.Pow$PowType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.Pow$PowType: Lcom/wildplot/android/parsing/Pow$PowType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.Pow$PowType: [Lcom/wildplot/android/parsing/Pow$PowType; values()>
<com.wildplot.android.parsing.Term$1: V <clinit>()>
<com.wildplot.android.parsing.Term$TermType: V <clinit>()>
<com.wildplot.android.parsing.Term$TermType: V <init>(Ljava/lang/String;I)>
<com.wildplot.android.parsing.Term$TermType: Lcom/wildplot/android/parsing/Term$TermType; valueOf(Ljava/lang/String;)>
<com.wildplot.android.parsing.Term$TermType: [Lcom/wildplot/android/parsing/Term$TermType; values()>
<com.wildplot.android.rendering.MultiScreenPart: V <init>([D[D)>
<com.wildplot.android.rendering.MultiScreenPart: V <init>([D[DLjava/util/Vector;)>
<com.wildplot.android.rendering.MultiScreenPart: V addDrawable(Lcom/wildplot/android/rendering/interfaces/Drawable;)>
<com.wildplot.android.rendering.MultiScreenPart: Ljava/util/Vector; getDrawables()>
<com.wildplot.android.rendering.MultiScreenPart: [D getxRange()>
<com.wildplot.android.rendering.MultiScreenPart: [D getyRange()>
<com.wildplot.android.rendering.MultiScreenPart: V setxRange([D)>
<com.wildplot.android.rendering.MultiScreenPart: V setyRange([D)>
<com.wildplot.android.rendering.RelativeColorGradient: V <init>()>
<com.wildplot.android.rendering.RelativeColorGradient: D delta(II)>
<com.wildplot.android.rendering.RelativeColorGradient: [Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; makeGradient(Ljava/util/Vector;I)>
<com.wildplot.android.rendering.ReliefDrawer$DepthSearcher: V <init>(Lcom/wildplot/android/rendering/ReliefDrawer;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;FF)>
<com.wildplot.android.rendering.ReliefDrawer$DepthSearcher: D getF_xHighest()>
<com.wildplot.android.rendering.ReliefDrawer$DepthSearcher: D getF_xLowest()>
<com.wildplot.android.rendering.ReliefDrawer$DepthSearcher: V run()>
<com.wildplot.android.rendering.ReliefDrawer$PartRenderer: V <init>(Lcom/wildplot/android/rendering/ReliefDrawer;Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;FFLcom/wildplot/android/rendering/interfaces/Function3D;)>
<com.wildplot.android.rendering.ReliefDrawer$PartRenderer: V run()>
<com.wildplot.android.rendering.graphics.wrapper.BufferedImageWrap: V <clinit>()>
<com.wildplot.android.rendering.graphics.wrapper.BufferedImageWrap: V <init>(IILandroid/graphics/Bitmap$Config;)>
<com.wildplot.android.rendering.graphics.wrapper.BufferedImageWrap: Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap; createGraphics()>
<com.wildplot.android.rendering.graphics.wrapper.BufferedImageWrap: Landroid/graphics/Bitmap; getBitmap()>
<com.wildplot.android.rendering.graphics.wrapper.BufferedImageWrap: Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap; getGraphics()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <clinit>()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(FFF)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(FFFF)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(I)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(IF)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(III)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: V <init>(IIII)>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; brighter()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; darker()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: I getBlue()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: I getColorValue()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: I getGreen()>
<com.wildplot.android.rendering.graphics.wrapper.ColorWrap: I getRed()>
<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: V <init>(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: F getHeight()>
<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: F getHeight(Z)>
<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: F stringWidth(Ljava/lang/String;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V <init>(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V dispose()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V drawArc(FFFFFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V drawImage(Lcom/wildplot/android/rendering/graphics/wrapper/BufferedImageWrap;Ljava/lang/String;FF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V drawLine(FFFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V drawRect(FFFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V drawString(Ljava/lang/String;FF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V fillArc(FFFFFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V fillRect(FFFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Landroid/graphics/Canvas; getCanvas()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap; getClipBounds()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Ljava/lang/Object; getFont()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Lcom/wildplot/android/rendering/graphics/wrapper/FontMetricsWrap; getFontMetrics()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Lcom/wildplot/android/rendering/graphics/wrapper/FontMetricsWrap; getFontMetrics(Ljava/lang/Object;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: F getFontSize()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Landroid/graphics/Paint; getPaint()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Lcom/wildplot/android/rendering/graphics/wrapper/StrokeWrap; getStroke()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: Landroid/graphics/Typeface; getTypeface()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V restore()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V rotate(FFF)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: I save()>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setClip(Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setFontSize(F)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setShadow(FFFLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setStroke(Lcom/wildplot/android/rendering/graphics/wrapper/StrokeWrap;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V setTypeface(Landroid/graphics/Typeface;)>
<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: V unsetShadow()>
<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: V <init>(II)>
<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: V <init>(Landroid/graphics/Rect;)>
<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: Landroid/graphics/Rect; getRect()>
<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: I height()>
<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: I width()>
<com.wildplot.android.rendering.graphics.wrapper.StrokeWrap: V <init>(F)>
<com.wildplot.android.rendering.graphics.wrapper.StrokeWrap: F getStrokeSize()>
<io.requery.android.database.AbstractCursor$SelfContentObserver: V <init>(Lio/requery/android/database/AbstractCursor;)>
<io.requery.android.database.AbstractCursor$SelfContentObserver: Z deliverSelfNotifications()>
<io.requery.android.database.AbstractCursor$SelfContentObserver: V onChange(Z)>
<io.requery.android.database.AbstractCursor: V <init>()>
<io.requery.android.database.AbstractCursor: V checkPosition()>
<io.requery.android.database.AbstractCursor: V close()>
<io.requery.android.database.AbstractCursor: V copyStringToBuffer(ILandroid/database/CharArrayBuffer;)>
<io.requery.android.database.AbstractCursor: V deactivate()>
<io.requery.android.database.AbstractCursor: V finalize()>
<io.requery.android.database.AbstractCursor: [B getBlob(I)>
<io.requery.android.database.AbstractCursor: I getColumnCount()>
<io.requery.android.database.AbstractCursor: I getColumnIndex(Ljava/lang/String;)>
<io.requery.android.database.AbstractCursor: I getColumnIndexOrThrow(Ljava/lang/String;)>
<io.requery.android.database.AbstractCursor: Ljava/lang/String; getColumnName(I)>
<io.requery.android.database.AbstractCursor: Landroid/os/Bundle; getExtras()>
<io.requery.android.database.AbstractCursor: Landroid/net/Uri; getNotificationUri()>
<io.requery.android.database.AbstractCursor: I getPosition()>
<io.requery.android.database.AbstractCursor: Z getWantsAllOnMoveCalls()>
<io.requery.android.database.AbstractCursor: Z isAfterLast()>
<io.requery.android.database.AbstractCursor: Z isBeforeFirst()>
<io.requery.android.database.AbstractCursor: Z isClosed()>
<io.requery.android.database.AbstractCursor: Z isFirst()>
<io.requery.android.database.AbstractCursor: Z isLast()>
<io.requery.android.database.AbstractCursor: Z move(I)>
<io.requery.android.database.AbstractCursor: Z moveToFirst()>
<io.requery.android.database.AbstractCursor: Z moveToLast()>
<io.requery.android.database.AbstractCursor: Z moveToNext()>
<io.requery.android.database.AbstractCursor: Z moveToPosition(I)>
<io.requery.android.database.AbstractCursor: Z moveToPrevious()>
<io.requery.android.database.AbstractCursor: V onChange(Z)>
<io.requery.android.database.AbstractCursor: V onDeactivateOrClose()>
<io.requery.android.database.AbstractCursor: V registerContentObserver(Landroid/database/ContentObserver;)>
<io.requery.android.database.AbstractCursor: V registerDataSetObserver(Landroid/database/DataSetObserver;)>
<io.requery.android.database.AbstractCursor: Z requery()>
<io.requery.android.database.AbstractCursor: Landroid/os/Bundle; respond(Landroid/os/Bundle;)>
<io.requery.android.database.AbstractCursor: V setExtras(Landroid/os/Bundle;)>
<io.requery.android.database.AbstractCursor: V setNotificationUri(Landroid/content/ContentResolver;Landroid/net/Uri;)>
<io.requery.android.database.AbstractCursor: V unregisterContentObserver(Landroid/database/ContentObserver;)>
<io.requery.android.database.AbstractCursor: V unregisterDataSetObserver(Landroid/database/DataSetObserver;)>
<io.requery.android.database.CursorWindowAllocationException: V <init>(Ljava/lang/String;)>
<io.requery.android.database.sqlite.CloseGuard: V <clinit>()>
<io.requery.android.database.sqlite.CloseGuard: V <init>()>
<io.requery.android.database.sqlite.CloseGuard: Lio/requery/android/database/sqlite/CloseGuard; get()>
<io.requery.android.database.sqlite.CloseGuard: Lio/requery/android/database/sqlite/CloseGuard$Reporter; getReporter()>
<io.requery.android.database.sqlite.CloseGuard: V setEnabled(Z)>
<io.requery.android.database.sqlite.CloseGuard: V setReporter(Lio/requery/android/database/sqlite/CloseGuard$Reporter;)>
<io.requery.android.database.sqlite.CloseGuard: V close()>
<io.requery.android.database.sqlite.CloseGuard: V open(Ljava/lang/String;)>
<io.requery.android.database.sqlite.CloseGuard: V warnIfOpen()>
<io.requery.android.database.sqlite.SQLiteClosable: V <init>()>
<io.requery.android.database.sqlite.SQLiteClosable: V acquireReference()>
<io.requery.android.database.sqlite.SQLiteClosable: V close()>
<io.requery.android.database.sqlite.SQLiteClosable: V releaseReference()>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: V <init>()>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: V <init>(Lio/requery/android/database/sqlite/SQLiteConnection$1;)>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: Ljava/lang/String; access$600(Lio/requery/android/database/sqlite/SQLiteConnection$Operation;)>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: Ljava/lang/String; getFormattedStartTime()>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: Ljava/lang/String; getStatus()>
<io.requery.android.database.sqlite.SQLiteConnection$Operation: V describe(Ljava/lang/StringBuilder;Z)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V <init>()>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V <init>(Lio/requery/android/database/sqlite/SQLiteConnection$1;)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: Z endOperationDeferLogLocked(I)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: Lio/requery/android/database/sqlite/SQLiteConnection$Operation; getOperationLocked(I)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V logOperationLocked(ILjava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: I newOperationCookieLocked(I)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: I beginOperation(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: Ljava/lang/String; describeCurrentOperation()>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V dump(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V endOperation(I)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: Z endOperationDeferLog(I)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V failOperation(ILjava/lang/Exception;)>
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: V logOperation(ILjava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: V <init>()>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: V <init>(Lio/requery/android/database/sqlite/SQLiteConnection$1;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: V <init>(Ljava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: Lio/requery/android/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus; valueOf(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: [Lio/requery/android/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus; values()>
<io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: V <init>()>
<io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: V <init>(Lio/requery/android/database/sqlite/SQLiteConnectionPool$1;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Ljava/lang/Object; access$000(Lio/requery/android/database/sqlite/SQLiteConnectionPool;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V access$100(Lio/requery/android/database/sqlite/SQLiteConnectionPool;Lio/requery/android/database/sqlite/SQLiteConnectionPool$ConnectionWaiter;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V cancelConnectionWaiterLocked(Lio/requery/android/database/sqlite/SQLiteConnectionPool$ConnectionWaiter;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V closeAvailableConnectionsAndLogExceptionsLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V closeConnectionAndLogExceptionsLocked(Lio/requery/android/database/sqlite/SQLiteConnection;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V closeExcessConnectionsAndLogExceptionsLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V discardAcquiredConnectionsLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V dispose(Z)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V finishAcquireConnectionLocked(Lio/requery/android/database/sqlite/SQLiteConnection;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: I getPriority(I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Z isSessionBlockingImportantConnectionWaitersLocked(ZI)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V logConnectionPoolBusyLocked(JI)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V markAcquiredConnectionsLocked(Lio/requery/android/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnectionPool$ConnectionWaiter; obtainConnectionWaiterLocked(Ljava/lang/Thread;JIZLjava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnectionPool; open(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V open()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnection; openConnectionLocked(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;Z)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V reconfigureAllConnectionsLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Z recycleConnectionLocked(Lio/requery/android/database/sqlite/SQLiteConnection;Lio/requery/android/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V recycleConnectionWaiterLocked(Lio/requery/android/database/sqlite/SQLiteConnectionPool$ConnectionWaiter;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V setMaxConnectionPoolSizeLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V throwIfClosedLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnection; tryAcquireNonPrimaryConnectionLocked(Ljava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnection; tryAcquirePrimaryConnectionLocked(I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnection; waitForConnection(Ljava/lang/String;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V wakeConnectionWaitersLocked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Lio/requery/android/database/sqlite/SQLiteConnection; acquireConnection(Ljava/lang/String;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V close()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V collectDbStats(Ljava/util/ArrayList;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V dump(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V enableLocalizedCollators()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V finalize()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V onConnectionLeaked()>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V reconfigure(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: V releaseConnection(Lio/requery/android/database/sqlite/SQLiteConnection;)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Z shouldYieldConnection(Lio/requery/android/database/sqlite/SQLiteConnection;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool: Ljava/lang/String; toString()>
<io.requery.android.database.sqlite.SQLiteCustomExtension: V <init>(Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteCustomFunction: V <init>(Ljava/lang/String;ILio/requery/android/database/sqlite/SQLiteDatabase$CustomFunction;)>
<io.requery.android.database.sqlite.SQLiteCustomFunction: Ljava/lang/String; dispatchCallback([Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase$1: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<io.requery.android.database.sqlite.SQLiteDatabase$1: Lio/requery/android/database/sqlite/SQLiteSession; initialValue()>
<io.requery.android.database.sqlite.SQLiteDatabase$1: Ljava/lang/Object; initialValue()>
<io.requery.android.database.sqlite.SQLiteDatabase$2: V <init>(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase$2: Z accept(Ljava/io/File;)>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: V <init>(Ljava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: V <init>(Ljava/lang/String;ILjava/util/List;Ljava/util/List;)>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: Ljava/lang/String; stripPathForLogs(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: Z isInMemoryDb()>
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: V updateParametersFrom(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteDebug$DbStats: V <init>(Ljava/lang/String;JJIIII)>
<io.requery.android.database.sqlite.SQLiteDebug$PagerStats: V <init>()>
<io.requery.android.database.sqlite.SQLiteDebug: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteDebug: V <init>()>
<io.requery.android.database.sqlite.SQLiteDebug: V dump(Landroid/util/Printer;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDebug: Lio/requery/android/database/sqlite/SQLiteDebug$PagerStats; getDatabaseInfo()>
<io.requery.android.database.sqlite.SQLiteDebug: Z shouldLogSlowQuery(J)>
<io.requery.android.database.sqlite.SQLiteGlobal: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteGlobal: V <init>()>
<io.requery.android.database.sqlite.SQLiteGlobal: Ljava/lang/String; getDefaultJournalMode()>
<io.requery.android.database.sqlite.SQLiteGlobal: I getDefaultPageSize()>
<io.requery.android.database.sqlite.SQLiteGlobal: Ljava/lang/String; getDefaultSyncMode()>
<io.requery.android.database.sqlite.SQLiteGlobal: I getJournalSizeLimit()>
<io.requery.android.database.sqlite.SQLiteGlobal: I getWALAutoCheckpoint()>
<io.requery.android.database.sqlite.SQLiteGlobal: I getWALConnectionPoolSize()>
<io.requery.android.database.sqlite.SQLiteGlobal: Ljava/lang/String; getWALSyncMode()>
<io.requery.android.database.sqlite.SQLiteGlobal: I releaseMemory()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V <init>(Landroid/content/Context;Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;I)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V <init>(Landroid/content/Context;Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;ILio/requery/android/database/DatabaseErrorHandler;)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: Lio/requery/android/database/sqlite/SQLiteDatabase; getDatabaseLocked(Z)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V close()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration; createConfiguration(Ljava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: Ljava/lang/String; getDatabaseName()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: Lio/requery/android/database/sqlite/SQLiteDatabase; getReadableDatabase()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: Lio/requery/android/database/sqlite/SQLiteDatabase; getWritableDatabase()>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V onConfigure(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V onDowngrade(Lio/requery/android/database/sqlite/SQLiteDatabase;II)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V onOpen(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<io.requery.android.database.sqlite.SQLiteOpenHelper: V setWriteAheadLoggingEnabled(Z)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V <init>()>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V appendClause(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V appendColumns(Ljava/lang/StringBuilder;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Ljava/lang/String; buildQueryString(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: [Ljava/lang/String; computeProjection([Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V validateQuerySql(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V appendWhere(Ljava/lang/CharSequence;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V appendWhereEscapeString(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Ljava/lang/String; buildQuery([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Ljava/lang/String; buildUnionQuery([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Ljava/lang/String; buildUnionSubQuery(Ljava/lang/String;[Ljava/lang/String;Ljava/util/Set;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Ljava/lang/String; getTables()>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Landroid/database/Cursor; query(Lio/requery/android/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Landroid/database/Cursor; query(Lio/requery/android/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: Landroid/database/Cursor; query(Lio/requery/android/database/sqlite/SQLiteDatabase;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V setCursorFactory(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V setDistinct(Z)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V setProjectionMap(Ljava/util/Map;)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V setStrict(Z)>
<io.requery.android.database.sqlite.SQLiteQueryBuilder: V setTables(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteSession$Transaction: V <init>()>
<io.requery.android.database.sqlite.SQLiteSession$Transaction: V <init>(Lio/requery/android/database/sqlite/SQLiteSession$1;)>
<io.requery.android.database.sqlite.SQLiteSession: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteSession: V <init>(Lio/requery/android/database/sqlite/SQLiteConnectionPool;)>
<io.requery.android.database.sqlite.SQLiteSession: V acquireConnection(Ljava/lang/String;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: V beginTransactionUnchecked(ILandroid/database/sqlite/SQLiteTransactionListener;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: V endTransactionUnchecked(Landroid/support/v4/os/CancellationSignal;Z)>
<io.requery.android.database.sqlite.SQLiteSession: Z executeSpecial(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: Lio/requery/android/database/sqlite/SQLiteSession$Transaction; obtainTransaction(ILandroid/database/sqlite/SQLiteTransactionListener;)>
<io.requery.android.database.sqlite.SQLiteSession: V recycleTransaction(Lio/requery/android/database/sqlite/SQLiteSession$Transaction;)>
<io.requery.android.database.sqlite.SQLiteSession: V releaseConnection()>
<io.requery.android.database.sqlite.SQLiteSession: V throwIfNestedTransaction()>
<io.requery.android.database.sqlite.SQLiteSession: V throwIfNoTransaction()>
<io.requery.android.database.sqlite.SQLiteSession: V throwIfTransactionMarkedSuccessful()>
<io.requery.android.database.sqlite.SQLiteSession: Z yieldTransactionUnchecked(JLandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: V beginTransaction(ILandroid/database/sqlite/SQLiteTransactionListener;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: V endTransaction(Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: V execute(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: Landroid/os/ParcelFileDescriptor; executeForBlobFileDescriptor(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: I executeForChangedRowCount(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: I executeForCursorWindow(Ljava/lang/String;[Ljava/lang/Object;Lio/requery/android/database/CursorWindow;IIZILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: J executeForLastInsertedRowId(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: J executeForLong(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: Ljava/lang/String; executeForString(Ljava/lang/String;[Ljava/lang/Object;ILandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteSession: Z hasConnection()>
<io.requery.android.database.sqlite.SQLiteSession: Z hasNestedTransaction()>
<io.requery.android.database.sqlite.SQLiteSession: Z hasTransaction()>
<io.requery.android.database.sqlite.SQLiteSession: V prepare(Ljava/lang/String;ILandroid/support/v4/os/CancellationSignal;Lio/requery/android/database/sqlite/SQLiteStatementInfo;)>
<io.requery.android.database.sqlite.SQLiteSession: V setTransactionSuccessful()>
<io.requery.android.database.sqlite.SQLiteSession: Z yieldTransaction(JZLandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteStatementInfo: V <init>()>
<io.requery.android.database.sqlite.SQLiteStatementType: V <init>()>
<io.requery.android.database.sqlite.SQLiteStatementType: I getSqlStatementType(Ljava/lang/String;)>
<io.requery.android.sqlite.BuildConfig: V <init>()>
<io.requery.android.sqlite.R: V <init>()>
<me.zhanghai.android.materialprogressbar.Animators: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Animators: V <init>()>
<me.zhanghai.android.materialprogressbar.Animators: Landroid/animation/Animator; createIndeterminate(Ljava/lang/Object;)>
<me.zhanghai.android.materialprogressbar.Animators: Landroid/animation/Animator; createIndeterminateHorizontalRect1(Ljava/lang/Object;)>
<me.zhanghai.android.materialprogressbar.Animators: Landroid/animation/Animator; createIndeterminateHorizontalRect2(Ljava/lang/Object;)>
<me.zhanghai.android.materialprogressbar.Animators: Landroid/animation/Animator; createIndeterminateRotation(Ljava/lang/Object;)>
<me.zhanghai.android.materialprogressbar.BuildConfig: V <init>()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable$RectTransformX: V <init>(FF)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable$RectTransformX: V <init>(Lme/zhanghai/android/materialprogressbar/IndeterminateHorizontalProgressDrawable$RectTransformX;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable$RectTransformX: V setScaleX(F)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable$RectTransformX: V setTranslateX(F)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingPathTransform: V <init>()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingPathTransform: V <init>(Lme/zhanghai/android/materialprogressbar/IndeterminateProgressDrawable$1;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingPathTransform: V setTrimPathEnd(F)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingPathTransform: V setTrimPathOffset(F)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingPathTransform: V setTrimPathStart(F)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingRotation: V <init>()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingRotation: V <init>(Lme/zhanghai/android/materialprogressbar/IndeterminateProgressDrawable$1;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingRotation: F access$200(Lme/zhanghai/android/materialprogressbar/IndeterminateProgressDrawable$RingRotation;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable$RingRotation: V setRotation(F)>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT1_SCALE_X: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT1_SCALE_X: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT1_TRANSLATE_X: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT1_TRANSLATE_X: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT2_SCALE_X: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT2_SCALE_X: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT2_TRANSLATE_X: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$INDETERMINATE_HORIZONTAL_RECT2_TRANSLATE_X: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$LINEAR: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$LINEAR: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$TRIM_PATH_END: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$TRIM_PATH_END: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators$TRIM_PATH_START: V <clinit>()>
<me.zhanghai.android.materialprogressbar.Interpolators$TRIM_PATH_START: V <init>()>
<me.zhanghai.android.materialprogressbar.Interpolators: V <init>()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar$TintInfo: V <init>()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar$TintInfo: V <init>(Lme/zhanghai/android/materialprogressbar/MaterialProgressBar$1;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V <clinit>()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;II)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V applyDeterminateProgressTint()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V applyIndeterminateProgressTint()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V applyProgressTint()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V applyTintForDrawable(Landroid/graphics/drawable/Drawable;Lme/zhanghai/android/materialprogressbar/MaterialProgressBar$TintInfo;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V fixCanvasScalingWhenHardwareAccelerated()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V init(Landroid/content/Context;Landroid/util/AttributeSet;II)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: Landroid/graphics/drawable/Drawable; getDrawable()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: I getProgressStyle()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: Landroid/content/res/ColorStateList; getProgressTintList()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: Landroid/graphics/PorterDuff$Mode; getProgressTintMode()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: Z getShowTrack()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: Z getUseIntrinsicPadding()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V onAttachedToWindow()>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setIndeterminateDrawable(Landroid/graphics/drawable/Drawable;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setProgressDrawable(Landroid/graphics/drawable/Drawable;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setProgressTintList(Landroid/content/res/ColorStateList;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setProgressTintMode(Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setShowTrack(Z)>
<me.zhanghai.android.materialprogressbar.MaterialProgressBar: V setUseIntrinsicPadding(Z)>
<me.zhanghai.android.materialprogressbar.R$anim: V <init>()>
<me.zhanghai.android.materialprogressbar.R$attr: V <init>()>
<me.zhanghai.android.materialprogressbar.R$bool: V <init>()>
<me.zhanghai.android.materialprogressbar.R$color: V <init>()>
<me.zhanghai.android.materialprogressbar.R$dimen: V <init>()>
<me.zhanghai.android.materialprogressbar.R$drawable: V <init>()>
<me.zhanghai.android.materialprogressbar.R$id: V <init>()>
<me.zhanghai.android.materialprogressbar.R$integer: V <init>()>
<me.zhanghai.android.materialprogressbar.R$layout: V <init>()>
<me.zhanghai.android.materialprogressbar.R$string: V <init>()>
<me.zhanghai.android.materialprogressbar.R$style: V <init>()>
<me.zhanghai.android.materialprogressbar.R$styleable: V <clinit>()>
<me.zhanghai.android.materialprogressbar.R$styleable: V <init>()>
<me.zhanghai.android.materialprogressbar.R: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.DrawableCompat: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.DrawableCompat: Landroid/graphics/PorterDuff$Mode; parseTintMode(ILandroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Landroid/util/Property;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Ljava/lang/String;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompat: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: V calculateXYValues(Landroid/graphics/Path;[F[F)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: V calculateXYValues(Landroid/graphics/Path;[I[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Landroid/util/Property;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Ljava/lang/String;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatBase: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Landroid/util/Property;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofArgb(Ljava/lang/Object;Ljava/lang/String;[I)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofFloat(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Landroid/util/Property;Landroid/util/Property;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ObjectAnimatorCompatLollipop: Landroid/animation/ObjectAnimator; ofInt(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)>
<me.zhanghai.android.materialprogressbar.internal.ThemeUtils: V <init>()>
<me.zhanghai.android.materialprogressbar.internal.ThemeUtils: I getColorFromAttrRes(ILandroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.internal.ThemeUtils: F getFloatFromAttrRes(ILandroid/content/Context;)>
<org.acra.ACRA$1: V <init>()>
<org.acra.ACRA$1: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<org.acra.ACRA$2: V <clinit>()>
<org.acra.ACRA: V <clinit>()>
<org.acra.ACRA: V <init>()>
<org.acra.ACRA: Z access$000(Landroid/content/SharedPreferences;)>
<org.acra.ACRA: V checkCrashResources(Lorg/acra/annotation/ReportsCrashes;)>
<org.acra.ACRA: Landroid/content/SharedPreferences; getACRASharedPreferences()>
<org.acra.ACRA: Landroid/app/Application; getApplication()>
<org.acra.ACRA: Lorg/acra/ACRAConfiguration; getConfig()>
<org.acra.ACRA: Lorg/acra/ErrorReporter; getErrorReporter()>
<org.acra.ACRA: Lorg/acra/ACRAConfiguration; getNewDefaultConfig(Landroid/app/Application;)>
<org.acra.ACRA: V init(Landroid/app/Application;)>
<org.acra.ACRA: V init(Landroid/app/Application;Lorg/acra/ACRAConfiguration;)>
<org.acra.ACRA: V init(Landroid/app/Application;Lorg/acra/ACRAConfiguration;Z)>
<org.acra.ACRA: Z isDebuggable()>
<org.acra.ACRA: V setConfig(Lorg/acra/ACRAConfiguration;)>
<org.acra.ACRA: V setLog(Lorg/acra/log/ACRALog;)>
<org.acra.ACRA: Z shouldDisableACRA(Landroid/content/SharedPreferences;)>
<org.acra.ACRAConfigurationException: V <init>(Ljava/lang/String;)>
<org.acra.ACRAConstants: V <clinit>()>
<org.acra.ACRAConstants: V <init>()>
<org.acra.BaseCrashReportDialog: V <init>()>
<org.acra.BaseCrashReportDialog: V cancelReports()>
<org.acra.BaseCrashReportDialog: V onCreate(Landroid/os/Bundle;)>
<org.acra.BaseCrashReportDialog: V sendCrash(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.CrashReportFileNameParser: V <init>()>
<org.acra.CrashReportFileNameParser: Z isApproved(Ljava/lang/String;)>
<org.acra.CrashReportFileNameParser: Z isSilent(Ljava/lang/String;)>
<org.acra.CrashReportFinder$1: V <init>(Lorg/acra/CrashReportFinder;)>
<org.acra.CrashReportFinder$1: Z accept(Ljava/io/File;Ljava/lang/String;)>
<org.acra.CrashReportFinder: V <init>(Landroid/content/Context;)>
<org.acra.CrashReportFinder: [Ljava/lang/String; getCrashReportFiles()>
<org.acra.CrashReportPersister: V <init>(Landroid/content/Context;)>
<org.acra.CrashReportPersister: V dumpString(Ljava/lang/StringBuilder;Ljava/lang/String;Z)>
<org.acra.CrashReportPersister: Z isEbcdic(Ljava/io/BufferedInputStream;)>
<org.acra.CrashReportPersister: Lorg/acra/collector/CrashReportData; load(Ljava/io/Reader;)>
<org.acra.CrashReportPersister: Lorg/acra/collector/CrashReportData; load(Ljava/lang/String;)>
<org.acra.CrashReportPersister: V store(Lorg/acra/collector/CrashReportData;Ljava/lang/String;)>
<org.acra.ErrorReporter$3: V <init>(Lorg/acra/ErrorReporter;Lorg/acra/ErrorReporter$TimeHelper;)>
<org.acra.ErrorReporter$3: V run()>
<org.acra.ErrorReporter$4: V <init>(Lorg/acra/ErrorReporter;Lorg/acra/ErrorReporter$TimeHelper;)>
<org.acra.ErrorReporter$4: V run()>
<org.acra.ErrorReporter$5: V <init>(Lorg/acra/ErrorReporter;Lorg/acra/SendWorker;ZLjava/lang/String;Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$5: V run()>
<org.acra.ErrorReporter$ReportBuilder: V <init>(Lorg/acra/ErrorReporter;)>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; access$100(Lorg/acra/ErrorReporter$ReportBuilder;Ljava/lang/Thread;)>
<org.acra.ErrorReporter$ReportBuilder: Z access$200(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: Ljava/lang/String; access$500(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: Ljava/lang/Throwable; access$600(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: Ljava/util/Map; access$700(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: Ljava/lang/Thread; access$800(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: Z access$900(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter$ReportBuilder: V initCustomData()>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; uncaughtExceptionThread(Ljava/lang/Thread;)>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; customData(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; customData(Ljava/util/Map;)>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; endsApplication()>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; exception(Ljava/lang/Throwable;)>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; forceSilent()>
<org.acra.ErrorReporter$ReportBuilder: Lorg/acra/ErrorReporter$ReportBuilder; message(Ljava/lang/String;)>
<org.acra.ErrorReporter$ReportBuilder: V send()>
<org.acra.ErrorReporter$TimeHelper: V <init>()>
<org.acra.ErrorReporter$TimeHelper: V <init>(Lorg/acra/ErrorReporter$1;)>
<org.acra.ErrorReporter$TimeHelper: Ljava/lang/Long; access$1000(Lorg/acra/ErrorReporter$TimeHelper;)>
<org.acra.ErrorReporter$TimeHelper: J getElapsedTime()>
<org.acra.ErrorReporter$TimeHelper: V setInitialTimeMillis(J)>
<org.acra.ErrorReporter: V <clinit>()>
<org.acra.ErrorReporter: V <init>(Landroid/app/Application;Landroid/content/SharedPreferences;Z)>
<org.acra.ErrorReporter: Ljava/lang/ref/WeakReference; access$002(Lorg/acra/ErrorReporter;Ljava/lang/ref/WeakReference;)>
<org.acra.ErrorReporter: Z access$1100(Lorg/acra/ErrorReporter;)>
<org.acra.ErrorReporter: Z access$1102(Lorg/acra/ErrorReporter;Z)>
<org.acra.ErrorReporter: Landroid/content/Intent; access$1200(Lorg/acra/ErrorReporter;Ljava/lang/String;Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter: V access$1300(Lorg/acra/ErrorReporter;Ljava/lang/Thread;Ljava/lang/Throwable;)>
<org.acra.ErrorReporter: V access$1400(Lorg/acra/ErrorReporter;Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter: Landroid/app/Application; access$400(Lorg/acra/ErrorReporter;)>
<org.acra.ErrorReporter: Z containsOnlySilentOrApprovedReports([Ljava/lang/String;)>
<org.acra.ErrorReporter: Landroid/content/Intent; createCrashReportDialogIntent(Ljava/lang/String;Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter: V createNotification(Ljava/lang/String;Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter: V deletePendingReports(ZZI)>
<org.acra.ErrorReporter: V endApplication(Ljava/lang/Thread;Ljava/lang/Throwable;)>
<org.acra.ErrorReporter: Lorg/acra/ErrorReporter; getInstance()>
<org.acra.ErrorReporter: Ljava/lang/String; getReportFileName(Lorg/acra/collector/CrashReportData;)>
<org.acra.ErrorReporter: V report(Lorg/acra/ErrorReporter$ReportBuilder;)>
<org.acra.ErrorReporter: V saveCrashReportFile(Ljava/lang/String;Lorg/acra/collector/CrashReportData;)>
<org.acra.ErrorReporter: V addCustomData(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.ErrorReporter: V addReportSender(Lorg/acra/sender/ReportSender;)>
<org.acra.ErrorReporter: V checkReportsOnApplicationStart()>
<org.acra.ErrorReporter: V clearCustomData()>
<org.acra.ErrorReporter: V deletePendingNonApprovedReports(Z)>
<org.acra.ErrorReporter: V deletePendingReports()>
<org.acra.ErrorReporter: Ljava/lang/String; getCustomData(Ljava/lang/String;)>
<org.acra.ErrorReporter: V handleException(Ljava/lang/Throwable;)>
<org.acra.ErrorReporter: V handleException(Ljava/lang/Throwable;Z)>
<org.acra.ErrorReporter: V handleSilentException(Ljava/lang/Throwable;)>
<org.acra.ErrorReporter: Ljava/lang/String; putCustomData(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.ErrorReporter: V removeAllReportSenders()>
<org.acra.ErrorReporter: Ljava/lang/String; removeCustomData(Ljava/lang/String;)>
<org.acra.ErrorReporter: V removeReportSender(Lorg/acra/sender/ReportSender;)>
<org.acra.ErrorReporter: V removeReportSenders(Ljava/lang/Class;)>
<org.acra.ErrorReporter: Lorg/acra/ErrorReporter$ReportBuilder; reportBuilder()>
<org.acra.ErrorReporter: V setDefaultReportSenders()>
<org.acra.ErrorReporter: V setEnabled(Z)>
<org.acra.ErrorReporter: V setExceptionHandlerInitializer(Lorg/acra/ExceptionHandlerInitializer;)>
<org.acra.ErrorReporter: V setReportSender(Lorg/acra/sender/ReportSender;)>
<org.acra.ErrorReporter: Lorg/acra/SendWorker; startSendingReports(ZZ)>
<org.acra.ErrorReporter: V uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)>
<org.acra.ReportField: V <clinit>()>
<org.acra.ReportField: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField: V <init>(Ljava/lang/String;ILorg/acra/ReportField$1;)>
<org.acra.ReportField: Lorg/acra/ReportField; valueOf(Ljava/lang/String;)>
<org.acra.ReportField: [Lorg/acra/ReportField; values()>
<org.acra.ReportField: Z containsKeyValuePairs()>
<org.acra.ReportingInteractionMode: V <clinit>()>
<org.acra.ReportingInteractionMode: V <init>(Ljava/lang/String;I)>
<org.acra.ReportingInteractionMode: Lorg/acra/ReportingInteractionMode; valueOf(Ljava/lang/String;)>
<org.acra.ReportingInteractionMode: [Lorg/acra/ReportingInteractionMode; values()>
<org.acra.SendWorker: V <init>(Landroid/content/Context;Ljava/util/List;ZZ)>
<org.acra.SendWorker: V approvePendingReports()>
<org.acra.SendWorker: V checkAndSendReports(Landroid/content/Context;Z)>
<org.acra.SendWorker: V deleteFile(Landroid/content/Context;Ljava/lang/String;)>
<org.acra.SendWorker: V sendCrashReport(Lorg/acra/collector/CrashReportData;)>
<org.acra.SendWorker: V run()>
<org.acra.collector.CollectorUtil: V <init>()>
<org.acra.collector.CollectorUtil: V safeClose(Ljava/io/Reader;)>
<org.acra.collector.Compatibility: V <init>()>
<org.acra.collector.Compatibility: I getAPILevel()>
<org.acra.collector.Compatibility: Ljava/lang/String; getDropBoxServiceName()>
<org.acra.collector.ConfigurationCollector: V <init>()>
<org.acra.collector.ConfigurationCollector: Ljava/lang/String; activeFlags(Landroid/util/SparseArray;I)>
<org.acra.collector.ConfigurationCollector: Ljava/lang/String; collectConfiguration(Landroid/content/Context;)>
<org.acra.collector.ConfigurationCollector: Ljava/lang/String; getFieldValueName(Landroid/content/res/Configuration;Ljava/lang/reflect/Field;)>
<org.acra.collector.ConfigurationCollector: Ljava/lang/String; toString(Landroid/content/res/Configuration;)>
<org.acra.collector.CrashReportData: V <init>()>
<org.acra.collector.CrashReportData: Ljava/lang/String; getProperty(Lorg/acra/ReportField;)>
<org.acra.collector.CrashReportData: Lorg/json/JSONObject; toJSON()>
<org.acra.collector.CrashReportDataFactory: V <init>(Landroid/content/Context;Landroid/content/SharedPreferences;Landroid/text/format/Time;Ljava/lang/String;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; createCustomInfoString(Ljava/util/Map;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/Class; getBuildConfigClass()>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; getStackTrace(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; getStackTraceHash(Ljava/lang/Throwable;)>
<org.acra.collector.CrashReportDataFactory: V clearCustomData()>
<org.acra.collector.CrashReportDataFactory: Lorg/acra/collector/CrashReportData; createCrashData(Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/Map;ZLjava/lang/Thread;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; getCustomData(Ljava/lang/String;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; putCustomData(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.collector.CrashReportDataFactory: Ljava/lang/String; removeCustomData(Ljava/lang/String;)>
<org.acra.collector.DeviceFeaturesCollector: V <init>()>
<org.acra.collector.DeviceFeaturesCollector: Ljava/lang/String; getFeatures(Landroid/content/Context;)>
<org.acra.collector.DisplayManagerCollector: V <clinit>()>
<org.acra.collector.DisplayManagerCollector: V <init>()>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/String; activeFlags(Landroid/util/SparseArray;I)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/String; collectCurrentSizeRange(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectDisplayData(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/String; collectDisplays(Landroid/content/Context;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/String; collectFlags(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectIsValid(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectMetrics(Landroid/view/Display;Ljava/lang/String;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/String; collectName(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectRectSize(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectRotation(Landroid/view/Display;)>
<org.acra.collector.DisplayManagerCollector: Ljava/lang/Object; collectSize(Landroid/view/Display;Ljava/lang/String;)>
<org.acra.collector.DropBoxCollector: V <clinit>()>
<org.acra.collector.DropBoxCollector: V <init>()>
<org.acra.collector.DropBoxCollector: Ljava/lang/String; read(Landroid/content/Context;[Ljava/lang/String;)>
<org.acra.collector.DumpSysCollector: V <init>()>
<org.acra.collector.DumpSysCollector: Ljava/lang/String; collectMemInfo()>
<org.acra.collector.LogCatCollector$1: V <init>(Ljava/lang/Process;)>
<org.acra.collector.LogCatCollector$1: V run()>
<org.acra.collector.LogCatCollector: V <init>()>
<org.acra.collector.LogCatCollector: Ljava/lang/String; collectLogCat(Ljava/lang/String;)>
<org.acra.collector.LogFileCollector: V <init>()>
<org.acra.collector.LogFileCollector: Ljava/lang/String; collectLogFile(Landroid/content/Context;Ljava/lang/String;I)>
<org.acra.collector.MediaCodecListCollector$1: V <clinit>()>
<org.acra.collector.MediaCodecListCollector$CodecType: V <clinit>()>
<org.acra.collector.MediaCodecListCollector$CodecType: V <init>(Ljava/lang/String;I)>
<org.acra.collector.MediaCodecListCollector$CodecType: Lorg/acra/collector/MediaCodecListCollector$CodecType; valueOf(Ljava/lang/String;)>
<org.acra.collector.MediaCodecListCollector$CodecType: [Lorg/acra/collector/MediaCodecListCollector$CodecType; values()>
<org.acra.collector.MediaCodecListCollector: V <clinit>()>
<org.acra.collector.MediaCodecListCollector: V <init>()>
<org.acra.collector.MediaCodecListCollector: Ljava/lang/String; collecMediaCodecList()>
<org.acra.collector.MediaCodecListCollector: Ljava/lang/String; collectCapabilitiesForType(Ljava/lang/Object;Ljava/lang/String;)>
<org.acra.collector.MediaCodecListCollector: Lorg/acra/collector/MediaCodecListCollector$CodecType; identifyCodecType(Ljava/lang/Object;)>
<org.acra.collector.ReflectionCollector: V <init>()>
<org.acra.collector.ReflectionCollector: Ljava/lang/String; collectConstants(Ljava/lang/Class;)>
<org.acra.collector.ReflectionCollector: Ljava/lang/String; collectConstants(Ljava/lang/Class;Ljava/lang/String;)>
<org.acra.collector.ReflectionCollector: Ljava/lang/String; collectStaticGettersResults(Ljava/lang/Class;)>
<org.acra.collector.SettingsCollector: V <init>()>
<org.acra.collector.SettingsCollector: Ljava/lang/String; collectGlobalSettings(Landroid/content/Context;)>
<org.acra.collector.SettingsCollector: Ljava/lang/String; collectSecureSettings(Landroid/content/Context;)>
<org.acra.collector.SettingsCollector: Ljava/lang/String; collectSystemSettings(Landroid/content/Context;)>
<org.acra.collector.SettingsCollector: Z isAuthorized(Ljava/lang/reflect/Field;)>
<org.acra.collector.SharedPreferencesCollector: V <init>()>
<org.acra.collector.SharedPreferencesCollector: Ljava/lang/String; collect(Landroid/content/Context;)>
<org.acra.collector.SharedPreferencesCollector: Z filteredKey(Ljava/lang/String;)>
<org.acra.collector.ThreadCollector: V <init>()>
<org.acra.collector.ThreadCollector: Ljava/lang/String; collect(Ljava/lang/Thread;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V <init>(Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: Z equals(Ljava/lang/Object;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: I hashCode()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityDestroyed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityPaused(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityResumed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityStarted(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksWrapper: V onActivityStopped(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V <clinit>()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V <init>()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V postIcsRegisterActivityLifecycleCallbacks(Landroid/app/Application;Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V postIcsUnregisterActivityLifecycleCallbacks(Landroid/app/Application;Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V preIcsRegisterActivityLifecycleCallbacks(Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V preIcsUnregisterActivityLifecycleCallbacks(Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V registerActivityLifecycleCallbacks(Landroid/app/Application;Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper: V unregisterActivityLifecycleCallbacks(Landroid/app/Application;Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.sender.HttpSender$1: V <clinit>()>
<org.acra.sender.HttpSender$Method: V <clinit>()>
<org.acra.sender.HttpSender$Method: V <init>(Ljava/lang/String;I)>
<org.acra.sender.HttpSender$Method: Lorg/acra/sender/HttpSender$Method; valueOf(Ljava/lang/String;)>
<org.acra.sender.HttpSender$Method: [Lorg/acra/sender/HttpSender$Method; values()>
<org.acra.sender.HttpSender$Type: V <clinit>()>
<org.acra.sender.HttpSender$Type: V <init>(Ljava/lang/String;I)>
<org.acra.sender.HttpSender$Type: V <init>(Ljava/lang/String;ILorg/acra/sender/HttpSender$1;)>
<org.acra.sender.HttpSender$Type: Lorg/acra/sender/HttpSender$Type; valueOf(Ljava/lang/String;)>
<org.acra.sender.HttpSender$Type: [Lorg/acra/sender/HttpSender$Type; values()>
<org.acra.sender.ReportSenderException: V <init>(Ljava/lang/String;)>
<org.acra.sender.ReportSenderException: V <init>(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.util.BoundedLinkedList: V <init>(I)>
<org.acra.util.BoundedLinkedList: V add(ILjava/lang/Object;)>
<org.acra.util.BoundedLinkedList: Z add(Ljava/lang/Object;)>
<org.acra.util.BoundedLinkedList: Z addAll(ILjava/util/Collection;)>
<org.acra.util.BoundedLinkedList: Z addAll(Ljava/util/Collection;)>
<org.acra.util.BoundedLinkedList: V addFirst(Ljava/lang/Object;)>
<org.acra.util.BoundedLinkedList: V addLast(Ljava/lang/Object;)>
<org.acra.util.BoundedLinkedList: Ljava/lang/String; toString()>
<org.acra.util.FakeSocketFactory: V <init>()>
<org.acra.util.FakeSocketFactory: Ljavax/net/ssl/SSLContext; createEasySSLContext()>
<org.acra.util.FakeSocketFactory: Ljavax/net/ssl/SSLContext; getSSLContext()>
<org.acra.util.FakeSocketFactory: Ljava/net/Socket; connectSocket(Ljava/net/Socket;Ljava/lang/String;ILjava/net/InetAddress;ILorg/apache/http/params/HttpParams;)>
<org.acra.util.FakeSocketFactory: Ljava/net/Socket; createSocket()>
<org.acra.util.FakeSocketFactory: Ljava/net/Socket; createSocket(Ljava/net/Socket;Ljava/lang/String;IZ)>
<org.acra.util.FakeSocketFactory: Z isSecure(Ljava/net/Socket;)>
<org.acra.util.HttpRequest$1: V <clinit>()>
<org.acra.util.HttpRequest$SocketTimeOutRetryHandler: V <init>(Lorg/apache/http/params/HttpParams;I)>
<org.acra.util.HttpRequest$SocketTimeOutRetryHandler: V <init>(Lorg/apache/http/params/HttpParams;ILorg/acra/util/HttpRequest$1;)>
<org.acra.util.HttpRequest$SocketTimeOutRetryHandler: Z retryRequest(Ljava/io/IOException;ILorg/apache/http/protocol/HttpContext;)>
<org.acra.util.HttpRequest: V <init>()>
<org.acra.util.HttpRequest: Lorg/apache/http/auth/UsernamePasswordCredentials; getCredentials()>
<org.acra.util.HttpRequest: Lorg/apache/http/client/HttpClient; getHttpClient(Landroid/content/Context;)>
<org.acra.util.HttpRequest: Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase; getHttpRequest(Ljava/net/URL;Lorg/acra/sender/HttpSender$Method;Ljava/lang/String;Lorg/acra/sender/HttpSender$Type;)>
<org.acra.util.HttpRequest: Ljava/lang/String; getParamsAsFormString(Ljava/util/Map;)>
<org.acra.util.HttpRequest: V send(Landroid/content/Context;Ljava/net/URL;Lorg/acra/sender/HttpSender$Method;Ljava/lang/String;Lorg/acra/sender/HttpSender$Type;)>
<org.acra.util.HttpRequest: V setConnectionTimeOut(I)>
<org.acra.util.HttpRequest: V setHeaders(Ljava/util/Map;)>
<org.acra.util.HttpRequest: V setLogin(Ljava/lang/String;)>
<org.acra.util.HttpRequest: V setMaxNrRetries(I)>
<org.acra.util.HttpRequest: V setPassword(Ljava/lang/String;)>
<org.acra.util.HttpRequest: V setSocketTimeOut(I)>
<org.acra.util.Installation: V <init>()>
<org.acra.util.Installation: Ljava/lang/String; id(Landroid/content/Context;)>
<org.acra.util.Installation: Ljava/lang/String; readInstallationFile(Ljava/io/File;)>
<org.acra.util.Installation: V writeInstallationFile(Ljava/io/File;)>
<org.acra.util.JSONReportBuilder$JSONReportException: V <init>(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.util.JSONReportBuilder: V <init>()>
<org.acra.util.JSONReportBuilder: V addJSONFromProperty(Lorg/json/JSONObject;Ljava/lang/String;)>
<org.acra.util.JSONReportBuilder: V addJSONSubTree(Lorg/json/JSONObject;[Ljava/lang/String;Ljava/lang/Object;)>
<org.acra.util.JSONReportBuilder: Lorg/json/JSONObject; buildJSONReport(Lorg/acra/collector/CrashReportData;)>
<org.acra.util.JSONReportBuilder: Ljava/lang/Object; guessType(Ljava/lang/String;)>
<org.acra.util.NaiveTrustManager: V <init>()>
<org.acra.util.NaiveTrustManager: V checkClientTrusted([Ljava/security/cert/X509Certificate;Ljava/lang/String;)>
<org.acra.util.NaiveTrustManager: V checkServerTrusted([Ljava/security/cert/X509Certificate;Ljava/lang/String;)>
<org.acra.util.NaiveTrustManager: [Ljava/security/cert/X509Certificate; getAcceptedIssuers()>
<org.acra.util.PackageManagerWrapper: V <init>(Landroid/content/Context;)>
<org.acra.util.PackageManagerWrapper: Landroid/content/pm/PackageInfo; getPackageInfo()>
<org.acra.util.PackageManagerWrapper: Z hasPermission(Ljava/lang/String;)>
<org.acra.util.ReflectionException: V <init>(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.util.ReflectionHelper: V <init>()>
<org.acra.util.ReflectionHelper: Ljava/lang/Object; create(Ljava/lang/String;)>
<org.acra.util.ReportUtils: V <init>()>
<org.acra.util.ReportUtils: Ljava/lang/String; getApplicationFilePath(Landroid/content/Context;)>
<org.acra.util.ReportUtils: J getAvailableInternalMemorySize()>
<org.acra.util.ReportUtils: Ljava/lang/String; getDeviceId(Landroid/content/Context;)>
<org.acra.util.ReportUtils: Ljava/lang/String; getLocalIpAddress()>
<org.acra.util.ReportUtils: Ljava/lang/String; getTimeString(Landroid/text/format/Time;)>
<org.acra.util.ReportUtils: J getTotalInternalMemorySize()>
<org.acra.util.ReportUtils: Ljava/lang/String; sparseArrayToString(Landroid/util/SparseArray;)>
<org.acra.util.TlsSniSocketFactory: V <clinit>()>
<org.acra.util.TlsSniSocketFactory: V <init>()>
<org.acra.util.TlsSniSocketFactory: V establishAndVerify(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)>
<org.acra.util.TlsSniSocketFactory: V setSniHostname(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)>
<org.acra.util.TlsSniSocketFactory: V setTlsParameters(Ljavax/net/ssl/SSLSocket;)>
<org.acra.util.TlsSniSocketFactory: Ljava/net/Socket; connectSocket(Ljava/net/Socket;Ljava/lang/String;ILjava/net/InetAddress;ILorg/apache/http/params/HttpParams;)>
<org.acra.util.TlsSniSocketFactory: Ljava/net/Socket; createSocket()>
<org.acra.util.TlsSniSocketFactory: Ljava/net/Socket; createSocket(Ljava/net/Socket;Ljava/lang/String;IZ)>
<org.acra.util.TlsSniSocketFactory: Z isSecure(Ljava/net/Socket;)>
<org.acra.util.ToastSender: V <init>()>
<org.acra.util.ToastSender: V sendToast(Landroid/content/Context;II)>
<timber.log.Timber: V <clinit>()>
<timber.log.Timber: V <init>()>
<timber.log.Timber: Ltimber/log/Timber$Tree; asTree()>
<timber.log.Timber: V d(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V e(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V i(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V plant(Ltimber/log/Timber$Tree;)>
<timber.log.Timber: Ltimber/log/Timber$Tree; tag(Ljava/lang/String;)>
<timber.log.Timber: V uproot(Ltimber/log/Timber$Tree;)>
<timber.log.Timber: V uprootAll()>
<timber.log.Timber: V v(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V w(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber: V w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<android.support.customtabs.CustomTabsClient$1: V <init>(Landroid/content/Context;)>
<android.support.customtabs.CustomTabsClient$1: V onCustomTabsServiceConnected(Landroid/content/ComponentName;Landroid/support/customtabs/CustomTabsClient;)>
<android.support.customtabs.CustomTabsClient$1: V onServiceDisconnected(Landroid/content/ComponentName;)>
<android.support.customtabs.CustomTabsServiceConnection$1: V <init>(Landroid/support/customtabs/CustomTabsServiceConnection;Landroid/support/customtabs/ICustomTabsService;Landroid/content/ComponentName;)>
<android.support.customtabs.CustomTabsSessionToken$1: V <init>(Landroid/support/customtabs/CustomTabsSessionToken;)>
<android.support.customtabs.CustomTabsSessionToken$1: V onNavigationEvent(ILandroid/os/Bundle;)>
<android.support.customtabs.ICustomTabsCallback$Stub$Proxy: V <init>(Landroid/os/IBinder;)>
<android.support.customtabs.ICustomTabsCallback$Stub$Proxy: Landroid/os/IBinder; asBinder()>
<android.support.customtabs.ICustomTabsCallback$Stub$Proxy: V extraCallback(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.ICustomTabsCallback$Stub$Proxy: Ljava/lang/String; getInterfaceDescriptor()>
<android.support.customtabs.ICustomTabsCallback$Stub$Proxy: V onNavigationEvent(ILandroid/os/Bundle;)>
<android.support.customtabs.ICustomTabsCallback$Stub: V <init>()>
<android.support.customtabs.ICustomTabsCallback$Stub: Landroid/support/customtabs/ICustomTabsCallback; asInterface(Landroid/os/IBinder;)>
<android.support.customtabs.ICustomTabsCallback$Stub: Landroid/os/IBinder; asBinder()>
<android.support.customtabs.ICustomTabsCallback$Stub: Z onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: V <init>(Landroid/os/IBinder;)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Landroid/os/IBinder; asBinder()>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Landroid/os/Bundle; extraCommand(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Ljava/lang/String; getInterfaceDescriptor()>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Z mayLaunchUrl(Landroid/support/customtabs/ICustomTabsCallback;Landroid/net/Uri;Landroid/os/Bundle;Ljava/util/List;)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Z newSession(Landroid/support/customtabs/ICustomTabsCallback;)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Z updateVisuals(Landroid/support/customtabs/ICustomTabsCallback;Landroid/os/Bundle;)>
<android.support.customtabs.ICustomTabsService$Stub$Proxy: Z warmup(J)>
<android.support.customtabs.ICustomTabsService$Stub: V <init>()>
<android.support.customtabs.ICustomTabsService$Stub: Landroid/support/customtabs/ICustomTabsService; asInterface(Landroid/os/IBinder;)>
<android.support.customtabs.ICustomTabsService$Stub: Landroid/os/IBinder; asBinder()>
<android.support.customtabs.ICustomTabsService$Stub: Z onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)>
<android.support.design.internal.BottomNavigationAnimationHelperIcs: V <init>()>
<android.support.design.internal.BottomNavigationAnimationHelperIcs: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.design.internal.BottomNavigationItemView: V <clinit>()>
<android.support.design.internal.BottomNavigationItemView: V <init>(Landroid/content/Context;)>
<android.support.design.internal.BottomNavigationItemView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.BottomNavigationItemView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.BottomNavigationItemView: Landroid/support/v7/view/menu/k; getItemData()>
<android.support.design.internal.BottomNavigationItemView: I getItemPosition()>
<android.support.design.internal.BottomNavigationItemView: V initialize(Landroid/support/v7/view/menu/k;I)>
<android.support.design.internal.BottomNavigationItemView: [I onCreateDrawableState(I)>
<android.support.design.internal.BottomNavigationItemView: Z prefersCondensedTitle()>
<android.support.design.internal.BottomNavigationItemView: V setCheckable(Z)>
<android.support.design.internal.BottomNavigationItemView: V setChecked(Z)>
<android.support.design.internal.BottomNavigationItemView: V setEnabled(Z)>
<android.support.design.internal.BottomNavigationItemView: V setIcon(Landroid/graphics/drawable/Drawable;)>
<android.support.design.internal.BottomNavigationItemView: V setIconTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.BottomNavigationItemView: V setItemBackground(I)>
<android.support.design.internal.BottomNavigationItemView: V setItemPosition(I)>
<android.support.design.internal.BottomNavigationItemView: V setShiftingMode(Z)>
<android.support.design.internal.BottomNavigationItemView: V setShortcut(ZC)>
<android.support.design.internal.BottomNavigationItemView: V setTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.BottomNavigationItemView: V setTitle(Ljava/lang/CharSequence;)>
<android.support.design.internal.BottomNavigationItemView: Z showsIcon()>
<android.support.design.internal.BottomNavigationMenuView: V <clinit>()>
<android.support.design.internal.BottomNavigationMenuView: V <init>(Landroid/content/Context;)>
<android.support.design.internal.BottomNavigationMenuView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.BottomNavigationMenuView: Landroid/support/design/internal/BottomNavigationPresenter; access$000(Landroid/support/design/internal/BottomNavigationMenuView;)>
<android.support.design.internal.BottomNavigationMenuView: Landroid/support/v7/view/menu/h; access$100(Landroid/support/design/internal/BottomNavigationMenuView;)>
<android.support.design.internal.BottomNavigationMenuView: V access$200(Landroid/support/design/internal/BottomNavigationMenuView;I)>
<android.support.design.internal.BottomNavigationMenuView: V activateNewButton(I)>
<android.support.design.internal.BottomNavigationMenuView: Landroid/support/design/internal/BottomNavigationItemView; getNewItem()>
<android.support.design.internal.BottomNavigationMenuView: V buildMenuView()>
<android.support.design.internal.BottomNavigationMenuView: Landroid/content/res/ColorStateList; getIconTintList()>
<android.support.design.internal.BottomNavigationMenuView: I getItemBackgroundRes()>
<android.support.design.internal.BottomNavigationMenuView: Landroid/content/res/ColorStateList; getItemTextColor()>
<android.support.design.internal.BottomNavigationMenuView: I getWindowAnimations()>
<android.support.design.internal.BottomNavigationMenuView: V initialize(Landroid/support/v7/view/menu/h;)>
<android.support.design.internal.BottomNavigationMenuView: V onLayout(ZIIII)>
<android.support.design.internal.BottomNavigationMenuView: V onMeasure(II)>
<android.support.design.internal.BottomNavigationMenuView: V setIconTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.BottomNavigationMenuView: V setItemBackgroundRes(I)>
<android.support.design.internal.BottomNavigationMenuView: V setItemTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.BottomNavigationMenuView: V setPresenter(Landroid/support/design/internal/BottomNavigationPresenter;)>
<android.support.design.internal.BottomNavigationMenuView: V updateMenuView()>
<android.support.design.internal.BottomNavigationPresenter: V <init>()>
<android.support.design.internal.BottomNavigationPresenter: Z collapseItemActionView(Landroid/support/v7/view/menu/h;Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.BottomNavigationPresenter: Z expandItemActionView(Landroid/support/v7/view/menu/h;Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.BottomNavigationPresenter: Z flagActionItems()>
<android.support.design.internal.BottomNavigationPresenter: I getId()>
<android.support.design.internal.BottomNavigationPresenter: Landroid/support/v7/view/menu/q; getMenuView(Landroid/view/ViewGroup;)>
<android.support.design.internal.BottomNavigationPresenter: V initForMenu(Landroid/content/Context;Landroid/support/v7/view/menu/h;)>
<android.support.design.internal.BottomNavigationPresenter: V onCloseMenu(Landroid/support/v7/view/menu/h;Z)>
<android.support.design.internal.BottomNavigationPresenter: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<android.support.design.internal.BottomNavigationPresenter: Landroid/os/Parcelable; onSaveInstanceState()>
<android.support.design.internal.BottomNavigationPresenter: Z onSubMenuSelected(Landroid/support/v7/view/menu/v;)>
<android.support.design.internal.BottomNavigationPresenter: V setBottomNavigationMenuView(Landroid/support/design/internal/BottomNavigationMenuView;)>
<android.support.design.internal.BottomNavigationPresenter: V setCallback(Landroid/support/v7/view/menu/p$a;)>
<android.support.design.internal.BottomNavigationPresenter: V setUpdateSuspended(Z)>
<android.support.design.internal.BottomNavigationPresenter: V updateMenuView(Z)>
<android.support.design.internal.ForegroundLinearLayout: V <init>(Landroid/content/Context;)>
<android.support.design.internal.ForegroundLinearLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.ForegroundLinearLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.ForegroundLinearLayout: V draw(Landroid/graphics/Canvas;)>
<android.support.design.internal.ForegroundLinearLayout: V drawableHotspotChanged(FF)>
<android.support.design.internal.ForegroundLinearLayout: V drawableStateChanged()>
<android.support.design.internal.ForegroundLinearLayout: Landroid/graphics/drawable/Drawable; getForeground()>
<android.support.design.internal.ForegroundLinearLayout: I getForegroundGravity()>
<android.support.design.internal.ForegroundLinearLayout: V jumpDrawablesToCurrentState()>
<android.support.design.internal.ForegroundLinearLayout: V onLayout(ZIIII)>
<android.support.design.internal.ForegroundLinearLayout: V onSizeChanged(IIII)>
<android.support.design.internal.ForegroundLinearLayout: V setForeground(Landroid/graphics/drawable/Drawable;)>
<android.support.design.internal.ForegroundLinearLayout: V setForegroundGravity(I)>
<android.support.design.internal.ForegroundLinearLayout: Z verifyDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.internal.NavigationMenuItemView$1: V <init>(Landroid/support/design/internal/NavigationMenuItemView;)>
<android.support.design.internal.NavigationMenuItemView$1: V onInitializeAccessibilityNodeInfo(Landroid/view/View;Landroid/support/v4/view/accessibility/AccessibilityNodeInfoCompat;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V <init>(Landroid/support/design/internal/NavigationMenuPresenter;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V appendTransparentIconIfMissing(II)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V prepareMenuItems()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: Landroid/os/Bundle; createInstanceState()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: I getItemCount()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: J getItemId(I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: I getItemViewType(I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V onBindViewHolder(Landroid/support/design/internal/NavigationMenuPresenter$ViewHolder;I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V onBindViewHolder(Landroid/support/v7/widget/RecyclerView$ViewHolder;I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: Landroid/support/design/internal/NavigationMenuPresenter$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: Landroid/support/v7/widget/RecyclerView$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V onViewRecycled(Landroid/support/design/internal/NavigationMenuPresenter$ViewHolder;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V onViewRecycled(Landroid/support/v7/widget/RecyclerView$ViewHolder;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V restoreInstanceState(Landroid/os/Bundle;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V setCheckedItem(Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V setUpdateSuspended(Z)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuAdapter: V update()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuHeaderItem: V <init>()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuSeparatorItem: V <init>(II)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuSeparatorItem: I getPaddingBottom()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuSeparatorItem: I getPaddingTop()>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuTextItem: V <init>(Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.NavigationMenuPresenter$NavigationMenuTextItem: Landroid/support/v7/view/menu/k; getMenuItem()>
<android.support.design.internal.NavigationMenuPresenter$ViewHolder: V <init>(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuPresenter: V <init>()>
<android.support.design.internal.NavigationMenuPresenter: I a()>
<android.support.design.internal.NavigationMenuPresenter: V a(I)>
<android.support.design.internal.NavigationMenuPresenter: V a(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.NavigationMenuPresenter: V a(Landroid/graphics/drawable/Drawable;)>
<android.support.design.internal.NavigationMenuPresenter: V a(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.internal.NavigationMenuPresenter: V a(Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.NavigationMenuPresenter: V a(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuPresenter: V a(Z)>
<android.support.design.internal.NavigationMenuPresenter: Landroid/content/res/ColorStateList; b()>
<android.support.design.internal.NavigationMenuPresenter: Landroid/view/View; b(I)>
<android.support.design.internal.NavigationMenuPresenter: V b(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.NavigationMenuPresenter: V b(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuPresenter: Landroid/content/res/ColorStateList; c()>
<android.support.design.internal.NavigationMenuPresenter: Landroid/view/View; c(I)>
<android.support.design.internal.NavigationMenuPresenter: Z collapseItemActionView(Landroid/support/v7/view/menu/h;Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.NavigationMenuPresenter: Landroid/graphics/drawable/Drawable; d()>
<android.support.design.internal.NavigationMenuPresenter: V d(I)>
<android.support.design.internal.NavigationMenuPresenter: Z expandItemActionView(Landroid/support/v7/view/menu/h;Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.NavigationMenuPresenter: Z flagActionItems()>
<android.support.design.internal.NavigationMenuPresenter: I getId()>
<android.support.design.internal.NavigationMenuPresenter: Landroid/support/v7/view/menu/q; getMenuView(Landroid/view/ViewGroup;)>
<android.support.design.internal.NavigationMenuPresenter: V initForMenu(Landroid/content/Context;Landroid/support/v7/view/menu/h;)>
<android.support.design.internal.NavigationMenuPresenter: V onCloseMenu(Landroid/support/v7/view/menu/h;Z)>
<android.support.design.internal.NavigationMenuPresenter: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<android.support.design.internal.NavigationMenuPresenter: Landroid/os/Parcelable; onSaveInstanceState()>
<android.support.design.internal.NavigationMenuPresenter: Z onSubMenuSelected(Landroid/support/v7/view/menu/v;)>
<android.support.design.internal.NavigationMenuPresenter: V setCallback(Landroid/support/v7/view/menu/p$a;)>
<android.support.design.internal.NavigationMenuPresenter: V updateMenuView(Z)>
<android.support.design.internal.ParcelableSparseArray$1: V <init>()>
<android.support.design.internal.ParcelableSparseArray$1: Landroid/support/design/internal/ParcelableSparseArray; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.internal.ParcelableSparseArray$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.internal.ParcelableSparseArray$1: [Landroid/support/design/internal/ParcelableSparseArray; newArray(I)>
<android.support.design.internal.ParcelableSparseArray$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.internal.ScrimInsetsFrameLayout$1: V <init>(Landroid/support/design/internal/ScrimInsetsFrameLayout;)>
<android.support.design.internal.ScrimInsetsFrameLayout$1: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.internal.SnackbarContentLayout: V <init>(Landroid/content/Context;)>
<android.support.design.internal.SnackbarContentLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.SnackbarContentLayout: V updateTopBottomPadding(Landroid/view/View;II)>
<android.support.design.internal.SnackbarContentLayout: Z updateViewsWithinLayout(III)>
<android.support.design.internal.SnackbarContentLayout: V animateContentIn(II)>
<android.support.design.internal.SnackbarContentLayout: V animateContentOut(II)>
<android.support.design.internal.SnackbarContentLayout: Landroid/widget/Button; getActionView()>
<android.support.design.internal.SnackbarContentLayout: Landroid/widget/TextView; getMessageView()>
<android.support.design.internal.SnackbarContentLayout: V onFinishInflate()>
<android.support.design.internal.SnackbarContentLayout: V onMeasure(II)>
<android.support.design.widget.AppBarLayout$1: V <init>(Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$1: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.AppBarLayout$Behavior$1: V <init>(Landroid/support/design/widget/AppBarLayout$Behavior;Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior$1: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState$1: V <init>()>
<android.support.design.widget.AppBarLayout$Behavior$SavedState$1: Landroid/support/design/widget/AppBarLayout$Behavior$SavedState; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState$1: [Landroid/support/design/widget/AppBarLayout$Behavior$SavedState; newArray(I)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState: V <clinit>()>
<android.support.design.widget.AppBarLayout$Behavior$SavedState: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState: V <init>(Landroid/os/Parcelable;)>
<android.support.design.widget.AppBarLayout$Behavior$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.widget.BaseTransientBottomBar$2: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$2: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.BaseTransientBottomBar$3: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$3: V dismiss(I)>
<android.support.design.widget.BaseTransientBottomBar$3: V show()>
<android.support.design.widget.BaseTransientBottomBar$4: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$4: V onDismiss(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$4: V onDragStateChanged(I)>
<android.support.design.widget.BaseTransientBottomBar$5: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$5: V onViewAttachedToWindow(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$5: V onViewDetachedFromWindow(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$6: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$6: V onLayoutChange(Landroid/view/View;IIII)>
<android.support.design.widget.BottomNavigationView$1: V <init>(Landroid/support/design/widget/BottomNavigationView;)>
<android.support.design.widget.BottomNavigationView$1: Z onMenuItemSelected(Landroid/support/v7/view/menu/h;Landroid/view/MenuItem;)>
<android.support.design.widget.BottomNavigationView$1: V onMenuModeChange(Landroid/support/v7/view/menu/h;)>
<android.support.design.widget.BottomSheetBehavior$2: V <init>(Landroid/support/design/widget/BottomSheetBehavior;)>
<android.support.design.widget.BottomSheetBehavior$2: I clampViewPositionHorizontal(Landroid/view/View;II)>
<android.support.design.widget.BottomSheetBehavior$2: I clampViewPositionVertical(Landroid/view/View;II)>
<android.support.design.widget.BottomSheetBehavior$2: I getViewVerticalDragRange(Landroid/view/View;)>
<android.support.design.widget.BottomSheetBehavior$2: V onViewDragStateChanged(I)>
<android.support.design.widget.BottomSheetBehavior$2: V onViewPositionChanged(Landroid/view/View;IIII)>
<android.support.design.widget.BottomSheetBehavior$2: V onViewReleased(Landroid/view/View;FF)>
<android.support.design.widget.BottomSheetBehavior$2: Z tryCaptureView(Landroid/view/View;I)>
<android.support.design.widget.BottomSheetBehavior$SavedState$1: V <init>()>
<android.support.design.widget.BottomSheetBehavior$SavedState$1: Landroid/support/design/widget/BottomSheetBehavior$SavedState; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.BottomSheetBehavior$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.BottomSheetBehavior$SavedState$1: [Landroid/support/design/widget/BottomSheetBehavior$SavedState; newArray(I)>
<android.support.design.widget.BottomSheetBehavior$SavedState$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.widget.BottomSheetBehavior$SavedState: V <clinit>()>
<android.support.design.widget.BottomSheetBehavior$SavedState: V <init>(Landroid/os/Parcel;)>
<android.support.design.widget.BottomSheetBehavior$SavedState: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.BottomSheetBehavior$SavedState: V <init>(Landroid/os/Parcelable;I)>
<android.support.design.widget.BottomSheetBehavior$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.widget.BottomSheetBehavior: V <init>()>
<android.support.design.widget.BottomSheetBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.BottomSheetBehavior: Landroid/view/View; findScrollingChild(Landroid/view/View;)>
<android.support.design.widget.BottomSheetBehavior: Landroid/support/design/widget/BottomSheetBehavior; from(Landroid/view/View;)>
<android.support.design.widget.BottomSheetBehavior: F getYVelocity()>
<android.support.design.widget.BottomSheetBehavior: V reset()>
<android.support.design.widget.BottomSheetBehavior: V dispatchOnSlide(I)>
<android.support.design.widget.BottomSheetBehavior: I getPeekHeight()>
<android.support.design.widget.BottomSheetBehavior: I getPeekHeightMin()>
<android.support.design.widget.BottomSheetBehavior: Z getSkipCollapsed()>
<android.support.design.widget.BottomSheetBehavior: I getState()>
<android.support.design.widget.BottomSheetBehavior: Z isHideable()>
<android.support.design.widget.BottomSheetBehavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.BottomSheetBehavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.BottomSheetBehavior: Z onNestedPreFling(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;FF)>
<android.support.design.widget.BottomSheetBehavior: V onNestedPreScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;II[I)>
<android.support.design.widget.BottomSheetBehavior: V onRestoreInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/os/Parcelable;)>
<android.support.design.widget.BottomSheetBehavior: Landroid/os/Parcelable; onSaveInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.BottomSheetBehavior: Z onStartNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.BottomSheetBehavior: V onStopNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.BottomSheetBehavior: Z onTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.BottomSheetBehavior: V setBottomSheetCallback(Landroid/support/design/widget/BottomSheetBehavior$BottomSheetCallback;)>
<android.support.design.widget.BottomSheetBehavior: V setHideable(Z)>
<android.support.design.widget.BottomSheetBehavior: V setPeekHeight(I)>
<android.support.design.widget.BottomSheetBehavior: V setSkipCollapsed(Z)>
<android.support.design.widget.BottomSheetBehavior: V setState(I)>
<android.support.design.widget.BottomSheetBehavior: V setStateInternal(I)>
<android.support.design.widget.BottomSheetBehavior: Z shouldHide(Landroid/view/View;F)>
<android.support.design.widget.BottomSheetBehavior: V startSettlingAnimation(Landroid/view/View;I)>
<android.support.design.widget.BottomSheetDialog$2: V <init>(Landroid/support/design/widget/BottomSheetDialog;)>
<android.support.design.widget.BottomSheetDialog$2: V onInitializeAccessibilityNodeInfo(Landroid/view/View;Landroid/support/v4/view/accessibility/AccessibilityNodeInfoCompat;)>
<android.support.design.widget.BottomSheetDialog$2: Z performAccessibilityAction(Landroid/view/View;ILandroid/os/Bundle;)>
<android.support.design.widget.BottomSheetDialog$3: V <init>(Landroid/support/design/widget/BottomSheetDialog;)>
<android.support.design.widget.BottomSheetDialog$3: V onSlide(Landroid/view/View;F)>
<android.support.design.widget.BottomSheetDialog$3: V onStateChanged(Landroid/view/View;I)>
<android.support.design.widget.CheckableImageButton$1: V <init>(Landroid/support/design/widget/CheckableImageButton;)>
<android.support.design.widget.CheckableImageButton$1: V onInitializeAccessibilityEvent(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)>
<android.support.design.widget.CheckableImageButton$1: V onInitializeAccessibilityNodeInfo(Landroid/view/View;Landroid/support/v4/view/accessibility/AccessibilityNodeInfoCompat;)>
<android.support.design.widget.CircularBorderDrawableLollipop: V <init>()>
<android.support.design.widget.CircularBorderDrawableLollipop: V getOutline(Landroid/graphics/Outline;)>
<android.support.design.widget.CollapsingToolbarLayout$1: V <init>(Landroid/support/design/widget/CollapsingToolbarLayout;)>
<android.support.design.widget.CollapsingToolbarLayout$1: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CollapsingToolbarLayout$2: V <init>(Landroid/support/design/widget/CollapsingToolbarLayout;)>
<android.support.design.widget.CollapsingToolbarLayout$2: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.CollapsingToolbarLayout$OffsetUpdateListener: V <init>(Landroid/support/design/widget/CollapsingToolbarLayout;)>
<android.support.design.widget.CollapsingToolbarLayout$OffsetUpdateListener: V onOffsetChanged(Landroid/support/design/widget/AppBarLayout;I)>
<android.support.design.widget.CoordinatorLayout$1: V <init>(Landroid/support/design/widget/CoordinatorLayout;)>
<android.support.design.widget.CoordinatorLayout$1: Landroid/support/v4/view/WindowInsetsCompat; onApplyWindowInsets(Landroid/view/View;Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: V <init>()>
<android.support.design.widget.CoordinatorLayout$SavedState$1: Landroid/support/design/widget/CoordinatorLayout$SavedState; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: [Landroid/support/design/widget/CoordinatorLayout$SavedState; newArray(I)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.widget.CoordinatorLayout$SavedState: V <clinit>()>
<android.support.design.widget.CoordinatorLayout$SavedState: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.CoordinatorLayout$SavedState: V <init>(Landroid/os/Parcelable;)>
<android.support.design.widget.CoordinatorLayout$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.widget.CoordinatorLayout: V <clinit>()>
<android.support.design.widget.CoordinatorLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.CoordinatorLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CoordinatorLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.CoordinatorLayout: Landroid/graphics/Rect; acquireTempRect()>
<android.support.design.widget.CoordinatorLayout: V constrainChildRect(Landroid/support/design/widget/CoordinatorLayout$LayoutParams;Landroid/graphics/Rect;II)>
<android.support.design.widget.CoordinatorLayout: Landroid/support/v4/view/WindowInsetsCompat; dispatchApplyWindowInsetsToBehaviors(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CoordinatorLayout: V getDesiredAnchoredChildRectWithoutConstraints(Landroid/view/View;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/support/design/widget/CoordinatorLayout$LayoutParams;II)>
<android.support.design.widget.CoordinatorLayout: I getKeyline(I)>
<android.support.design.widget.CoordinatorLayout: V getTopSortedChildren(Ljava/util/List;)>
<android.support.design.widget.CoordinatorLayout: Z hasDependencies(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: V layoutChild(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V layoutChildWithAnchor(Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V layoutChildWithKeyline(Landroid/view/View;II)>
<android.support.design.widget.CoordinatorLayout: V offsetChildByInset(Landroid/view/View;Landroid/graphics/Rect;I)>
<android.support.design.widget.CoordinatorLayout: Landroid/support/design/widget/CoordinatorLayout$Behavior; parseBehavior(Landroid/content/Context;Landroid/util/AttributeSet;Ljava/lang/String;)>
<android.support.design.widget.CoordinatorLayout: Z performIntercept(Landroid/view/MotionEvent;I)>
<android.support.design.widget.CoordinatorLayout: V prepareChildren()>
<android.support.design.widget.CoordinatorLayout: V releaseTempRect(Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: V resetTouchBehaviors()>
<android.support.design.widget.CoordinatorLayout: I resolveAnchoredChildGravity(I)>
<android.support.design.widget.CoordinatorLayout: I resolveGravity(I)>
<android.support.design.widget.CoordinatorLayout: I resolveKeylineGravity(I)>
<android.support.design.widget.CoordinatorLayout: V setInsetOffsetX(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V setInsetOffsetY(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V setupForInsets()>
<android.support.design.widget.CoordinatorLayout: V addPreDrawListener()>
<android.support.design.widget.CoordinatorLayout: Z checkLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout: V dispatchDependentViewsChanged(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: Z doViewsOverlap(Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: Z drawChild(Landroid/graphics/Canvas;Landroid/view/View;J)>
<android.support.design.widget.CoordinatorLayout: V drawableStateChanged()>
<android.support.design.widget.CoordinatorLayout: V ensurePreDrawListener()>
<android.support.design.widget.CoordinatorLayout: Landroid/support/design/widget/CoordinatorLayout$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.CoordinatorLayout: Landroid/view/ViewGroup$LayoutParams; generateDefaultLayoutParams()>
<android.support.design.widget.CoordinatorLayout: Landroid/support/design/widget/CoordinatorLayout$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.CoordinatorLayout: Landroid/support/design/widget/CoordinatorLayout$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/util/AttributeSet;)>
<android.support.design.widget.CoordinatorLayout: Landroid/view/ViewGroup$LayoutParams; generateLayoutParams(Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.CoordinatorLayout: V getChildRect(Landroid/view/View;ZLandroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: Ljava/util/List; getDependencies(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: Ljava/util/List; getDependencySortedChildren()>
<android.support.design.widget.CoordinatorLayout: Ljava/util/List; getDependents(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: V getDescendantRect(Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: V getDesiredAnchoredChildRect(Landroid/view/View;ILandroid/graphics/Rect;Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: V getLastChildRect(Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: Landroid/support/v4/view/WindowInsetsCompat; getLastWindowInsets()>
<android.support.design.widget.CoordinatorLayout: I getNestedScrollAxes()>
<android.support.design.widget.CoordinatorLayout: Landroid/support/design/widget/CoordinatorLayout$LayoutParams; getResolvedLayoutParams(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: Landroid/graphics/drawable/Drawable; getStatusBarBackground()>
<android.support.design.widget.CoordinatorLayout: I getSuggestedMinimumHeight()>
<android.support.design.widget.CoordinatorLayout: I getSuggestedMinimumWidth()>
<android.support.design.widget.CoordinatorLayout: Z isPointInChildBounds(Landroid/view/View;II)>
<android.support.design.widget.CoordinatorLayout: V offsetChildToAnchor(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V onAttachedToWindow()>
<android.support.design.widget.CoordinatorLayout: V onChildViewsChanged(I)>
<android.support.design.widget.CoordinatorLayout: V onDetachedFromWindow()>
<android.support.design.widget.CoordinatorLayout: V onDraw(Landroid/graphics/Canvas;)>
<android.support.design.widget.CoordinatorLayout: Z onInterceptTouchEvent(Landroid/view/MotionEvent;)>
<android.support.design.widget.CoordinatorLayout: V onLayout(ZIIII)>
<android.support.design.widget.CoordinatorLayout: V onLayoutChild(Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V onMeasure(II)>
<android.support.design.widget.CoordinatorLayout: V onMeasureChild(Landroid/view/View;IIII)>
<android.support.design.widget.CoordinatorLayout: Z onNestedFling(Landroid/view/View;FFZ)>
<android.support.design.widget.CoordinatorLayout: Z onNestedPreFling(Landroid/view/View;FF)>
<android.support.design.widget.CoordinatorLayout: V onNestedPreScroll(Landroid/view/View;II[I)>
<android.support.design.widget.CoordinatorLayout: V onNestedScroll(Landroid/view/View;IIII)>
<android.support.design.widget.CoordinatorLayout: V onNestedScrollAccepted(Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<android.support.design.widget.CoordinatorLayout: Landroid/os/Parcelable; onSaveInstanceState()>
<android.support.design.widget.CoordinatorLayout: Z onStartNestedScroll(Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.CoordinatorLayout: V onStopNestedScroll(Landroid/view/View;)>
<android.support.design.widget.CoordinatorLayout: Z onTouchEvent(Landroid/view/MotionEvent;)>
<android.support.design.widget.CoordinatorLayout: V recordLastChildRect(Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.CoordinatorLayout: V removePreDrawListener()>
<android.support.design.widget.CoordinatorLayout: Z requestChildRectangleOnScreen(Landroid/view/View;Landroid/graphics/Rect;Z)>
<android.support.design.widget.CoordinatorLayout: V requestDisallowInterceptTouchEvent(Z)>
<android.support.design.widget.CoordinatorLayout: V setFitsSystemWindows(Z)>
<android.support.design.widget.CoordinatorLayout: V setOnHierarchyChangeListener(Landroid/view/ViewGroup$OnHierarchyChangeListener;)>
<android.support.design.widget.CoordinatorLayout: V setStatusBarBackground(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.CoordinatorLayout: V setStatusBarBackgroundColor(I)>
<android.support.design.widget.CoordinatorLayout: V setStatusBarBackgroundResource(I)>
<android.support.design.widget.CoordinatorLayout: V setVisibility(I)>
<android.support.design.widget.CoordinatorLayout: Landroid/support/v4/view/WindowInsetsCompat; setWindowInsets(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.CoordinatorLayout: Z verifyDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.FloatingActionButton$1: V <init>(Landroid/support/design/widget/FloatingActionButton;Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButton$1: V onHidden()>
<android.support.design.widget.FloatingActionButton$1: V onShown()>
<android.support.design.widget.FloatingActionButton$Behavior: V <init>()>
<android.support.design.widget.FloatingActionButton$Behavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z isBottomSheet(Landroid/view/View;)>
<android.support.design.widget.FloatingActionButton$Behavior: V offsetIfNeeded(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z shouldUpdateVisibility(Landroid/view/View;Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z updateFabVisibilityForAppBarLayout(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z updateFabVisibilityForBottomSheet(Landroid/view/View;Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z getInsetDodgeRect(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/FloatingActionButton;Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z getInsetDodgeRect(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z isAutoHideEnabled()>
<android.support.design.widget.FloatingActionButton$Behavior: V onAttachedToLayoutParams(Landroid/support/design/widget/CoordinatorLayout$LayoutParams;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/FloatingActionButton;Landroid/view/View;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.FloatingActionButton$Behavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/FloatingActionButton;I)>
<android.support.design.widget.FloatingActionButton$Behavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.FloatingActionButton$Behavior: V setAutoHideEnabled(Z)>
<android.support.design.widget.FloatingActionButton$Behavior: V setInternalAutoHideListener(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: V <init>(Landroid/support/design/widget/FloatingActionButton;)>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: F getRadius()>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: Z isCompatPaddingEnabled()>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: V setBackgroundDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: V setShadowPadding(IIII)>
<android.support.design.widget.FloatingActionButton: V <init>(Landroid/content/Context;)>
<android.support.design.widget.FloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.FloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.FloatingActionButton: V access$001(Landroid/support/design/widget/FloatingActionButton;Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.FloatingActionButton: Landroid/support/design/widget/FloatingActionButtonImpl; createImpl()>
<android.support.design.widget.FloatingActionButton: Landroid/support/design/widget/FloatingActionButtonImpl; getImpl()>
<android.support.design.widget.FloatingActionButton: I getSizeDimension(I)>
<android.support.design.widget.FloatingActionButton: I resolveAdjustedSize(II)>
<android.support.design.widget.FloatingActionButton: Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener; wrapOnVisibilityChangedListener(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButton: V drawableStateChanged()>
<android.support.design.widget.FloatingActionButton: Landroid/content/res/ColorStateList; getBackgroundTintList()>
<android.support.design.widget.FloatingActionButton: Landroid/graphics/PorterDuff$Mode; getBackgroundTintMode()>
<android.support.design.widget.FloatingActionButton: F getCompatElevation()>
<android.support.design.widget.FloatingActionButton: Landroid/graphics/drawable/Drawable; getContentBackground()>
<android.support.design.widget.FloatingActionButton: Z getContentRect(Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButton: I getRippleColor()>
<android.support.design.widget.FloatingActionButton: I getSize()>
<android.support.design.widget.FloatingActionButton: I getSizeDimension()>
<android.support.design.widget.FloatingActionButton: Z getUseCompatPadding()>
<android.support.design.widget.FloatingActionButton: V hide()>
<android.support.design.widget.FloatingActionButton: V hide(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButton: V hide(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;Z)>
<android.support.design.widget.FloatingActionButton: V jumpDrawablesToCurrentState()>
<android.support.design.widget.FloatingActionButton: V onAttachedToWindow()>
<android.support.design.widget.FloatingActionButton: V onDetachedFromWindow()>
<android.support.design.widget.FloatingActionButton: V onMeasure(II)>
<android.support.design.widget.FloatingActionButton: Z onTouchEvent(Landroid/view/MotionEvent;)>
<android.support.design.widget.FloatingActionButton: V setBackgroundColor(I)>
<android.support.design.widget.FloatingActionButton: V setBackgroundDrawable(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.FloatingActionButton: V setBackgroundResource(I)>
<android.support.design.widget.FloatingActionButton: V setBackgroundTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.FloatingActionButton: V setBackgroundTintMode(Landroid/graphics/PorterDuff$Mode;)>
<android.support.design.widget.FloatingActionButton: V setCompatElevation(F)>
<android.support.design.widget.FloatingActionButton: V setImageResource(I)>
<android.support.design.widget.FloatingActionButton: V setRippleColor(I)>
<android.support.design.widget.FloatingActionButton: V setSize(I)>
<android.support.design.widget.FloatingActionButton: V setUseCompatPadding(Z)>
<android.support.design.widget.FloatingActionButton: V setVisibility(I)>
<android.support.design.widget.FloatingActionButton: V show()>
<android.support.design.widget.FloatingActionButton: V show(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButton: V show(Landroid/support/design/widget/FloatingActionButton$OnVisibilityChangedListener;Z)>
<android.support.design.widget.FloatingActionButtonGingerbread$1: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;ZLandroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButtonGingerbread$1: V onAnimationEnd(Landroid/view/animation/Animation;)>
<android.support.design.widget.FloatingActionButtonGingerbread$2: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;)>
<android.support.design.widget.FloatingActionButtonGingerbread$2: V onAnimationEnd(Landroid/view/animation/Animation;)>
<android.support.design.widget.FloatingActionButtonGingerbread: V <init>(Landroid/support/design/widget/VisibilityAwareImageButton;Landroid/support/design/widget/ShadowViewDelegate;Landroid/support/design/widget/ValueAnimatorCompat$Creator;)>
<android.support.design.widget.FloatingActionButtonGingerbread: Landroid/support/design/widget/ValueAnimatorCompat; createAnimator(Landroid/support/design/widget/FloatingActionButtonGingerbread$ShadowAnimatorImpl;)>
<android.support.design.widget.FloatingActionButtonGingerbread: Landroid/content/res/ColorStateList; createColorStateList(I)>
<android.support.design.widget.FloatingActionButtonGingerbread: F getElevation()>
<android.support.design.widget.FloatingActionButtonGingerbread: V getPadding(Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButtonGingerbread: V hide(Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;Z)>
<android.support.design.widget.FloatingActionButtonGingerbread: V jumpDrawableToCurrentState()>
<android.support.design.widget.FloatingActionButtonGingerbread: V onCompatShadowChanged()>
<android.support.design.widget.FloatingActionButtonGingerbread: V onDrawableStateChanged([I)>
<android.support.design.widget.FloatingActionButtonGingerbread: V onElevationsChanged(FF)>
<android.support.design.widget.FloatingActionButtonGingerbread: V setBackgroundDrawable(Landroid/content/res/ColorStateList;Landroid/graphics/PorterDuff$Mode;II)>
<android.support.design.widget.FloatingActionButtonGingerbread: V setBackgroundTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.FloatingActionButtonGingerbread: V setBackgroundTintMode(Landroid/graphics/PorterDuff$Mode;)>
<android.support.design.widget.FloatingActionButtonGingerbread: V setRippleColor(I)>
<android.support.design.widget.FloatingActionButtonGingerbread: V show(Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;Z)>
<android.support.design.widget.NavigationView$1: V <init>(Landroid/support/design/widget/NavigationView;)>
<android.support.design.widget.NavigationView$1: Z onMenuItemSelected(Landroid/support/v7/view/menu/h;Landroid/view/MenuItem;)>
<android.support.design.widget.NavigationView$1: V onMenuModeChange(Landroid/support/v7/view/menu/h;)>
<android.support.design.widget.NavigationView$SavedState$1: V <init>()>
<android.support.design.widget.NavigationView$SavedState$1: Landroid/support/design/widget/NavigationView$SavedState; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.NavigationView$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.NavigationView$SavedState$1: [Landroid/support/design/widget/NavigationView$SavedState; newArray(I)>
<android.support.design.widget.NavigationView$SavedState$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.widget.NavigationView$SavedState: V <clinit>()>
<android.support.design.widget.NavigationView$SavedState: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.NavigationView$SavedState: V <init>(Landroid/os/Parcelable;)>
<android.support.design.widget.NavigationView$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.widget.NavigationView: V <clinit>()>
<android.support.design.widget.NavigationView: V <init>(Landroid/content/Context;)>
<android.support.design.widget.NavigationView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.NavigationView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.NavigationView: Landroid/content/res/ColorStateList; createDefaultColorStateList(I)>
<android.support.design.widget.NavigationView: Landroid/view/MenuInflater; getMenuInflater()>
<android.support.design.widget.NavigationView: V addHeaderView(Landroid/view/View;)>
<android.support.design.widget.NavigationView: I getHeaderCount()>
<android.support.design.widget.NavigationView: Landroid/view/View; getHeaderView(I)>
<android.support.design.widget.NavigationView: Landroid/graphics/drawable/Drawable; getItemBackground()>
<android.support.design.widget.NavigationView: Landroid/content/res/ColorStateList; getItemIconTintList()>
<android.support.design.widget.NavigationView: Landroid/content/res/ColorStateList; getItemTextColor()>
<android.support.design.widget.NavigationView: Landroid/view/Menu; getMenu()>
<android.support.design.widget.NavigationView: Landroid/view/View; inflateHeaderView(I)>
<android.support.design.widget.NavigationView: V inflateMenu(I)>
<android.support.design.widget.NavigationView: V onInsetsChanged(Landroid/support/v4/view/WindowInsetsCompat;)>
<android.support.design.widget.NavigationView: V onMeasure(II)>
<android.support.design.widget.NavigationView: V onRestoreInstanceState(Landroid/os/Parcelable;)>
<android.support.design.widget.NavigationView: Landroid/os/Parcelable; onSaveInstanceState()>
<android.support.design.widget.NavigationView: V removeHeaderView(Landroid/view/View;)>
<android.support.design.widget.NavigationView: V setCheckedItem(I)>
<android.support.design.widget.NavigationView: V setItemBackground(Landroid/graphics/drawable/Drawable;)>
<android.support.design.widget.NavigationView: V setItemBackgroundResource(I)>
<android.support.design.widget.NavigationView: V setItemIconTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.NavigationView: V setItemTextAppearance(I)>
<android.support.design.widget.NavigationView: V setItemTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.NavigationView: V setNavigationItemSelectedListener(Landroid/support/design/widget/NavigationView$OnNavigationItemSelectedListener;)>
<android.support.design.widget.ShadowDrawableWrapper: V <clinit>()>
<android.support.design.widget.ShadowDrawableWrapper: V <init>(Landroid/content/Context;Landroid/graphics/drawable/Drawable;FFF)>
<android.support.design.widget.ShadowDrawableWrapper: V buildComponents(Landroid/graphics/Rect;)>
<android.support.design.widget.ShadowDrawableWrapper: V buildShadowCorners()>
<android.support.design.widget.ShadowDrawableWrapper: F calculateHorizontalPadding(FFZ)>
<android.support.design.widget.ShadowDrawableWrapper: F calculateVerticalPadding(FFZ)>
<android.support.design.widget.ShadowDrawableWrapper: V drawShadow(Landroid/graphics/Canvas;)>
<android.support.design.widget.ShadowDrawableWrapper: I toEven(F)>
<android.support.design.widget.ShadowDrawableWrapper: V draw(Landroid/graphics/Canvas;)>
<android.support.design.widget.ShadowDrawableWrapper: F getCornerRadius()>
<android.support.design.widget.ShadowDrawableWrapper: F getMaxShadowSize()>
<android.support.design.widget.ShadowDrawableWrapper: F getMinHeight()>
<android.support.design.widget.ShadowDrawableWrapper: F getMinWidth()>
<android.support.design.widget.ShadowDrawableWrapper: I getOpacity()>
<android.support.design.widget.ShadowDrawableWrapper: Z getPadding(Landroid/graphics/Rect;)>
<android.support.design.widget.ShadowDrawableWrapper: F getShadowSize()>
<android.support.design.widget.ShadowDrawableWrapper: V onBoundsChange(Landroid/graphics/Rect;)>
<android.support.design.widget.ShadowDrawableWrapper: V setAddPaddingForCorners(Z)>
<android.support.design.widget.ShadowDrawableWrapper: V setAlpha(I)>
<android.support.design.widget.ShadowDrawableWrapper: V setCornerRadius(F)>
<android.support.design.widget.ShadowDrawableWrapper: V setMaxShadowSize(F)>
<android.support.design.widget.ShadowDrawableWrapper: V setRotation(F)>
<android.support.design.widget.ShadowDrawableWrapper: V setShadowSize(F)>
<android.support.design.widget.ShadowDrawableWrapper: V setShadowSize(FF)>
<android.support.design.widget.Snackbar$Callback: V <init>()>
<android.support.design.widget.Snackbar$Callback: V onDismissed(Landroid/support/design/widget/Snackbar;I)>
<android.support.design.widget.Snackbar$Callback: V onDismissed(Ljava/lang/Object;I)>
<android.support.design.widget.Snackbar$Callback: V onShown(Landroid/support/design/widget/Snackbar;)>
<android.support.design.widget.Snackbar$Callback: V onShown(Ljava/lang/Object;)>
<android.support.design.widget.Snackbar$SnackbarLayout: V <init>(Landroid/content/Context;)>
<android.support.design.widget.Snackbar$SnackbarLayout: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.Snackbar: V <init>(Landroid/view/ViewGroup;Landroid/view/View;Landroid/support/design/widget/BaseTransientBottomBar$ContentViewCallback;)>
<android.support.design.widget.Snackbar: Landroid/view/ViewGroup; findSuitableParent(Landroid/view/View;)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; make(Landroid/view/View;II)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; make(Landroid/view/View;Ljava/lang/CharSequence;I)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setAction(ILandroid/view/View$OnClickListener;)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setAction(Ljava/lang/CharSequence;Landroid/view/View$OnClickListener;)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setActionTextColor(I)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setActionTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setCallback(Landroid/support/design/widget/Snackbar$Callback;)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setText(I)>
<android.support.design.widget.Snackbar: Landroid/support/design/widget/Snackbar; setText(Ljava/lang/CharSequence;)>
<android.support.design.widget.SwipeDismissBehavior$1: V <init>(Landroid/support/design/widget/SwipeDismissBehavior;)>
<android.support.design.widget.SwipeDismissBehavior$1: Z shouldDismiss(Landroid/view/View;F)>
<android.support.design.widget.SwipeDismissBehavior$1: I clampViewPositionHorizontal(Landroid/view/View;II)>
<android.support.design.widget.SwipeDismissBehavior$1: I clampViewPositionVertical(Landroid/view/View;II)>
<android.support.design.widget.SwipeDismissBehavior$1: I getViewHorizontalDragRange(Landroid/view/View;)>
<android.support.design.widget.SwipeDismissBehavior$1: V onViewCaptured(Landroid/view/View;I)>
<android.support.design.widget.SwipeDismissBehavior$1: V onViewDragStateChanged(I)>
<android.support.design.widget.SwipeDismissBehavior$1: V onViewPositionChanged(Landroid/view/View;IIII)>
<android.support.design.widget.SwipeDismissBehavior$1: V onViewReleased(Landroid/view/View;FF)>
<android.support.design.widget.SwipeDismissBehavior$1: Z tryCaptureView(Landroid/view/View;I)>
<android.support.design.widget.SwipeDismissBehavior: V <init>()>
<android.support.design.widget.SwipeDismissBehavior: F clamp(FFF)>
<android.support.design.widget.SwipeDismissBehavior: I clamp(III)>
<android.support.design.widget.SwipeDismissBehavior: V ensureViewDragHelper(Landroid/view/ViewGroup;)>
<android.support.design.widget.SwipeDismissBehavior: F fraction(FFF)>
<android.support.design.widget.SwipeDismissBehavior: Z canSwipeDismissView(Landroid/view/View;)>
<android.support.design.widget.SwipeDismissBehavior: I getDragState()>
<android.support.design.widget.SwipeDismissBehavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.SwipeDismissBehavior: Z onTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.SwipeDismissBehavior: V setDragDismissDistance(F)>
<android.support.design.widget.SwipeDismissBehavior: V setEndAlphaSwipeDistance(F)>
<android.support.design.widget.SwipeDismissBehavior: V setListener(Landroid/support/design/widget/SwipeDismissBehavior$OnDismissListener;)>
<android.support.design.widget.SwipeDismissBehavior: V setSensitivity(F)>
<android.support.design.widget.SwipeDismissBehavior: V setStartAlphaSwipeDistance(F)>
<android.support.design.widget.SwipeDismissBehavior: V setSwipeDirection(I)>
<android.support.design.widget.TabLayout$1: V <init>(Landroid/support/design/widget/TabLayout;)>
<android.support.design.widget.TabLayout$1: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.TabLayout$AdapterChangeListener: V <init>(Landroid/support/design/widget/TabLayout;)>
<android.support.design.widget.TabLayout$AdapterChangeListener: V onAdapterChanged(Landroid/support/v4/view/ViewPager;Landroid/support/v4/view/PagerAdapter;Landroid/support/v4/view/PagerAdapter;)>
<android.support.design.widget.TabLayout$AdapterChangeListener: V setAutoRefresh(Z)>
<android.support.design.widget.TabLayout$SlidingTabStrip$1: V <init>(Landroid/support/design/widget/TabLayout$SlidingTabStrip;IIII)>
<android.support.design.widget.TabLayout$SlidingTabStrip$1: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: V <init>(Landroid/support/design/widget/TabLayout;)>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: V onPageScrollStateChanged(I)>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: V onPageScrolled(IFI)>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: V onPageSelected(I)>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: V reset()>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: V <init>(Landroid/support/v4/view/ViewPager;)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: V onTabReselected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: V onTabSelected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: V onTabUnselected(Landroid/support/design/widget/TabLayout$Tab;)>
<android.support.design.widget.TextInputLayout$5: V <init>(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout$5: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.TextInputLayout$SavedState$1: V <init>()>
<android.support.design.widget.TextInputLayout$SavedState$1: Landroid/support/design/widget/TextInputLayout$SavedState; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.TextInputLayout$SavedState$1: Ljava/lang/Object; createFromParcel(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.TextInputLayout$SavedState$1: [Landroid/support/design/widget/TextInputLayout$SavedState; newArray(I)>
<android.support.design.widget.TextInputLayout$SavedState$1: [Ljava/lang/Object; newArray(I)>
<android.support.design.widget.TextInputLayout$SavedState: V <clinit>()>
<android.support.design.widget.TextInputLayout$SavedState: V <init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)>
<android.support.design.widget.TextInputLayout$SavedState: V <init>(Landroid/os/Parcelable;)>
<android.support.design.widget.TextInputLayout$SavedState: Ljava/lang/String; toString()>
<android.support.design.widget.TextInputLayout$SavedState: V writeToParcel(Landroid/os/Parcel;I)>
<android.support.design.widget.TextInputLayout$TextInputAccessibilityDelegate: V <init>(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout$TextInputAccessibilityDelegate: V onInitializeAccessibilityEvent(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)>
<android.support.design.widget.TextInputLayout$TextInputAccessibilityDelegate: V onInitializeAccessibilityNodeInfo(Landroid/view/View;Landroid/support/v4/view/accessibility/AccessibilityNodeInfoCompat;)>
<android.support.design.widget.TextInputLayout$TextInputAccessibilityDelegate: V onPopulateAccessibilityEvent(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)>
<android.support.design.widget.ValueAnimatorCompat$1: V <init>(Landroid/support/design/widget/ValueAnimatorCompat;Landroid/support/design/widget/ValueAnimatorCompat$AnimatorUpdateListener;)>
<android.support.design.widget.ValueAnimatorCompat$1: V onAnimationUpdate()>
<android.support.design.widget.ValueAnimatorCompat$2: V <init>(Landroid/support/design/widget/ValueAnimatorCompat;Landroid/support/design/widget/ValueAnimatorCompat$AnimatorListener;)>
<android.support.design.widget.ValueAnimatorCompat$2: V onAnimationCancel()>
<android.support.design.widget.ValueAnimatorCompat$2: V onAnimationEnd()>
<android.support.design.widget.ValueAnimatorCompat$2: V onAnimationStart()>
<android.support.design.widget.ValueAnimatorCompat$AnimatorListenerAdapter: V <init>()>
<android.support.design.widget.ValueAnimatorCompat$AnimatorListenerAdapter: V onAnimationCancel(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.ValueAnimatorCompat$AnimatorListenerAdapter: V onAnimationEnd(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.ValueAnimatorCompat$AnimatorListenerAdapter: V onAnimationStart(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V <clinit>()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V <init>()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V dispatchAnimationCancel()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V dispatchAnimationEnd()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V dispatchAnimationStart()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V dispatchAnimationUpdate()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V addListener(Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V addUpdateListener(Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorUpdateListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V cancel()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V end()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: F getAnimatedFloatValue()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: F getAnimatedFraction()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: I getAnimatedIntValue()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: J getDuration()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: Z isRunning()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V setDuration(J)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V setFloatValues(FF)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V setIntValues(II)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V setInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V start()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V startInternal()>
<android.support.design.widget.ValueAnimatorCompatImplGingerbread: V update()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V <init>()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V addListener(Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V addUpdateListener(Landroid/support/design/widget/ValueAnimatorCompat$Impl$AnimatorUpdateListenerProxy;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V cancel()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V end()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: F getAnimatedFloatValue()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: F getAnimatedFraction()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: I getAnimatedIntValue()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: J getDuration()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: Z isRunning()>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V setDuration(J)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V setFloatValues(FF)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V setIntValues(II)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V setInterpolator(Landroid/view/animation/Interpolator;)>
<android.support.design.widget.ValueAnimatorCompatImplHoneycombMr1: V start()>
<android.support.design.widget.ViewGroupUtils$ViewGroupUtilsImplBase: V <init>()>
<android.support.design.widget.ViewGroupUtils$ViewGroupUtilsImplBase: V offsetDescendantRect(Landroid/view/ViewGroup;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.ViewGroupUtils$ViewGroupUtilsImplHoneycomb: V <init>()>
<android.support.design.widget.ViewGroupUtils$ViewGroupUtilsImplHoneycomb: V offsetDescendantRect(Landroid/view/ViewGroup;Landroid/view/View;Landroid/graphics/Rect;)>
<android.support.design.widget.ViewOffsetBehavior: V <init>()>
<android.support.design.widget.ViewOffsetBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.ViewOffsetBehavior: I getLeftAndRightOffset()>
<android.support.design.widget.ViewOffsetBehavior: I getTopAndBottomOffset()>
<android.support.design.widget.ViewOffsetBehavior: V layoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.ViewOffsetBehavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.ViewOffsetBehavior: Z setLeftAndRightOffset(I)>
<android.support.design.widget.ViewOffsetBehavior: Z setTopAndBottomOffset(I)>
<android.support.design.widget.ViewUtils$1: V <init>()>
<android.support.design.widget.ViewUtils$1: Landroid/support/design/widget/ValueAnimatorCompat; createAnimator()>
<android.support.graphics.drawable.VectorDrawableCommon: V <init>()>
<android.support.graphics.drawable.VectorDrawableCommon: Landroid/content/res/TypedArray; obtainAttributes(Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;Landroid/util/AttributeSet;[I)>
<android.support.graphics.drawable.VectorDrawableCommon: V applyTheme(Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCommon: V clearColorFilter()>
<android.support.graphics.drawable.VectorDrawableCommon: Landroid/graphics/ColorFilter; getColorFilter()>
<android.support.graphics.drawable.VectorDrawableCommon: Landroid/graphics/drawable/Drawable; getCurrent()>
<android.support.graphics.drawable.VectorDrawableCommon: I getMinimumHeight()>
<android.support.graphics.drawable.VectorDrawableCommon: I getMinimumWidth()>
<android.support.graphics.drawable.VectorDrawableCommon: Z getPadding(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.VectorDrawableCommon: [I getState()>
<android.support.graphics.drawable.VectorDrawableCommon: Landroid/graphics/Region; getTransparentRegion()>
<android.support.graphics.drawable.VectorDrawableCommon: V jumpToCurrentState()>
<android.support.graphics.drawable.VectorDrawableCommon: V onBoundsChange(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.VectorDrawableCommon: Z onLevelChange(I)>
<android.support.graphics.drawable.VectorDrawableCommon: V setChangingConfigurations(I)>
<android.support.graphics.drawable.VectorDrawableCommon: V setColorFilter(ILandroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.VectorDrawableCommon: V setFilterBitmap(Z)>
<android.support.graphics.drawable.VectorDrawableCommon: V setHotspot(FF)>
<android.support.graphics.drawable.VectorDrawableCommon: V setHotspotBounds(IIII)>
<android.support.graphics.drawable.VectorDrawableCommon: Z setState([I)>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VClipPath;)>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: V updateStateFromTypedArray(Landroid/content/res/TypedArray;)>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: V inflate(Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: Z isClipPath()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VFullPath;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: Landroid/graphics/Paint$Cap; getStrokeLineCap(ILandroid/graphics/Paint$Cap;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: Landroid/graphics/Paint$Join; getStrokeLineJoin(ILandroid/graphics/Paint$Join;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V updateStateFromTypedArray(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V applyTheme(Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: Z canApplyTheme()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getFillAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: I getFillColor()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getStrokeAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: I getStrokeColor()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getStrokeWidth()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getTrimPathEnd()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getTrimPathOffset()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: F getTrimPathStart()>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V inflate(Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setFillAlpha(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setFillColor(I)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setStrokeAlpha(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setStrokeColor(I)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setStrokeWidth(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setTrimPathEnd(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setTrimPathOffset(F)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: V setTrimPathStart(F)>
<android.support.transition.ChangeBoundsPort: V <clinit>()>
<android.support.transition.ChangeBoundsPort: V <init>()>
<android.support.transition.ChangeBoundsPort: V captureValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBoundsPort: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBoundsPort: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBoundsPort: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBoundsPort: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.ChangeBoundsPort: V setReparent(Z)>
<android.support.transition.ChangeBoundsPort: V setResizeClip(Z)>
<android.support.transition.SceneIcs: V <init>()>
<android.support.transition.SceneIcs: V enter()>
<android.support.transition.SceneIcs: V exit()>
<android.support.transition.SceneIcs: Landroid/view/ViewGroup; getSceneRoot()>
<android.support.transition.SceneIcs: V init(Landroid/view/ViewGroup;)>
<android.support.transition.SceneIcs: V init(Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.SceneIcs: V setEnterAction(Ljava/lang/Runnable;)>
<android.support.transition.SceneIcs: V setExitAction(Ljava/lang/Runnable;)>
<android.support.transition.SceneStaticsApi21: V <init>()>
<android.support.transition.SceneStaticsApi21: Landroid/support/transition/SceneImpl; getSceneForLayout(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.SceneStaticsIcs: V <init>()>
<android.support.transition.SceneStaticsIcs: Landroid/support/transition/SceneImpl; getSceneForLayout(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.SceneStaticsKitKat: V <init>()>
<android.support.transition.SceneStaticsKitKat: Landroid/support/transition/SceneImpl; getSceneForLayout(Landroid/view/ViewGroup;ILandroid/content/Context;)>
<android.support.transition.SceneWrapper: V <init>()>
<android.support.transition.SceneWrapper: V exit()>
<android.support.transition.SceneWrapper: Landroid/view/ViewGroup; getSceneRoot()>
<android.support.transition.SceneWrapper: V setEnterAction(Ljava/lang/Runnable;)>
<android.support.transition.SceneWrapper: V setExitAction(Ljava/lang/Runnable;)>
<android.support.transition.Transition: V <init>()>
<android.support.transition.Transition: V <init>(Z)>
<android.support.transition.Transition: Landroid/support/transition/Transition; addListener(Landroid/support/transition/Transition$TransitionListener;)>
<android.support.transition.Transition: Landroid/support/transition/Transition; addTarget(I)>
<android.support.transition.Transition: Landroid/support/transition/Transition; addTarget(Landroid/view/View;)>
<android.support.transition.Transition: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeChildren(IZ)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeChildren(Landroid/view/View;Z)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeChildren(Ljava/lang/Class;Z)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeTarget(IZ)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeTarget(Landroid/view/View;Z)>
<android.support.transition.Transition: Landroid/support/transition/Transition; excludeTarget(Ljava/lang/Class;Z)>
<android.support.transition.Transition: J getDuration()>
<android.support.transition.Transition: Landroid/animation/TimeInterpolator; getInterpolator()>
<android.support.transition.Transition: Ljava/lang/String; getName()>
<android.support.transition.Transition: J getStartDelay()>
<android.support.transition.Transition: Ljava/util/List; getTargetIds()>
<android.support.transition.Transition: Ljava/util/List; getTargets()>
<android.support.transition.Transition: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.Transition: Landroid/support/transition/TransitionValues; getTransitionValues(Landroid/view/View;Z)>
<android.support.transition.Transition: Landroid/support/transition/Transition; removeListener(Landroid/support/transition/Transition$TransitionListener;)>
<android.support.transition.Transition: Landroid/support/transition/Transition; removeTarget(I)>
<android.support.transition.Transition: Landroid/support/transition/Transition; removeTarget(Landroid/view/View;)>
<android.support.transition.Transition: Landroid/support/transition/Transition; setDuration(J)>
<android.support.transition.Transition: Landroid/support/transition/Transition; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.Transition: Landroid/support/transition/Transition; setStartDelay(J)>
<android.support.transition.Transition: Ljava/lang/String; toString()>
<android.support.transition.TransitionIcs$CompatListener: V <init>(Landroid/support/transition/TransitionIcs;)>
<android.support.transition.TransitionIcs$CompatListener: V addListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionIcs$CompatListener: Z isEmpty()>
<android.support.transition.TransitionIcs$CompatListener: V onTransitionCancel(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionIcs$CompatListener: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionIcs$CompatListener: V onTransitionPause(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionIcs$CompatListener: V onTransitionResume(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionIcs$CompatListener: V onTransitionStart(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionIcs$CompatListener: V removeListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionIcs$TransitionWrapper: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.TransitionIcs$TransitionWrapper: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs$TransitionWrapper: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs$TransitionWrapper: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs: V <init>()>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; addListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; addTarget(I)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; addTarget(Landroid/view/View;)>
<android.support.transition.TransitionIcs: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeChildren(IZ)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeChildren(Landroid/view/View;Z)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeChildren(Ljava/lang/Class;Z)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeTarget(IZ)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeTarget(Landroid/view/View;Z)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; excludeTarget(Ljava/lang/Class;Z)>
<android.support.transition.TransitionIcs: J getDuration()>
<android.support.transition.TransitionIcs: Landroid/animation/TimeInterpolator; getInterpolator()>
<android.support.transition.TransitionIcs: Ljava/lang/String; getName()>
<android.support.transition.TransitionIcs: J getStartDelay()>
<android.support.transition.TransitionIcs: Ljava/util/List; getTargetIds()>
<android.support.transition.TransitionIcs: Ljava/util/List; getTargets()>
<android.support.transition.TransitionIcs: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionValues; getTransitionValues(Landroid/view/View;Z)>
<android.support.transition.TransitionIcs: V init(Landroid/support/transition/TransitionInterface;Ljava/lang/Object;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; removeListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; removeTarget(I)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; removeTarget(Landroid/view/View;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; setDuration(J)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.TransitionIcs: Landroid/support/transition/TransitionImpl; setStartDelay(J)>
<android.support.transition.TransitionIcs: Ljava/lang/String; toString()>
<android.support.transition.TransitionKitKat: V <init>()>
<android.support.transition.TransitionKitKat: Landroid/transition/TransitionValues; convertToPlatform(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionValues; convertToSupport(Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: V copyValues(Landroid/support/transition/TransitionValues;Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: V copyValues(Landroid/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: V wrapCaptureEndValues(Landroid/support/transition/TransitionInterface;Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: V wrapCaptureStartValues(Landroid/support/transition/TransitionInterface;Landroid/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; addListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; addTarget(I)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; addTarget(Landroid/view/View;)>
<android.support.transition.TransitionKitKat: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeChildren(IZ)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeChildren(Landroid/view/View;Z)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeChildren(Ljava/lang/Class;Z)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeTarget(IZ)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeTarget(Landroid/view/View;Z)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; excludeTarget(Ljava/lang/Class;Z)>
<android.support.transition.TransitionKitKat: J getDuration()>
<android.support.transition.TransitionKitKat: Landroid/animation/TimeInterpolator; getInterpolator()>
<android.support.transition.TransitionKitKat: Ljava/lang/String; getName()>
<android.support.transition.TransitionKitKat: J getStartDelay()>
<android.support.transition.TransitionKitKat: Ljava/util/List; getTargetIds()>
<android.support.transition.TransitionKitKat: Ljava/util/List; getTargets()>
<android.support.transition.TransitionKitKat: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionValues; getTransitionValues(Landroid/view/View;Z)>
<android.support.transition.TransitionKitKat: V init(Landroid/support/transition/TransitionInterface;Ljava/lang/Object;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; removeListener(Landroid/support/transition/TransitionInterfaceListener;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; removeTarget(I)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; removeTarget(Landroid/view/View;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; setDuration(J)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.TransitionKitKat: Landroid/support/transition/TransitionImpl; setStartDelay(J)>
<android.support.transition.TransitionKitKat: Ljava/lang/String; toString()>
<android.support.transition.TransitionManagerIcs: V <init>()>
<android.support.transition.TransitionManagerIcs: V setTransition(Landroid/support/transition/SceneImpl;Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerIcs: V setTransition(Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerIcs: V transitionTo(Landroid/support/transition/SceneImpl;)>
<android.support.transition.TransitionManagerKitKat: V <init>()>
<android.support.transition.TransitionManagerKitKat: V setTransition(Landroid/support/transition/SceneImpl;Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerKitKat: V setTransition(Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerKitKat: V transitionTo(Landroid/support/transition/SceneImpl;)>
<android.support.transition.TransitionManagerStaticsIcs: V <init>()>
<android.support.transition.TransitionManagerStaticsIcs: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionManagerStaticsIcs: V beginDelayedTransition(Landroid/view/ViewGroup;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerStaticsIcs: V go(Landroid/support/transition/SceneImpl;)>
<android.support.transition.TransitionManagerStaticsIcs: V go(Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerStaticsKitKat: V <init>()>
<android.support.transition.TransitionManagerStaticsKitKat: V beginDelayedTransition(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionManagerStaticsKitKat: V beginDelayedTransition(Landroid/view/ViewGroup;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionManagerStaticsKitKat: V go(Landroid/support/transition/SceneImpl;)>
<android.support.transition.TransitionManagerStaticsKitKat: V go(Landroid/support/transition/SceneImpl;Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V <init>()>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V onTransitionCancel(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V onTransitionPause(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V onTransitionResume(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionPort$TransitionListenerAdapter: V onTransitionStart(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort: V <init>()>
<android.support.transition.TransitionSetPort: V setupStartEndListeners()>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; addListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; addListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; addTarget(I)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; addTarget(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; addTarget(I)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; addTarget(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; addTransition(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort: V cancel()>
<android.support.transition.TransitionSetPort: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionSetPort: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; clone()>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; clone()>
<android.support.transition.TransitionSetPort: Ljava/lang/Object; clone()>
<android.support.transition.TransitionSetPort: V createAnimators(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValuesMaps;Landroid/support/transition/TransitionValuesMaps;)>
<android.support.transition.TransitionSetPort: I getOrdering()>
<android.support.transition.TransitionSetPort: V pause(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; removeListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; removeListener(Landroid/support/transition/TransitionPort$TransitionListener;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; removeTarget(I)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; removeTarget(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; removeTarget(I)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; removeTarget(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; removeTransition(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort: V resume(Landroid/view/View;)>
<android.support.transition.TransitionSetPort: V runAnimators()>
<android.support.transition.TransitionSetPort: V setCanRemoveViews(Z)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; setDuration(J)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; setDuration(J)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; setInterpolator(Landroid/animation/TimeInterpolator;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; setOrdering(I)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; setSceneRoot(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; setSceneRoot(Landroid/view/ViewGroup;)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionPort; setStartDelay(J)>
<android.support.transition.TransitionSetPort: Landroid/support/transition/TransitionSetPort; setStartDelay(J)>
<android.support.transition.TransitionSetPort: Ljava/lang/String; toString(Ljava/lang/String;)>
<android.support.transition.ViewGroupOverlay: V <init>(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.ViewGroupOverlay: Landroid/support/transition/ViewGroupOverlay; createFrom(Landroid/view/ViewGroup;)>
<android.support.transition.ViewGroupOverlay: V add(Landroid/view/View;)>
<android.support.transition.ViewGroupOverlay: V remove(Landroid/view/View;)>
<android.support.transition.VisibilityPort: V <clinit>()>
<android.support.transition.VisibilityPort: V <init>()>
<android.support.transition.VisibilityPort: V captureValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: Landroid/support/transition/VisibilityPort$VisibilityInfo; getVisibilityChangeInfo(Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: [Ljava/lang/String; getTransitionProperties()>
<android.support.transition.VisibilityPort: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityPort: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityPort: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$1: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$2: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$2: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$3: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$3: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$3: V onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$4: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;[ZLandroid/content/DialogInterface$OnMultiChoiceClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$4: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;[Ljava/lang/Integer;[Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$5: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$5: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$6: V <init>(Lcom/afollestad/materialdialogs/AlertDialogWrapper$Builder;Landroid/content/DialogInterface$OnClickListener;)>
<com.afollestad.materialdialogs.AlertDialogWrapper$Builder$6: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V <init>(Lcom/afollestad/materialdialogs/MaterialDialog$Builder;)>
<com.afollestad.materialdialogs.MaterialDialog: Z sendMultichoiceCallback()>
<com.afollestad.materialdialogs.MaterialDialog: Z sendSingleChoiceCallback(Landroid/view/View;)>
<com.afollestad.materialdialogs.MaterialDialog: V checkIfListInitScroll()>
<com.afollestad.materialdialogs.MaterialDialog: V clearSelectedIndices()>
<com.afollestad.materialdialogs.MaterialDialog: V clearSelectedIndices(Z)>
<com.afollestad.materialdialogs.MaterialDialog: V dismiss()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/view/View; findViewById(I)>
<com.afollestad.materialdialogs.MaterialDialog: Lcom/afollestad/materialdialogs/internal/MDButton; getActionButton(Lcom/afollestad/materialdialogs/DialogAction;)>
<com.afollestad.materialdialogs.MaterialDialog: Lcom/afollestad/materialdialogs/MaterialDialog$Builder; getBuilder()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/graphics/drawable/Drawable; getButtonSelector(Lcom/afollestad/materialdialogs/DialogAction;Z)>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/TextView; getContentView()>
<com.afollestad.materialdialogs.MaterialDialog: I getCurrentProgress()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/view/View; getCustomView()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/ImageView; getIconView()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/EditText; getInputEditText()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/graphics/drawable/Drawable; getListSelector()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/ListView; getListView()>
<com.afollestad.materialdialogs.MaterialDialog: I getMaxProgress()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/ProgressBar; getProgressBar()>
<com.afollestad.materialdialogs.MaterialDialog: I getSelectedIndex()>
<com.afollestad.materialdialogs.MaterialDialog: [Ljava/lang/Integer; getSelectedIndices()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/widget/TextView; getTitleView()>
<com.afollestad.materialdialogs.MaterialDialog: Landroid/view/View; getView()>
<com.afollestad.materialdialogs.MaterialDialog: Z hasActionButtons()>
<com.afollestad.materialdialogs.MaterialDialog: V incrementProgress(I)>
<com.afollestad.materialdialogs.MaterialDialog: V invalidateInputMinMaxIndicator(IZ)>
<com.afollestad.materialdialogs.MaterialDialog: V invalidateList()>
<com.afollestad.materialdialogs.MaterialDialog: Z isCancelled()>
<com.afollestad.materialdialogs.MaterialDialog: Z isIndeterminateProgress()>
<com.afollestad.materialdialogs.MaterialDialog: I numberOfActionButtons()>
<com.afollestad.materialdialogs.MaterialDialog: V onClick(Landroid/view/View;)>
<com.afollestad.materialdialogs.MaterialDialog: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<com.afollestad.materialdialogs.MaterialDialog: V onShow(Landroid/content/DialogInterface;)>
<com.afollestad.materialdialogs.MaterialDialog: V selectAllIndicies()>
<com.afollestad.materialdialogs.MaterialDialog: V selectAllIndicies(Z)>
<com.afollestad.materialdialogs.MaterialDialog: V setActionButton(Lcom/afollestad/materialdialogs/DialogAction;I)>
<com.afollestad.materialdialogs.MaterialDialog: V setActionButton(Lcom/afollestad/materialdialogs/DialogAction;Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V setContent(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setContent(I[Ljava/lang/Object;)>
<com.afollestad.materialdialogs.MaterialDialog: V setContent(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V setContentView(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setContentView(Landroid/view/View;)>
<com.afollestad.materialdialogs.MaterialDialog: V setContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.afollestad.materialdialogs.MaterialDialog: V setIcon(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setIcon(Landroid/graphics/drawable/Drawable;)>
<com.afollestad.materialdialogs.MaterialDialog: V setIconAttribute(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setInternalInputCallback()>
<com.afollestad.materialdialogs.MaterialDialog: V setItems([Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V setMaxProgress(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setMessage(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V setProgress(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setProgressNumberFormat(Ljava/lang/String;)>
<com.afollestad.materialdialogs.MaterialDialog: V setProgressPercentFormat(Ljava/text/NumberFormat;)>
<com.afollestad.materialdialogs.MaterialDialog: V setSelectedIndex(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setSelectedIndices([Ljava/lang/Integer;)>
<com.afollestad.materialdialogs.MaterialDialog: V setTitle(I)>
<com.afollestad.materialdialogs.MaterialDialog: V setTitle(I[Ljava/lang/Object;)>
<com.afollestad.materialdialogs.MaterialDialog: V setTitle(Ljava/lang/CharSequence;)>
<com.afollestad.materialdialogs.MaterialDialog: V setTypeface(Landroid/widget/TextView;Landroid/graphics/Typeface;)>
<com.afollestad.materialdialogs.MaterialDialog: V show()>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V <init>(Landroid/content/Context;)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: Landroid/graphics/drawable/Drawable; getIconDrawable()>
<com.getbase.floatingactionbutton.AddFloatingActionButton: I getPlusColor()>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V init(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V setIcon(I)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V setPlusColor(I)>
<com.getbase.floatingactionbutton.AddFloatingActionButton: V setPlusColorResId(I)>
<com.ichi2.anki.AbstractFlashcardViewer$13: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$13: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.CardBrowser$1$1: V <init>(Lcom/ichi2/anki/CardBrowser$1;Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser$1$1: V onClick(Lcom/afollestad/materialdialogs/MaterialDialog;Lcom/afollestad/materialdialogs/DialogAction;)>
<com.ichi2.anki.CardBrowser$10: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$10: Z onQueryTextChange(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$10: Z onQueryTextSubmit(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$12: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$12: V onPositive(Ljava/util/List;I)>
<com.ichi2.anki.CardBrowser$1: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.CardBrowser$2: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$2: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.CardBrowser$3: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$3: V OnRemoveSearch(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$3: V OnSaveSearch(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$3: V OnSelection(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser$9: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$9: Z onMenuItemActionCollapse(Landroid/view/MenuItem;)>
<com.ichi2.anki.CardBrowser$9: Z onMenuItemActionExpand(Landroid/view/MenuItem;)>
<com.ichi2.anki.CardTemplateEditor$2: V <init>(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor$2: V onPageScrollStateChanged(I)>
<com.ichi2.anki.CardTemplateEditor$2: V onPageScrolled(IFI)>
<com.ichi2.anki.CardTemplateEditor$2: V onPageSelected(I)>
<com.ichi2.anki.CardTemplateEditor$3: V <init>(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V <init>()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V access$300(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V access$600(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V access$700(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V access$900(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V addNewTemplate(Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V addNewTemplateWithCheck(Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V confirmDeleteCards(Lorg/json/JSONObject;Lorg/json/JSONObject;I)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V deleteDummyCards()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V deleteTemplate(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V deleteTemplateWithCheck(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V flipQA(Lorg/json/JSONObject;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Lcom/ichi2/libanki/Card; getDummyCard()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Lorg/json/JSONObject; getModel()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Z modelHasChanged()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Ljava/lang/String; newCardName(Lorg/json/JSONArray;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment; newInstance(IJJ)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V updateCss()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V onCreateOptionsMenu(Landroid/view/Menu;Landroid/view/MenuInflater;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Landroid/view/View; onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment: V onResume()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$1: V <init>(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack$Editor;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckOptions: V <init>()>
<com.ichi2.anki.DeckOptions: Lorg/json/JSONObject; access$000(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions: Lorg/json/JSONObject; access$002(Lcom/ichi2/anki/DeckOptions;Lorg/json/JSONObject;)>
<com.ichi2.anki.DeckOptions: Lorg/json/JSONObject; access$100(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions: Lcom/ichi2/libanki/Collection; access$200(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions: V access$500(Lcom/ichi2/anki/DeckOptions;)>
<com.ichi2.anki.DeckOptions: V closeWithResult()>
<com.ichi2.anki.DeckOptions: I getOptionsGroupCount()>
<com.ichi2.anki.DeckOptions: Ljava/lang/String; getOptionsGroupName()>
<com.ichi2.anki.DeckOptions: I getSubdeckCount()>
<com.ichi2.anki.DeckOptions: V registerExternalStorageListener()>
<com.ichi2.anki.DeckOptions: V restartActivity()>
<com.ichi2.anki.DeckOptions: V buildLists()>
<com.ichi2.anki.DeckOptions: Landroid/content/SharedPreferences; getSharedPreferences(Ljava/lang/String;I)>
<com.ichi2.anki.DeckOptions: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.DeckOptions: V onDestroy()>
<com.ichi2.anki.DeckOptions: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.DeckOptions: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.DeckOptions: Z onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)>
<com.ichi2.anki.DeckOptions: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<com.ichi2.anki.DeckOptions: V updateSummaries()>
<com.ichi2.anki.DeckPicker$10$1: V <init>(Lcom/ichi2/anki/DeckPicker$10;)>
<com.ichi2.anki.DeckPicker$10$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker$13: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$13: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker$18$1$1: V <init>(Lcom/ichi2/anki/DeckPicker$18$1;)>
<com.ichi2.anki.DeckPicker$18$1$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker$24: V <init>(Lcom/ichi2/anki/DeckPicker;Ljava/lang/String;JLandroid/content/res/Resources;)>
<com.ichi2.anki.DeckPicker$24: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker$24: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker$28: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$28: V onCancelled()>
<com.ichi2.anki.DeckPicker$28: V onPostExecute(Lcom/ichi2/async/DeckTask;Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$28: V onPreExecute(Lcom/ichi2/async/DeckTask;)>
<com.ichi2.anki.DeckPicker$28: V onProgressUpdate(Lcom/ichi2/async/DeckTask;[Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$8: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$8: V onRefresh()>
<com.ichi2.anki.FilteredDeckOptions: V <init>()>
<com.ichi2.anki.FilteredDeckOptions: Lorg/json/JSONObject; access$000(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions: [Ljava/lang/String; access$200(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions: Lcom/ichi2/libanki/Collection; access$300(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions: Z access$400(Lcom/ichi2/anki/FilteredDeckOptions;)>
<com.ichi2.anki.FilteredDeckOptions: V closeDeckOptions()>
<com.ichi2.anki.FilteredDeckOptions: V registerExternalStorageListener()>
<com.ichi2.anki.FilteredDeckOptions: V buildLists()>
<com.ichi2.anki.FilteredDeckOptions: Landroid/content/SharedPreferences; getSharedPreferences(Ljava/lang/String;I)>
<com.ichi2.anki.FilteredDeckOptions: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.FilteredDeckOptions: V onDestroy()>
<com.ichi2.anki.FilteredDeckOptions: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.FilteredDeckOptions: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.FilteredDeckOptions: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<com.ichi2.anki.FilteredDeckOptions: V updateSummaries()>
<com.ichi2.anki.IntentHandler$1: V <init>(Lcom/ichi2/anki/IntentHandler;)>
<com.ichi2.anki.IntentHandler$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.Lookup$1: V <init>([Ljava/lang/CharSequence;)>
<com.ichi2.anki.Lookup$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.ModelBrowser$3: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$3: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.ModelBrowser$6$1: V <init>(Lcom/ichi2/anki/ModelBrowser$6;)>
<com.ichi2.anki.ModelBrowser$6$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelBrowser$6: V <init>(Lcom/ichi2/anki/ModelBrowser;Landroid/widget/Spinner;I)>
<com.ichi2.anki.ModelBrowser$6: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelBrowser$9: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$9: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelFieldEditor$3: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelFieldEditor$5: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$5: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelFieldEditor$6: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$6: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelFieldEditor$9: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$9: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.MyAccount$5: V <init>(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount$5: V onDisconnected()>
<com.ichi2.anki.MyAccount$5: V onPostExecute(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.anki.MyAccount$5: V onPreExecute()>
<com.ichi2.anki.MyAccount$5: V onProgressUpdate([Ljava/lang/Object;)>
<com.ichi2.anki.NoteEditor$10: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$10: V onPositive(Ljava/util/List;I)>
<com.ichi2.anki.NoteEditor$11$1: V <init>(Lcom/ichi2/anki/NoteEditor$11;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.NoteEditor$11$1: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.NoteEditor$12$1: V <init>(Lcom/ichi2/anki/NoteEditor$12;[[Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor$12$1: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.NoteEditor$9: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$9: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.Preferences$1: V <init>(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.Preferences$SettingsFragment: V <init>()>
<com.ichi2.anki.Preferences$SettingsFragment: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Preferences$SettingsFragment: V onPause()>
<com.ichi2.anki.Preferences$SettingsFragment: V onResume()>
<com.ichi2.anki.Preferences$SettingsFragment: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<com.ichi2.anki.Preferences: V <clinit>()>
<com.ichi2.anki.Preferences: V <init>()>
<com.ichi2.anki.Preferences: Lcom/ichi2/libanki/Collection; access$000(Lcom/ichi2/anki/Preferences;)>
<com.ichi2.anki.Preferences: V access$100(Lcom/ichi2/anki/Preferences;Ljava/lang/String;Lcom/ichi2/anki/PreferenceContext;)>
<com.ichi2.anki.Preferences: V access$200(Lcom/ichi2/anki/Preferences;Landroid/preference/PreferenceScreen;)>
<com.ichi2.anki.Preferences: V access$300(Lcom/ichi2/anki/Preferences;Landroid/content/SharedPreferences;Ljava/lang/String;Lcom/ichi2/anki/PreferenceContext;)>
<com.ichi2.anki.Preferences: V closePreferences()>
<com.ichi2.anki.Preferences: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.anki.Preferences: [Ljava/lang/String; getCustomFonts(Ljava/lang/String;)>
<com.ichi2.anki.Preferences: [Ljava/lang/String; getCustomFonts(Ljava/lang/String;Z)>
<com.ichi2.anki.Preferences: V initAllPreferences(Landroid/preference/PreferenceScreen;)>
<com.ichi2.anki.Preferences: V initPreference(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences: V initSubscreen(Ljava/lang/String;Lcom/ichi2/anki/PreferenceContext;)>
<com.ichi2.anki.Preferences: V initializeCustomFontsDialog(Landroid/preference/PreferenceScreen;)>
<com.ichi2.anki.Preferences: V initializeLanguageDialog(Landroid/preference/PreferenceScreen;)>
<com.ichi2.anki.Preferences: V removeUnnecessaryAdvancedPrefs(Landroid/preference/PreferenceScreen;)>
<com.ichi2.anki.Preferences: Ljava/lang/String; replaceString(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.Preferences: Ljava/lang/String; replaceStringIfNumeric(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.Preferences: V updatePreference(Landroid/content/SharedPreferences;Ljava/lang/String;Lcom/ichi2/anki/PreferenceContext;)>
<com.ichi2.anki.Preferences: V updateSummary(Landroid/preference/Preference;)>
<com.ichi2.anki.Preferences: Z isValidFragment(Ljava/lang/String;)>
<com.ichi2.anki.Preferences: V onBuildHeaders(Ljava/util/List;)>
<com.ichi2.anki.Preferences: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Preferences: Landroid/app/Dialog; onCreateDialog(I)>
<com.ichi2.anki.Preferences: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(I)>
<com.ichi2.anki.Preferences: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.Preferences: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.Preferences: V onPause()>
<com.ichi2.anki.Preferences: V onResume()>
<com.ichi2.anki.Preferences: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<com.ichi2.anki.Preferences: V updateNotificationPreference(Landroid/preference/ListPreference;)>
<com.ichi2.anki.ReadText$1: V <init>(Ljava/util/ArrayList;)>
<com.ichi2.anki.ReadText$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.Reviewer$BuryProvider: V <init>(Lcom/ichi2/anki/Reviewer;Landroid/content/Context;)>
<com.ichi2.anki.Reviewer$BuryProvider: Z hasSubMenu()>
<com.ichi2.anki.Reviewer$BuryProvider: Landroid/view/View; onCreateActionView()>
<com.ichi2.anki.Reviewer$BuryProvider: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.Reviewer$BuryProvider: V onPrepareSubMenu(Landroid/view/SubMenu;)>
<com.ichi2.anki.Reviewer$SuspendProvider: V <init>(Lcom/ichi2/anki/Reviewer;Landroid/content/Context;)>
<com.ichi2.anki.Reviewer$SuspendProvider: Z hasSubMenu()>
<com.ichi2.anki.Reviewer$SuspendProvider: Landroid/view/View; onCreateActionView()>
<com.ichi2.anki.Reviewer$SuspendProvider: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.Reviewer$SuspendProvider: V onPrepareSubMenu(Landroid/view/SubMenu;)>
<com.ichi2.anki.Statistics$StatisticFragment: V <init>()>
<com.ichi2.anki.Statistics$StatisticFragment: Lcom/ichi2/anki/Statistics$StatisticFragment; newInstance(I)>
<com.ichi2.anki.Statistics$StatisticFragment: V onResume()>
<com.ichi2.anki.StudyOptionsFragment: V <init>()>
<com.ichi2.anki.StudyOptionsFragment: I access$000(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: I access$002(Lcom/ichi2/anki/StudyOptionsFragment;I)>
<com.ichi2.anki.StudyOptionsFragment: V access$100(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1000(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/Button; access$1100(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1200(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1300(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1400(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1500(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1600(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Ljava/lang/Thread; access$1700(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Ljava/lang/Thread; access$1702(Lcom/ichi2/anki/StudyOptionsFragment;Ljava/lang/Thread;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1800(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$1900(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: V access$200(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Z access$2000(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: V access$300(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: V access$400(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Lcom/ichi2/libanki/Collection; access$500(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/widget/TextView; access$600(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Z access$700(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: Z access$702(Lcom/ichi2/anki/StudyOptionsFragment;Z)>
<com.ichi2.anki.StudyOptionsFragment: V access$800(Lcom/ichi2/anki/StudyOptionsFragment;Z)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/view/View; access$900(Lcom/ichi2/anki/StudyOptionsFragment;)>
<com.ichi2.anki.StudyOptionsFragment: V animateLeft()>
<com.ichi2.anki.StudyOptionsFragment: V closeStudyOptions(I)>
<com.ichi2.anki.StudyOptionsFragment: V dismissProgressDialog()>
<com.ichi2.anki.StudyOptionsFragment: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.anki.StudyOptionsFragment: Lcom/ichi2/async/DeckTask$TaskListener; getDeckTaskListener(Z)>
<com.ichi2.anki.StudyOptionsFragment: V initAllContentViews()>
<com.ichi2.anki.StudyOptionsFragment: Lcom/ichi2/anki/StudyOptionsFragment; newInstance(Z)>
<com.ichi2.anki.StudyOptionsFragment: V openFilteredDeckOptions()>
<com.ichi2.anki.StudyOptionsFragment: V openFilteredDeckOptions(Z)>
<com.ichi2.anki.StudyOptionsFragment: V openReviewer()>
<com.ichi2.anki.StudyOptionsFragment: V refreshInterfaceAndDecklist(Z)>
<com.ichi2.anki.StudyOptionsFragment: V showCustomStudyContextMenu()>
<com.ichi2.anki.StudyOptionsFragment: V configureToolbar()>
<com.ichi2.anki.StudyOptionsFragment: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.StudyOptionsFragment: V onAttach(Landroid/app/Activity;)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/view/View; onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)>
<com.ichi2.anki.StudyOptionsFragment: V onDestroy()>
<com.ichi2.anki.StudyOptionsFragment: Z onMenuItemClick(Landroid/view/MenuItem;)>
<com.ichi2.anki.StudyOptionsFragment: V onResume()>
<com.ichi2.anki.StudyOptionsFragment: V refreshInterface()>
<com.ichi2.anki.StudyOptionsFragment: V refreshInterface(Z)>
<com.ichi2.anki.StudyOptionsFragment: V refreshInterface(ZZ)>
<com.ichi2.anki.StudyOptionsFragment: Landroid/content/SharedPreferences; restorePreferences()>
<com.ichi2.anki.StudyOptionsFragment: V setFragmentContentView(Landroid/view/View;)>
<com.ichi2.anki.api.AddContentApi$CompatV1: V <init>(Lcom/ichi2/anki/api/AddContentApi;)>
<com.ichi2.anki.api.AddContentApi$CompatV1: V <init>(Lcom/ichi2/anki/api/AddContentApi;Lcom/ichi2/anki/api/AddContentApi$1;)>
<com.ichi2.anki.api.AddContentApi$CompatV1: V addNoteToDuplicatesArray(Lcom/ichi2/anki/api/NoteInfo;Landroid/util/SparseArray;I)>
<com.ichi2.anki.api.AddContentApi$CompatV1: Landroid/util/SparseArray; findDuplicateNotes(JLjava/util/List;)>
<com.ichi2.anki.api.AddContentApi$CompatV1: I insertNotes(J[Landroid/content/ContentValues;)>
<com.ichi2.anki.api.AddContentApi$CompatV1: Landroid/database/Cursor; queryNotes(J)>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: V <init>()>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: Landroid/view/View; buildCustomView(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: V onClick(Landroid/content/DialogInterface;I)>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: V onDismiss(Landroid/content/DialogInterface;)>
<com.ichi2.anki.dialogs.AnkiDroidCrashReportDialog: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$1: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$2: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$2: V onInput(Lcom/afollestad/materialdialogs/MaterialDialog;Ljava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$3: V <init>(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$3: V <init>(Lcom/ichi2/anki/dialogs/ConfirmationDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$3: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$1$1: V <init>(Lcom/ichi2/anki/dialogs/CustomStudyDialog$1;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$1$1: V onPositive(Ljava/util/List;I)>
<com.ichi2.anki.dialogs.CustomStudyDialog$1: V <init>(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Z)>
<com.ichi2.anki.dialogs.CustomStudyDialog$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$2: V <init>(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Landroid/widget/EditText;IJZ)>
<com.ichi2.anki.dialogs.CustomStudyDialog$2: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$10: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$10: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$11: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$11: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$1: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$1: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$2: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$2: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$2: V onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$3: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$3: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$4: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$4: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$5: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$5: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$6: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$6: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$7: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$7: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$8: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$8: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$9: V <init>(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog$9: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog$2: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerBackupNoSpaceLeftDialog;)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog$1: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerConfirmDeleteDeckDialog;)>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog$1: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerContextMenu$1: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerContextMenu;)>
<com.ichi2.anki.dialogs.DeckPickerContextMenu$1: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog$1: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerExportCompleteDialog;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog$1: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog$2: V <init>(Lcom/ichi2/anki/dialogs/DeckPickerNoSpaceLeftDialog;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ExportDialog$1: V <init>(Lcom/ichi2/anki/dialogs/ExportDialog;)>
<com.ichi2.anki.dialogs.ExportDialog$1: V onClick(Lcom/afollestad/materialdialogs/MaterialDialog;Lcom/afollestad/materialdialogs/DialogAction;)>
<com.ichi2.anki.dialogs.ExportDialog$2: V <init>(Lcom/ichi2/anki/dialogs/ExportDialog;Ljava/lang/Long;)>
<com.ichi2.anki.dialogs.ExportDialog$2: V onClick(Lcom/afollestad/materialdialogs/MaterialDialog;Lcom/afollestad/materialdialogs/DialogAction;)>
<com.ichi2.anki.dialogs.ExportDialog$3: V <init>(Lcom/ichi2/anki/dialogs/ExportDialog;)>
<com.ichi2.anki.dialogs.ExportDialog$3: Z onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;[Ljava/lang/Integer;[Ljava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.ImportDialog$1: V <init>(Lcom/ichi2/anki/dialogs/ImportDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$1: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$3: V <init>(Lcom/ichi2/anki/dialogs/ImportDialog;[Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ImportDialog$3: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.ImportDialog$4: V <init>(Lcom/ichi2/anki/dialogs/ImportDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$4: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$5: V <init>(Lcom/ichi2/anki/dialogs/ImportDialog;)>
<com.ichi2.anki.dialogs.ImportDialog$5: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$1: V <init>(Lcom/ichi2/anki/dialogs/MediaCheckDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$1: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$2: V <init>(Lcom/ichi2/anki/dialogs/MediaCheckDialog;Ljava/util/ArrayList;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$2: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$3: V <init>(Lcom/ichi2/anki/dialogs/MediaCheckDialog;)>
<com.ichi2.anki.dialogs.MediaCheckDialog$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard$1: V <init>(Lcom/ichi2/anki/dialogs/NoteEditorRescheduleCard;)>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard$1: V onInput(Lcom/afollestad/materialdialogs/MaterialDialog;Ljava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.SimpleMessageDialog$1: V <init>(Lcom/ichi2/anki/dialogs/SimpleMessageDialog;)>
<com.ichi2.anki.dialogs.SimpleMessageDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$1: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$1: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$2: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$2: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$3: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$3: V onNegative(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$3: V onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$3: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$4: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$4: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$5: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$5: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$6: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$6: V onNeutral(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$6: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$7: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$7: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$8: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$8: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$9: V <init>(Lcom/ichi2/anki/dialogs/SyncErrorDialog;)>
<com.ichi2.anki.dialogs.SyncErrorDialog$9: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$2: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$2: V onPositive(Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$4$1: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$4;)>
<com.ichi2.anki.dialogs.TagsDialog$4$1: V onInput(Lcom/afollestad/materialdialogs/MaterialDialog;Ljava/lang/CharSequence;)>
<com.ichi2.anki.dialogs.TagsDialog$5: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$5: Z onQueryTextChange(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.TagsDialog$5: Z onQueryTextSubmit(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$ViewHolder: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter;Landroid/widget/CheckedTextView;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter$ViewHolder: Landroid/widget/CheckedTextView; access$800(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter$ViewHolder;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: V <init>(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: Landroid/widget/Filter; getFilter()>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: I getItemCount()>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: V onBindViewHolder(Landroid/support/v7/widget/RecyclerView$ViewHolder;I)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: V onBindViewHolder(Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter$ViewHolder;I)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: Landroid/support/v7/widget/RecyclerView$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<com.ichi2.anki.dialogs.TagsDialog$TagsArrayAdapter: V sortData()>
<com.ichi2.anki.multimediacard.fields.AudioField: V <init>()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getAudioPath()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getFormattedValue()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getHtml()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getImagePath()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getName()>
<com.ichi2.anki.multimediacard.fields.AudioField: Ljava/lang/String; getText()>
<com.ichi2.anki.multimediacard.fields.AudioField: Lcom/ichi2/anki/multimediacard/fields/EFieldType; getType()>
<com.ichi2.anki.multimediacard.fields.AudioField: Z hasTemporaryMedia()>
<com.ichi2.anki.multimediacard.fields.AudioField: Z isModified()>
<com.ichi2.anki.multimediacard.fields.AudioField: Z setAudioPath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: V setFormattedString(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: V setHasTemporaryMedia(Z)>
<com.ichi2.anki.multimediacard.fields.AudioField: Z setHtml(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: Z setImagePath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: V setName(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: Z setText(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.AudioField: Z setType(Lcom/ichi2/anki/multimediacard/fields/EFieldType;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController$1: V <init>(Lcom/ichi2/anki/multimediacard/fields/BasicAudioFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController$1: V onRecordingFinish(Landroid/view/View;)>
<com.ichi2.anki.multimediacard.fields.BasicControllerFactory: V <init>()>
<com.ichi2.anki.multimediacard.fields.BasicControllerFactory: Lcom/ichi2/anki/multimediacard/fields/IControllerFactory; getInstance()>
<com.ichi2.anki.multimediacard.fields.BasicControllerFactory: Lcom/ichi2/anki/multimediacard/fields/IFieldController; createControllerForField(Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.multimediacard.fields.FieldControllerBase: V <init>()>
<com.ichi2.anki.multimediacard.fields.FieldControllerBase: V setEditingActivity(Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;)>
<com.ichi2.anki.multimediacard.fields.FieldControllerBase: V setField(Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.multimediacard.fields.FieldControllerBase: V setFieldIndex(I)>
<com.ichi2.anki.multimediacard.fields.FieldControllerBase: V setNote(Lcom/ichi2/anki/multimediacard/IMultimediaEditableNote;)>
<com.ichi2.anki.multimediacard.fields.ImageField: V <init>()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getAudioPath()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getFormattedValue()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getHtml()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getImagePath()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getName()>
<com.ichi2.anki.multimediacard.fields.ImageField: Ljava/lang/String; getText()>
<com.ichi2.anki.multimediacard.fields.ImageField: Lcom/ichi2/anki/multimediacard/fields/EFieldType; getType()>
<com.ichi2.anki.multimediacard.fields.ImageField: Z hasTemporaryMedia()>
<com.ichi2.anki.multimediacard.fields.ImageField: Z isModified()>
<com.ichi2.anki.multimediacard.fields.ImageField: Z setAudioPath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: V setFormattedString(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: V setHasTemporaryMedia(Z)>
<com.ichi2.anki.multimediacard.fields.ImageField: Z setHtml(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: Z setImagePath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: V setName(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: Z setText(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.ImageField: Z setType(Lcom/ichi2/anki/multimediacard/fields/EFieldType;)>
<com.ichi2.anki.multimediacard.fields.TextField: V <init>()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getAudioPath()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getFormattedValue()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getHtml()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getImagePath()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getName()>
<com.ichi2.anki.multimediacard.fields.TextField: Ljava/lang/String; getText()>
<com.ichi2.anki.multimediacard.fields.TextField: Lcom/ichi2/anki/multimediacard/fields/EFieldType; getType()>
<com.ichi2.anki.multimediacard.fields.TextField: Z hasTemporaryMedia()>
<com.ichi2.anki.multimediacard.fields.TextField: Z isModified()>
<com.ichi2.anki.multimediacard.fields.TextField: Z setAudioPath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: V setFormattedString(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: V setHasTemporaryMedia(Z)>
<com.ichi2.anki.multimediacard.fields.TextField: Z setHtml(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: Z setImagePath(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: V setName(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: Z setText(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.TextField: Z setType(Lcom/ichi2/anki/multimediacard/fields/EFieldType;)>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: V <init>()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: Ljava/util/ArrayList; getFieldsPrivate()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: V circularSwap()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: Lcom/ichi2/anki/multimediacard/fields/IField; getField(I)>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: J getModelId()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: I getNumberOfFields()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: Z isModified()>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: Z setField(ILcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: V setModelId(J)>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: V setNumFields(I)>
<com.ichi2.anki.multimediacard.impl.MultimediaEditableNote: V setThisModified()>
<com.ichi2.anki.multimediacard.language.LanguageListerBeolingus: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.multimediacard.language.LanguagesListerGlosbe: V <clinit>()>
<com.ichi2.anki.multimediacard.language.LanguagesListerGlosbe: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.multimediacard.language.LanguagesListerGlosbe: Ljava/lang/String; requestToResponseLangCode(Ljava/lang/String;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/util/Map; getCustomFontsMap(Landroid/content/Context;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/lang/String; getCustomFontsStyle(Ljava/util/Map;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/lang/String; getDefaultFontStyle(Landroid/content/Context;Ljava/util/Map;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/lang/String; getDominantFontStyle(Landroid/content/Context;Ljava/util/Map;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/lang/String; getOverrideFontStyle(Landroid/content/Context;Ljava/util/Map;)>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: Ljava/lang/String; getThemeFontStyle()>
<com.ichi2.anki.reviewer.CustomFontsReviewerExt: V updateCssStyle(Ljava/lang/StringBuilder;)>
<com.ichi2.anki.reviewer.ReviewerExtRegistry: V <init>(Landroid/content/Context;)>
<com.ichi2.anki.reviewer.ReviewerExtRegistry: V updateCssStyle(Ljava/lang/StringBuilder;)>
<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: V <init>(Lcom/ichi2/anki/widgets/DeckAdapter;Landroid/view/View;)>
<com.ichi2.anki.widgets.DeckAdapter: V <init>(Landroid/view/LayoutInflater;Landroid/content/Context;)>
<com.ichi2.anki.widgets.DeckAdapter: V processNodes(Ljava/util/List;)>
<com.ichi2.anki.widgets.DeckAdapter: V processNodes(Ljava/util/List;I)>
<com.ichi2.anki.widgets.DeckAdapter: V setDeckExpander(Landroid/widget/ImageButton;Landroid/widget/ImageButton;Lcom/ichi2/libanki/Sched$DeckDueTreeNode;)>
<com.ichi2.anki.widgets.DeckAdapter: V buildDeckList(Ljava/util/List;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.widgets.DeckAdapter: I findDeckPosition(J)>
<com.ichi2.anki.widgets.DeckAdapter: Ljava/util/List; getDeckList()>
<com.ichi2.anki.widgets.DeckAdapter: I getDue()>
<com.ichi2.anki.widgets.DeckAdapter: I getEta()>
<com.ichi2.anki.widgets.DeckAdapter: I getItemCount()>
<com.ichi2.anki.widgets.DeckAdapter: V onBindViewHolder(Landroid/support/v7/widget/RecyclerView$ViewHolder;I)>
<com.ichi2.anki.widgets.DeckAdapter: V onBindViewHolder(Lcom/ichi2/anki/widgets/DeckAdapter$ViewHolder;I)>
<com.ichi2.anki.widgets.DeckAdapter: Landroid/support/v7/widget/RecyclerView$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<com.ichi2.anki.widgets.DeckAdapter: Lcom/ichi2/anki/widgets/DeckAdapter$ViewHolder; onCreateViewHolder(Landroid/view/ViewGroup;I)>
<com.ichi2.anki.widgets.DeckAdapter: V setCountsClickListener(Landroid/view/View$OnClickListener;)>
<com.ichi2.anki.widgets.DeckAdapter: V setDeckClickListener(Landroid/view/View$OnClickListener;)>
<com.ichi2.anki.widgets.DeckAdapter: V setDeckExpanderClickListener(Landroid/view/View$OnClickListener;)>
<com.ichi2.anki.widgets.DeckAdapter: V setDeckLongClickListener(Landroid/view/View$OnLongClickListener;)>
<com.ichi2.anki.widgets.FabBehavior: V <init>()>
<com.ichi2.anki.widgets.FabBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<com.ichi2.anki.widgets.FabBehavior: F getFabTranslationYForSnackbar(Landroid/support/design/widget/CoordinatorLayout;Lcom/getbase/floatingactionbutton/FloatingActionsMenu;)>
<com.ichi2.anki.widgets.FabBehavior: Z layoutDependsOn(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<com.ichi2.anki.widgets.FabBehavior: Z layoutDependsOn(Landroid/support/design/widget/CoordinatorLayout;Lcom/getbase/floatingactionbutton/FloatingActionsMenu;Landroid/view/View;)>
<com.ichi2.anki.widgets.FabBehavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<com.ichi2.anki.widgets.FabBehavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Lcom/getbase/floatingactionbutton/FloatingActionsMenu;Landroid/view/View;)>
<com.ichi2.anki.widgets.PopupMenuWithIcons: V <init>(Landroid/content/Context;Landroid/view/View;Z)>
<com.ichi2.async.Connection: V <init>()>
<com.ichi2.async.Connection: V cancel()>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection$Payload; doInBackgroundLogin(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection$Payload; doInBackgroundSync(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection$Payload; doOneInBackground(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Z getIsCancelled()>
<com.ichi2.async.Connection: Z isCancellable()>
<com.ichi2.async.Connection: Z isOnline()>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection; launchConnectionTask(Lcom/ichi2/async/Connection$TaskListener;Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection; login(Lcom/ichi2/async/Connection$TaskListener;Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection; sync(Lcom/ichi2/async/Connection$TaskListener;Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Z timeoutOccured(Ljava/lang/Exception;)>
<com.ichi2.async.Connection: Lcom/ichi2/async/Connection$Payload; doInBackground([Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.async.Connection: V onCancelled()>
<com.ichi2.async.Connection: V onPostExecute(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.async.Connection: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.async.Connection: V onPreExecute()>
<com.ichi2.async.Connection: V onProgressUpdate([Ljava/lang/Object;)>
<com.ichi2.async.Connection: V publishProgress(I)>
<com.ichi2.async.Connection: V publishProgress(IJJ)>
<com.ichi2.async.Connection: V publishProgress(Ljava/lang/String;)>
<com.ichi2.async.DeckTask$TaskListener: V <init>()>
<com.ichi2.async.DeckTask$TaskListener: V onPostExecute(Lcom/ichi2/async/DeckTask;Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask$TaskListener: V onPreExecute(Lcom/ichi2/async/DeckTask;)>
<com.ichi2.async.DeckTask$TaskListener: V onProgressUpdate(Lcom/ichi2/async/DeckTask;[Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: V <clinit>()>
<com.ichi2.async.DeckTask: V <init>(ILcom/ichi2/async/DeckTask$Listener;Lcom/ichi2/async/DeckTask;)>
<com.ichi2.async.DeckTask: V cancelTask()>
<com.ichi2.async.DeckTask: V cancelTask(I)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackGroundAddField([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackGroundDeleteField([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackGroundDeleteModel([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackGroundRepositionField([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundAddNote([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundAddTemplate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundAnswerCard([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundChangeSortField([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundCheckDatabase([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundCheckMedia([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundConfChange([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundConfRemove([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundConfReset([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundConfSetSubdecks([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundCountModels([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundDeleteDeck([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundDismissNote([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundEmptyCram([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundExportApkg([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundImportAdd([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundImportReplace([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundLoadDeckCounts([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundRebuildCram([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundRemoveTemplate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundRenderBrowserQA([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundReorder([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundRepairDeck([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundSaveCollection([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundSaveModel([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundSearchCards([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundUndo([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundUpdateNote([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackgroundUpdateValuesFromDeck([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/libanki/Card; getCard(Lcom/ichi2/libanki/Sched;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask; getInstance()>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask; launchDeckTask(ILcom/ichi2/async/DeckTask$Listener;[Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: V waitToFinish()>
<com.ichi2.async.DeckTask: Z waitToFinish(Ljava/lang/Integer;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackGroundFindEmptyCards([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Lcom/ichi2/async/DeckTask$TaskData; doInBackground([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.async.DeckTask: V doProgress(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: V onCancelled()>
<com.ichi2.async.DeckTask: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: V onPostExecute(Ljava/lang/Object;)>
<com.ichi2.async.DeckTask: V onPreExecute()>
<com.ichi2.async.DeckTask: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.async.DeckTask: V onProgressUpdate([Ljava/lang/Object;)>
<com.ichi2.compat.CompatV10$2$1: V <init>(Lcom/ichi2/compat/CompatV10$2;Landroid/widget/EditText;)>
<com.ichi2.compat.CompatV10$2$1: V onClick(Lcom/afollestad/materialdialogs/MaterialDialog;Lcom/afollestad/materialdialogs/DialogAction;)>
<com.ichi2.compat.CompatV10$2: V <init>(Lcom/ichi2/compat/CompatV10;Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.compat.CompatV10$2: V onSelection(Lcom/afollestad/materialdialogs/MaterialDialog;Landroid/view/View;ILjava/lang/CharSequence;)>
<com.ichi2.compat.CompatV10: V <init>()>
<com.ichi2.compat.CompatV10: Z deleteDatabase(Ljava/io/File;)>
<com.ichi2.compat.CompatV10: Ljava/lang/String; detagged(Ljava/lang/String;)>
<com.ichi2.compat.CompatV10: V disableDatabaseWriteAheadLogging(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.compat.CompatV10: V enableCookiesForFileSchemePages()>
<com.ichi2.compat.CompatV10: V flushWebViewCookies()>
<com.ichi2.compat.CompatV10: Landroid/net/Uri; getExportUri(Landroid/content/Context;Ljava/io/File;)>
<com.ichi2.compat.CompatV10: Landroid/content/Intent; getPreferenceSubscreenIntent(Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.compat.CompatV10: Z isImmersiveSystemUiVisible(Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.compat.CompatV10: V openUrl(Lcom/ichi2/anki/AnkiActivity;Landroid/net/Uri;)>
<com.ichi2.compat.CompatV10: V prepareWebViewCookies(Landroid/content/Context;)>
<com.ichi2.compat.CompatV10: V restartActivityInvalidateBackstack(Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.compat.CompatV10: V setFullScreen(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.compat.CompatV10: V setHTML5MediaAutoPlay(Landroid/webkit/WebSettings;Ljava/lang/Boolean;)>
<com.ichi2.compat.CompatV10: V setSelectableBackground(Landroid/view/View;)>
<com.ichi2.compat.CompatV10: V setStatusBarColor(Landroid/view/Window;I)>
<com.ichi2.compat.CompatV10: V setTtsOnUtteranceProgressListener(Landroid/speech/tts/TextToSpeech;)>
<com.ichi2.compat.CompatV10: V supportAddContentMenu(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.compat.CompatV10: V updateWidgetDimensions(Landroid/content/Context;Landroid/widget/RemoteViews;Ljava/lang/Class;)>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V <init>()>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V openCustomTab(Landroid/app/Activity;Landroid/support/customtabs/CustomTabsIntent;Landroid/net/Uri;Lcom/ichi2/compat/customtabs/CustomTabActivityHelper$CustomTabFallback;)>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V bindCustomTabsService(Landroid/app/Activity;)>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: Landroid/support/customtabs/CustomTabsSession; getSession()>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: Z mayLaunchUrl(Landroid/net/Uri;Landroid/os/Bundle;Ljava/util/List;)>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V onServiceConnected(Landroid/support/customtabs/CustomTabsClient;)>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V onServiceDisconnected()>
<com.ichi2.compat.customtabs.CustomTabActivityHelper: V unbindCustomTabsService(Landroid/app/Activity;)>
<com.ichi2.compat.customtabs.CustomTabsFallback: V <init>()>
<com.ichi2.compat.customtabs.CustomTabsFallback: V openUri(Landroid/app/Activity;Landroid/net/Uri;)>
<com.ichi2.compat.customtabs.ServiceConnection: V <init>(Lcom/ichi2/compat/customtabs/ServiceConnectionCallback;)>
<com.ichi2.compat.customtabs.ServiceConnection: V onCustomTabsServiceConnected(Landroid/content/ComponentName;Landroid/support/customtabs/CustomTabsClient;)>
<com.ichi2.compat.customtabs.ServiceConnection: V onServiceDisconnected(Landroid/content/ComponentName;)>
<com.ichi2.libanki.AnkiExporter: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.AnkiExporter: Z _modelHasMedia(Lorg/json/JSONObject;Ljava/lang/String;)>
<com.ichi2.libanki.AnkiExporter: Ljava/lang/String; removeSystemTags(Ljava/lang/String;)>
<com.ichi2.libanki.AnkiExporter: V exportInto(Ljava/lang/String;Landroid/content/Context;)>
<com.ichi2.libanki.AnkiExporter: V postExport()>
<com.ichi2.libanki.AnkiExporter: V setDid(Ljava/lang/Long;)>
<com.ichi2.libanki.AnkiExporter: V setIncludeMedia(Z)>
<com.ichi2.libanki.AnkiExporter: V setIncludeSched(Z)>
<com.ichi2.libanki.DB$MyDbErrorHandler: V <init>(Lcom/ichi2/libanki/DB;)>
<com.ichi2.libanki.DB$MyDbErrorHandler: V onCorruption(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.libanki.LaTeX$LaTeXFilter: V <init>(Lcom/ichi2/libanki/LaTeX;)>
<com.ichi2.libanki.LaTeX$LaTeXFilter: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.Models$TransformFieldAdd: V <init>(Lcom/ichi2/libanki/Models;)>
<com.ichi2.libanki.Models$TransformFieldAdd: [Ljava/lang/String; transform([Ljava/lang/String;)>
<com.ichi2.libanki.Models$TransformFieldDelete: V <init>(Lcom/ichi2/libanki/Models;I)>
<com.ichi2.libanki.Models$TransformFieldDelete: [Ljava/lang/String; transform([Ljava/lang/String;)>
<com.ichi2.libanki.Models$TransformFieldMove: V <init>(Lcom/ichi2/libanki/Models;II)>
<com.ichi2.libanki.Models$TransformFieldMove: [Ljava/lang/String; transform([Ljava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: V <init>()>
<com.ichi2.libanki.hooks.AdvancedStatistics: Lcom/ichi2/libanki/hooks/AdvancedStatistics$Settings; access$200(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: Lcom/ichi2/libanki/hooks/AdvancedStatistics$ArrayUtils; access$300(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: Lcom/ichi2/libanki/hooks/AdvancedStatistics$DeckFactory; access$400(Lcom/ichi2/libanki/hooks/AdvancedStatistics;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: Lcom/ichi2/anki/stats/StatsMetaInfo; calculateDueAsMetaInfo(Lcom/ichi2/anki/stats/StatsMetaInfo;Lcom/ichi2/libanki/Stats$AxisType;Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: Lcom/ichi2/libanki/hooks/AdvancedStatistics$PlottableSimulationResult; calculateDueAsPlottableSimulationResult(Lcom/ichi2/libanki/Stats$AxisType;Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: V install(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: V uninstall(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.AdvancedStatistics: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.ChessFilter: V <clinit>()>
<com.ichi2.libanki.hooks.ChessFilter: V <init>()>
<com.ichi2.libanki.hooks.ChessFilter: Ljava/lang/String; fenToChessboard(Ljava/lang/String;)>
<com.ichi2.libanki.hooks.ChessFilter: V install(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.ChessFilter: V uninstall(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.ChessFilter: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Furigana: V <init>(Lcom/ichi2/libanki/hooks/FuriganaFilters;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Furigana: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Kana: V <init>(Lcom/ichi2/libanki/hooks/FuriganaFilters;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Kana: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Kanji: V <init>(Lcom/ichi2/libanki/hooks/FuriganaFilters;)>
<com.ichi2.libanki.hooks.FuriganaFilters$Kanji: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.HebrewFixFilter: V <clinit>()>
<com.ichi2.libanki.hooks.HebrewFixFilter: V <init>()>
<com.ichi2.libanki.hooks.HebrewFixFilter: Ljava/lang/String; applyFixForHebrew(Ljava/lang/String;)>
<com.ichi2.libanki.hooks.HebrewFixFilter: V install(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.HebrewFixFilter: Z regionOverlapsMedia(Ljava/util/List;II)>
<com.ichi2.libanki.hooks.HebrewFixFilter: V uninstall(Lcom/ichi2/libanki/hooks/Hooks;)>
<com.ichi2.libanki.hooks.HebrewFixFilter: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.HebrewFixFilter: Ljava/lang/String; translate(Ljava/lang/String;)>
<com.ichi2.libanki.hooks.HintFilter$Hint: V <init>(Lcom/ichi2/libanki/hooks/HintFilter;)>
<com.ichi2.libanki.hooks.HintFilter$Hint: Ljava/lang/Object; runFilter(Ljava/lang/Object;[Ljava/lang/Object;)>
<com.ichi2.libanki.hooks.Leech$LeechHook: V <init>(Lcom/ichi2/libanki/hooks/Leech;)>
<com.ichi2.libanki.hooks.Leech$LeechHook: V runHook([Ljava/lang/Object;)>
<com.ichi2.libanki.importer.Anki2Importer: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: J _did(J)>
<com.ichi2.libanki.importer.Anki2Importer: Ljava/io/BufferedInputStream; _dstMediaData(Ljava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: V _import()>
<com.ichi2.libanki.importer.Anki2Importer: V _importCards()>
<com.ichi2.libanki.importer.Anki2Importer: V _importNotes()>
<com.ichi2.libanki.importer.Anki2Importer: V _importStaticMedia()>
<com.ichi2.libanki.importer.Anki2Importer: Ljava/io/BufferedInputStream; _mediaData(Ljava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: Ljava/io/BufferedInputStream; _mediaData(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: J _mid(J)>
<com.ichi2.libanki.importer.Anki2Importer: Ljava/lang/String; _mungeMedia(JLjava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: V _postImport()>
<com.ichi2.libanki.importer.Anki2Importer: V _prepareFiles()>
<com.ichi2.libanki.importer.Anki2Importer: V _prepareModels()>
<com.ichi2.libanki.importer.Anki2Importer: Z _uniquifyNote([Ljava/lang/Object;)>
<com.ichi2.libanki.importer.Anki2Importer: V _writeDstMedia(Ljava/lang/String;Ljava/io/BufferedInputStream;)>
<com.ichi2.libanki.importer.Anki2Importer: Z compareMedia(Ljava/io/BufferedInputStream;Ljava/io/BufferedInputStream;)>
<com.ichi2.libanki.importer.Anki2Importer: [B _mediaPick(Ljava/io/BufferedInputStream;)>
<com.ichi2.libanki.importer.Anki2Importer: Ljava/io/BufferedInputStream; _srcMediaData(Ljava/lang/String;)>
<com.ichi2.libanki.importer.Anki2Importer: I getAdded()>
<com.ichi2.libanki.importer.Anki2Importer: I getDupes()>
<com.ichi2.libanki.importer.Anki2Importer: I getUpdated()>
<com.ichi2.libanki.importer.Anki2Importer: V publishProgress(III)>
<com.ichi2.libanki.importer.Anki2Importer: V run()>
<com.ichi2.libanki.importer.Anki2Importer: V setDupeOnSchemaChange(Z)>
<com.ichi2.libanki.importer.NoteImporter: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.importer.NoteImporter: I getTotal()>
<com.ichi2.libanki.importer.NoteImporter: V run()>
<com.ichi2.libanki.sync.FullSyncer: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.sync.FullSyncer: [Ljava/lang/Object; download()>
<com.ichi2.libanki.sync.FullSyncer: Ljava/lang/String; syncURL()>
<com.ichi2.libanki.sync.FullSyncer: [Ljava/lang/Object; upload()>
<com.ichi2.libanki.sync.RemoteMediaServer: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;Lcom/ichi2/async/Connection;)>
<com.ichi2.libanki.sync.RemoteMediaServer: Ljava/lang/Object; _dataOnly(Lorg/json/JSONObject;Ljava/lang/Class;)>
<com.ichi2.libanki.sync.RemoteMediaServer: Lorg/json/JSONObject; begin()>
<com.ichi2.libanki.sync.RemoteMediaServer: Ljava/util/zip/ZipFile; downloadFiles(Ljava/util/List;)>
<com.ichi2.libanki.sync.RemoteMediaServer: Lorg/json/JSONArray; mediaChanges(I)>
<com.ichi2.libanki.sync.RemoteMediaServer: Ljava/lang/String; mediaSanity(I)>
<com.ichi2.libanki.sync.RemoteMediaServer: Ljava/lang/String; syncURL()>
<com.ichi2.libanki.sync.RemoteMediaServer: Lorg/json/JSONArray; uploadChanges(Ljava/io/File;)>
<com.ichi2.libanki.sync.RemoteServer: V <init>(Lcom/ichi2/async/Connection;Ljava/lang/String;)>
<com.ichi2.libanki.sync.RemoteServer: Ljava/lang/String; _run(Ljava/lang/String;Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.RemoteServer: Lorg/json/JSONObject; parseDict(Ljava/lang/String;)>
<com.ichi2.libanki.sync.RemoteServer: J parseLong(Ljava/lang/String;)>
<com.ichi2.libanki.sync.RemoteServer: V abort()>
<com.ichi2.libanki.sync.RemoteServer: Lorg/json/JSONObject; applyChanges(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.RemoteServer: V applyChunk(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.RemoteServer: Lorg/json/JSONObject; chunk()>
<com.ichi2.libanki.sync.RemoteServer: J finish()>
<com.ichi2.libanki.sync.RemoteServer: Lorg/apache/http/HttpResponse; hostKey(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.libanki.sync.RemoteServer: Lorg/apache/http/HttpResponse; meta()>
<com.ichi2.libanki.sync.RemoteServer: Lorg/json/JSONObject; sanityCheck2(Lorg/json/JSONObject;)>
<com.ichi2.libanki.sync.RemoteServer: Lorg/json/JSONObject; start(Lorg/json/JSONObject;)>
<com.ichi2.ui.DividerItemDecoration: V <init>(Landroid/content/Context;)>
<com.ichi2.ui.DividerItemDecoration: V onDrawOver(Landroid/graphics/Canvas;Landroid/support/v7/widget/RecyclerView;Landroid/support/v7/widget/RecyclerView$State;)>
<com.ichi2.ui.SlidingTabLayout$InternalViewPagerListener: V <init>(Lcom/ichi2/ui/SlidingTabLayout;)>
<com.ichi2.ui.SlidingTabLayout$InternalViewPagerListener: V <init>(Lcom/ichi2/ui/SlidingTabLayout;Lcom/ichi2/ui/SlidingTabLayout$1;)>
<com.ichi2.ui.SlidingTabLayout$InternalViewPagerListener: V onPageScrollStateChanged(I)>
<com.ichi2.ui.SlidingTabLayout$InternalViewPagerListener: V onPageScrolled(IFI)>
<com.ichi2.ui.SlidingTabLayout$InternalViewPagerListener: V onPageSelected(I)>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: V <init>()>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: V <init>(Lcom/ichi2/ui/SlidingTabStrip$1;)>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: I getDividerColor(I)>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: I getIndicatorColor(I)>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: V setDividerColors([I)>
<com.ichi2.ui.SlidingTabStrip$SimpleTabColorizer: V setIndicatorColors([I)>
<com.ichi2.utils.Threads$SingleThreadChecker: V <init>(Ljava/lang/Thread;)>
<com.ichi2.utils.Threads$SingleThreadChecker: V <init>(Ljava/lang/Thread;Lcom/ichi2/utils/Threads$1;)>
<com.ichi2.utils.Threads$SingleThreadChecker: V checkThread()>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V <clinit>()>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V <init>()>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V <init>(Lcom/ichi2/widget/WidgetStatus$1;)>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V updateCounts(Landroid/content/Context;)>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: Landroid/content/Context; doInBackground([Landroid/content/Context;)>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V onPostExecute(Landroid/content/Context;)>
<com.ichi2.widget.WidgetStatus$UpdateDeckStatusAsyncTask: V onPostExecute(Ljava/lang/Object;)>
<com.wildplot.android.parsing.Atom: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.Atom: Z initAsExpInBrackets(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsFunctionMath(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsFunctionX(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsFunctionXY(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsNumber(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsVariable(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsXVariable(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Z initAsYVariable(Ljava/lang/String;)>
<com.wildplot.android.parsing.Atom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.Atom: D getValue()>
<com.wildplot.android.parsing.Atom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.FunctionXAtom: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.FunctionXAtom: Z init(Ljava/lang/String;)>
<com.wildplot.android.parsing.AtomTypes.FunctionXAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.FunctionXAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.FunctionXAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: Z init(Ljava/lang/String;)>
<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom: Z init(Ljava/lang/String;)>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom: Lcom/wildplot/android/parsing/AtomTypes/MathFunctionAtom$MathType; getMathType()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.MathFunctionAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.NumberAtom: V <init>(Ljava/lang/String;)>
<com.wildplot.android.parsing.AtomTypes.NumberAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.NumberAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.NumberAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.VariableAtom: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.VariableAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.VariableAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.VariableAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.XVariableAtom: V <init>(Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.XVariableAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.XVariableAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.XVariableAtom: Z isVariable()>
<com.wildplot.android.parsing.AtomTypes.YVariableAtom: V <init>(Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.AtomTypes.YVariableAtom: Lcom/wildplot/android/parsing/Atom$AtomType; getAtomType()>
<com.wildplot.android.parsing.AtomTypes.YVariableAtom: D getValue()>
<com.wildplot.android.parsing.AtomTypes.YVariableAtom: Z isVariable()>
<com.wildplot.android.parsing.Expression: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.Expression: Z initAsExpPlusOrMinusTerm(Ljava/lang/String;)>
<com.wildplot.android.parsing.Expression: Z initAsTerm(Ljava/lang/String;)>
<com.wildplot.android.parsing.Expression: Lcom/wildplot/android/parsing/Expression$ExpressionType; getExpressionType()>
<com.wildplot.android.parsing.Expression: D getValue()>
<com.wildplot.android.parsing.Expression: Z isVariable()>
<com.wildplot.android.parsing.Factor: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.Factor: Z initAsMinusFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Factor: Z initAsPlusFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Factor: Z initAsPow(Ljava/lang/String;)>
<com.wildplot.android.parsing.Factor: Lcom/wildplot/android/parsing/Factor$FactorType; getFactorType()>
<com.wildplot.android.parsing.Factor: D getValue()>
<com.wildplot.android.parsing.Factor: Z isVariable()>
<com.wildplot.android.parsing.Pow: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.Pow: Z initAsAtom(Ljava/lang/String;)>
<com.wildplot.android.parsing.Pow: Z initAsAtomPowFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Pow: Z initAsAtomSqrtFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Pow: Lcom/wildplot/android/parsing/Pow$PowType; getPowType()>
<com.wildplot.android.parsing.Pow: D getValue()>
<com.wildplot.android.parsing.Pow: Z isVariable()>
<com.wildplot.android.parsing.Term: V <init>(Ljava/lang/String;Lcom/wildplot/android/parsing/TopLevelParser;)>
<com.wildplot.android.parsing.Term: Z initAsFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Term: Z initAsTermMulOrDivFactor(Ljava/lang/String;)>
<com.wildplot.android.parsing.Term: Lcom/wildplot/android/parsing/Term$TermType; getTermType()>
<com.wildplot.android.parsing.Term: D getValue()>
<com.wildplot.android.parsing.Term: Z isVariable()>
<com.wildplot.android.parsing.TopLevelParser: V <init>(Ljava/lang/String;Ljava/util/HashMap;)>
<com.wildplot.android.parsing.TopLevelParser: Z initExpressionString()>
<com.wildplot.android.parsing.TopLevelParser: V initVarMap()>
<com.wildplot.android.parsing.TopLevelParser: Z stringHasValidBrackets(Ljava/lang/String;)>
<com.wildplot.android.parsing.TopLevelParser: Lcom/wildplot/android/parsing/TopLevelParser; createCopy()>
<com.wildplot.android.parsing.TopLevelParser: Lcom/wildplot/android/parsing/TopLevelParser; createCopy(Ljava/util/HashMap;)>
<com.wildplot.android.parsing.TopLevelParser: D f(D)>
<com.wildplot.android.parsing.TopLevelParser: D f(DD)>
<com.wildplot.android.parsing.TopLevelParser: Ljava/lang/String; getFuncName()>
<com.wildplot.android.parsing.TopLevelParser: D getFuncVal(Ljava/lang/String;D)>
<com.wildplot.android.parsing.TopLevelParser: D getFuncVal(Ljava/lang/String;DD)>
<com.wildplot.android.parsing.TopLevelParser: D getVarVal(Ljava/lang/String;)>
<com.wildplot.android.parsing.TopLevelParser: D getX()>
<com.wildplot.android.parsing.TopLevelParser: D getY()>
<com.wildplot.android.parsing.TopLevelParser: Ljava/lang/String; getxName()>
<com.wildplot.android.parsing.TopLevelParser: Ljava/lang/String; getyName()>
<com.wildplot.android.parsing.TopLevelParser: Z isValid()>
<com.wildplot.android.parsing.TopLevelParser: V setVarVal(Ljava/lang/String;D)>
<com.wildplot.android.parsing.TopLevelParser: V setVarVal(Ljava/lang/String;Ljava/lang/String;)>
<com.wildplot.android.parsing.TopLevelParser: V setX(D)>
<com.wildplot.android.parsing.TopLevelParser: V setY(D)>
<com.wildplot.android.rendering.BarGraph: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DLcom/wildplot/android/rendering/interfaces/Function2D;DLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.BarGraph: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DLcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.BarGraph: V <init>(Lcom/wildplot/android/rendering/PlotSheet;D[[DLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.BarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.BarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.BarGraph: V abortAndReset()>
<com.wildplot.android.rendering.BarGraph: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor()>
<com.wildplot.android.rendering.BarGraph: Ljava/lang/String; getName()>
<com.wildplot.android.rendering.BarGraph: Z isClusterable()>
<com.wildplot.android.rendering.BarGraph: Z isCritical()>
<com.wildplot.android.rendering.BarGraph: Z isOnFrame()>
<com.wildplot.android.rendering.BarGraph: Z nameIsSet()>
<com.wildplot.android.rendering.BarGraph: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.BarGraph: V setFillColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.BarGraph: V setFilling(Z)>
<com.wildplot.android.rendering.BarGraph: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.DrawableContainer: V <init>(ZZ)>
<com.wildplot.android.rendering.DrawableContainer: V abortAndReset()>
<com.wildplot.android.rendering.DrawableContainer: V addDrawable(Lcom/wildplot/android/rendering/interfaces/Drawable;)>
<com.wildplot.android.rendering.DrawableContainer: I getSize()>
<com.wildplot.android.rendering.DrawableContainer: Z isClusterable()>
<com.wildplot.android.rendering.DrawableContainer: Z isCritical()>
<com.wildplot.android.rendering.DrawableContainer: Z isOnFrame()>
<com.wildplot.android.rendering.DrawableContainer: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.FunctionDrawer: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.FunctionDrawer: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;DD)>
<com.wildplot.android.rendering.FunctionDrawer: V abortAndReset()>
<com.wildplot.android.rendering.FunctionDrawer: D getExtraScaleFactor()>
<com.wildplot.android.rendering.FunctionDrawer: D getMaxValue(I)>
<com.wildplot.android.rendering.FunctionDrawer: Z isClusterable()>
<com.wildplot.android.rendering.FunctionDrawer: Z isCritical()>
<com.wildplot.android.rendering.FunctionDrawer: Z isOnFrame()>
<com.wildplot.android.rendering.FunctionDrawer: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.FunctionDrawer: V setAutoscale(D)>
<com.wildplot.android.rendering.FunctionDrawer: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.FunctionDrawer: V setOnFrame()>
<com.wildplot.android.rendering.FunctionDrawer: V setOnFrame(D)>
<com.wildplot.android.rendering.FunctionDrawer: V setSize(F)>
<com.wildplot.android.rendering.FunctionDrawer: V unsetAutoscale()>
<com.wildplot.android.rendering.FunctionDrawer: V unsetOnFrame()>
<com.wildplot.android.rendering.FunctionDrawer_y: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.FunctionDrawer_y: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;DD)>
<com.wildplot.android.rendering.FunctionDrawer_y: V abortAndReset()>
<com.wildplot.android.rendering.FunctionDrawer_y: D getExtraScaleFactor()>
<com.wildplot.android.rendering.FunctionDrawer_y: D getMaxValue(I)>
<com.wildplot.android.rendering.FunctionDrawer_y: Z isClusterable()>
<com.wildplot.android.rendering.FunctionDrawer_y: Z isCritical()>
<com.wildplot.android.rendering.FunctionDrawer_y: Z isOnFrame()>
<com.wildplot.android.rendering.FunctionDrawer_y: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.FunctionDrawer_y: V setAutoscale(D)>
<com.wildplot.android.rendering.FunctionDrawer_y: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.FunctionDrawer_y: V setOnFrame()>
<com.wildplot.android.rendering.FunctionDrawer_y: V setOnFrame(D)>
<com.wildplot.android.rendering.FunctionDrawer_y: V setSize(F)>
<com.wildplot.android.rendering.FunctionDrawer_y: V unsetAutoscale()>
<com.wildplot.android.rendering.FunctionDrawer_y: V unsetOnFrame()>
<com.wildplot.android.rendering.Integral: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.Integral: V <init>(Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/interfaces/Function2D;Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.Integral: V abortAndReset()>
<com.wildplot.android.rendering.Integral: Z isClusterable()>
<com.wildplot.android.rendering.Integral: Z isCritical()>
<com.wildplot.android.rendering.Integral: Z isOnFrame()>
<com.wildplot.android.rendering.Integral: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.Integral: V setColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.LegendDrawable: V <init>()>
<com.wildplot.android.rendering.LegendDrawable: V abortAndReset()>
<com.wildplot.android.rendering.LegendDrawable: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor()>
<com.wildplot.android.rendering.LegendDrawable: Ljava/lang/String; getName()>
<com.wildplot.android.rendering.LegendDrawable: Z isClusterable()>
<com.wildplot.android.rendering.LegendDrawable: Z isCritical()>
<com.wildplot.android.rendering.LegendDrawable: Z isOnFrame()>
<com.wildplot.android.rendering.LegendDrawable: Z nameIsSet()>
<com.wildplot.android.rendering.LegendDrawable: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.LegendDrawable: V setColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.LegendDrawable: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.Lines: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.Lines: V abortAndReset()>
<com.wildplot.android.rendering.Lines: V drawPoint(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.Lines: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor()>
<com.wildplot.android.rendering.Lines: Ljava/lang/String; getName()>
<com.wildplot.android.rendering.Lines: Z isClusterable()>
<com.wildplot.android.rendering.Lines: Z isCritical()>
<com.wildplot.android.rendering.Lines: Z isOnFrame()>
<com.wildplot.android.rendering.Lines: Z nameIsSet()>
<com.wildplot.android.rendering.Lines: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.Lines: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.Lines: V setShadow(FFFLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.Lines: V setSize(F)>
<com.wildplot.android.rendering.Lines: V unsetShadow()>
<com.wildplot.android.rendering.LinesPoints: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.LinesPoints: V abortAndReset()>
<com.wildplot.android.rendering.LinesPoints: V drawPoint(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.LinesPoints: Z isClusterable()>
<com.wildplot.android.rendering.LinesPoints: Z isCritical()>
<com.wildplot.android.rendering.LinesPoints: Z isOnFrame()>
<com.wildplot.android.rendering.LinesPoints: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.PieChart: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[D[Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.PieChart: V checkArguments(Lcom/wildplot/android/rendering/PlotSheet;[D[Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.PieChart: V drawSectorLabels(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;FFF)>
<com.wildplot.android.rendering.PieChart: V drawSectors(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;FFF)>
<com.wildplot.android.rendering.PieChart: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getLastSectorColor()>
<com.wildplot.android.rendering.PieChart: V abortAndReset()>
<com.wildplot.android.rendering.PieChart: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor()>
<com.wildplot.android.rendering.PieChart: Ljava/lang/String; getName()>
<com.wildplot.android.rendering.PieChart: Z isClusterable()>
<com.wildplot.android.rendering.PieChart: Z isCritical()>
<com.wildplot.android.rendering.PieChart: Z isOnFrame()>
<com.wildplot.android.rendering.PieChart: Z nameIsSet()>
<com.wildplot.android.rendering.PieChart: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.PieChart: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.PlotSheet: V <init>(DDDD)>
<com.wildplot.android.rendering.PlotSheet: V <init>(DDDDLjava/util/Vector;)>
<com.wildplot.android.rendering.PlotSheet: V drawMultiMode(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.PlotSheet: V drawSingleMode(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;I)>
<com.wildplot.android.rendering.PlotSheet: V prepareDrawables()>
<com.wildplot.android.rendering.PlotSheet: D xToCoordinateLinear(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: D xToCoordinateLog(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F xToGraphicLinear(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F xToGraphicLog(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F yToGraphicLinear(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F yToGraphicLog(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: V abortAndReset()>
<com.wildplot.android.rendering.PlotSheet: V addDrawable(Lcom/wildplot/android/rendering/interfaces/Drawable;)>
<com.wildplot.android.rendering.PlotSheet: [F getFrameThickness()>
<com.wildplot.android.rendering.PlotSheet: [D getxRange()>
<com.wildplot.android.rendering.PlotSheet: [D getyRange()>
<com.wildplot.android.rendering.PlotSheet: Z isClusterable()>
<com.wildplot.android.rendering.PlotSheet: Z isCritical()>
<com.wildplot.android.rendering.PlotSheet: Z isMultiMode()>
<com.wildplot.android.rendering.PlotSheet: Z isOnFrame()>
<com.wildplot.android.rendering.PlotSheet: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.PlotSheet: V setBackgroundColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.PlotSheet: V setBorder()>
<com.wildplot.android.rendering.PlotSheet: V setBorderThickness(F)>
<com.wildplot.android.rendering.PlotSheet: V setFontSize(F)>
<com.wildplot.android.rendering.PlotSheet: V setFrameThickness(FFFF)>
<com.wildplot.android.rendering.PlotSheet: V setIsBackwards(Z)>
<com.wildplot.android.rendering.PlotSheet: V setLogX()>
<com.wildplot.android.rendering.PlotSheet: V setLogY()>
<com.wildplot.android.rendering.PlotSheet: V setTextColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.PlotSheet: V setTitle(Ljava/lang/String;)>
<com.wildplot.android.rendering.PlotSheet: V setTypeface(Landroid/graphics/Typeface;)>
<com.wildplot.android.rendering.PlotSheet: V setxRange([D)>
<com.wildplot.android.rendering.PlotSheet: V setyRange([D)>
<com.wildplot.android.rendering.PlotSheet: D ticsCalcX(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: D ticsCalcY(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: [D toCoordinatePoint(FFLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: [F toGraphicPoint(DDLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: V unsetBorder()>
<com.wildplot.android.rendering.PlotSheet: V unsetFontSize()>
<com.wildplot.android.rendering.PlotSheet: V unsetLogX()>
<com.wildplot.android.rendering.PlotSheet: V unsetLogY()>
<com.wildplot.android.rendering.PlotSheet: V updateX(DD)>
<com.wildplot.android.rendering.PlotSheet: V updateY(DD)>
<com.wildplot.android.rendering.PlotSheet: D xToCoordinate(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F xToGraphic(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: D yToCoordinate(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: D yToCoordinateLinear(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: D yToCoordinateLog(FLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PlotSheet: F yToGraphic(DLcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PointDrawer2D: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.PointDrawer2D: V abortAndReset()>
<com.wildplot.android.rendering.PointDrawer2D: V drawPoint(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.PointDrawer2D: Z isClusterable()>
<com.wildplot.android.rendering.PointDrawer2D: Z isCritical()>
<com.wildplot.android.rendering.PointDrawer2D: Z isOnFrame()>
<com.wildplot.android.rendering.PointDrawer2D: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: V <init>(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: V <init>(Lcom/wildplot/android/rendering/ReliefDrawer;Lcom/wildplot/android/rendering/ReliefDrawer$1;)>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: D ticsCalc(DF)>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: V abortAndReset()>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: Z isClusterable()>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: Z isCritical()>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: Z isOnFrame()>
<com.wildplot.android.rendering.ReliefDrawer$ReliefLegend: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: V <init>(DILcom/wildplot/android/rendering/interfaces/Function3D;Lcom/wildplot/android/rendering/PlotSheet;Z)>
<com.wildplot.android.rendering.ReliefDrawer: V <init>(DILcom/wildplot/android/rendering/interfaces/Function3D;Lcom/wildplot/android/rendering/PlotSheet;ZLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: V <init>(DLcom/wildplot/android/rendering/interfaces/Function3D;Lcom/wildplot/android/rendering/PlotSheet;)>
<com.wildplot.android.rendering.ReliefDrawer: Z access$100(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Lcom/wildplot/android/rendering/interfaces/Function3D; access$1000(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Z access$102(Lcom/wildplot/android/rendering/ReliefDrawer;Z)>
<com.wildplot.android.rendering.ReliefDrawer: F access$1100(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Z access$1200(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Z access$200(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: [D access$300(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: [D access$400(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: [D access$500(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Lcom/wildplot/android/rendering/PlotSheet; access$600(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: D access$700(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: D access$800(Lcom/wildplot/android/rendering/ReliefDrawer;)>
<com.wildplot.android.rendering.ReliefDrawer: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; access$900(Lcom/wildplot/android/rendering/ReliefDrawer;D)>
<com.wildplot.android.rendering.ReliefDrawer: V drawBorders(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: V drawColoredRelief(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap; getColor(D)>
<com.wildplot.android.rendering.ReliefDrawer: Z onBorder(DD)>
<com.wildplot.android.rendering.ReliefDrawer: Z rangeHasChanged()>
<com.wildplot.android.rendering.ReliefDrawer: V scanDepth(Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: V abortAndReset()>
<com.wildplot.android.rendering.ReliefDrawer: Lcom/wildplot/android/rendering/interfaces/Drawable; getLegend()>
<com.wildplot.android.rendering.ReliefDrawer: F getPixelSkip()>
<com.wildplot.android.rendering.ReliefDrawer: Z isClusterable()>
<com.wildplot.android.rendering.ReliefDrawer: Z isCritical()>
<com.wildplot.android.rendering.ReliefDrawer: Z isOnFrame()>
<com.wildplot.android.rendering.ReliefDrawer: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.ReliefDrawer: V setPixelSkip(F)>
<com.wildplot.android.rendering.ReliefDrawer: V setThreadCnt(I)>
<com.wildplot.android.rendering.XAxis: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DDD)>
<com.wildplot.android.rendering.XAxis: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DFF)>
<com.wildplot.android.rendering.XAxis: V drawDownwardsMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxis: V drawDownwardsMinorMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxis: V drawExplicitMarkers(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxis: V drawImplicitMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxis: V drawMarkers(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxis: V drawMinorMarkers(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxis: V drawNumbering(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;DI)>
<com.wildplot.android.rendering.XAxis: V drawUpwardsMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxis: V drawUpwardsMinorMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxis: V abortAndReset()>
<com.wildplot.android.rendering.XAxis: D getyOffset()>
<com.wildplot.android.rendering.XAxis: Z isClusterable()>
<com.wildplot.android.rendering.XAxis: Z isCritical()>
<com.wildplot.android.rendering.XAxis: Z isOnFrame()>
<com.wildplot.android.rendering.XAxis: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxis: V setExplicitTicks([D[Ljava/lang/String;)>
<com.wildplot.android.rendering.XAxis: V setIntegerNumbering(Z)>
<com.wildplot.android.rendering.XAxis: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.XAxis: V setOnFrame()>
<com.wildplot.android.rendering.XAxis: V setyOffset(D)>
<com.wildplot.android.rendering.XAxis: V unsetExplicitTics()>
<com.wildplot.android.rendering.XAxis: V unsetOnFrame()>
<com.wildplot.android.rendering.XAxis: V unsetyOffset()>
<com.wildplot.android.rendering.XAxisBarGraph: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DDLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.XAxisBarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.XAxisBarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxisBarGraph: V abortAndReset()>
<com.wildplot.android.rendering.XAxisBarGraph: D getExtraScaleFactor()>
<com.wildplot.android.rendering.XAxisBarGraph: Z isClusterable()>
<com.wildplot.android.rendering.XAxisBarGraph: Z isCritical()>
<com.wildplot.android.rendering.XAxisBarGraph: Z isOnFrame()>
<com.wildplot.android.rendering.XAxisBarGraph: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxisBarGraph: V setAutoscale()>
<com.wildplot.android.rendering.XAxisBarGraph: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.XAxisBarGraph: V setFillColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.XAxisBarGraph: V setFilling(Z)>
<com.wildplot.android.rendering.XAxisBarGraph: V setOnFrame()>
<com.wildplot.android.rendering.XAxisBarGraph: V setOnFrame(D)>
<com.wildplot.android.rendering.XAxisBarGraph: V unsetAutoscale()>
<com.wildplot.android.rendering.XAxisBarGraph: V unsetOnFrame()>
<com.wildplot.android.rendering.XAxisHistoGram: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DDDLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.XAxisHistoGram: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.XAxisHistoGram: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.XAxisHistoGram: D getSizeInRange(DD)>
<com.wildplot.android.rendering.XAxisHistoGram: V abortAndReset()>
<com.wildplot.android.rendering.XAxisHistoGram: D getExtraScaleFactor()>
<com.wildplot.android.rendering.XAxisHistoGram: D getMaxValue()>
<com.wildplot.android.rendering.XAxisHistoGram: Z isClusterable()>
<com.wildplot.android.rendering.XAxisHistoGram: Z isCritical()>
<com.wildplot.android.rendering.XAxisHistoGram: Z isOnFrame()>
<com.wildplot.android.rendering.XAxisHistoGram: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XAxisHistoGram: V setAutoscale(D)>
<com.wildplot.android.rendering.XAxisHistoGram: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.XAxisHistoGram: V setFillColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.XAxisHistoGram: V setFilling(Z)>
<com.wildplot.android.rendering.XAxisHistoGram: V setOnFrame()>
<com.wildplot.android.rendering.XAxisHistoGram: V setOnFrame(D)>
<com.wildplot.android.rendering.XAxisHistoGram: V unsetAutoscale()>
<com.wildplot.android.rendering.XAxisHistoGram: V unsetOnFrame()>
<com.wildplot.android.rendering.XGrid: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.XGrid: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DI)>
<com.wildplot.android.rendering.XGrid: V <init>(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.XGrid: V <init>(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;Lcom/wildplot/android/rendering/PlotSheet;DI)>
<com.wildplot.android.rendering.XGrid: V drawGridLine(DLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.XGrid: V abortAndReset()>
<com.wildplot.android.rendering.XGrid: Z isClusterable()>
<com.wildplot.android.rendering.XGrid: Z isCritical()>
<com.wildplot.android.rendering.XGrid: Z isOnFrame()>
<com.wildplot.android.rendering.XGrid: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.XGrid: V setColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.XGrid: V setGridOnDownside(Z)>
<com.wildplot.android.rendering.XGrid: V setGridOnRight(Z)>
<com.wildplot.android.rendering.XGrid: V setGridOnUpside(Z)>
<com.wildplot.android.rendering.XGrid: V setGridkOnLeft(Z)>
<com.wildplot.android.rendering.YAxis: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DDD)>
<com.wildplot.android.rendering.YAxis: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DFF)>
<com.wildplot.android.rendering.YAxis: V drawLeftMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V drawLeftMinorMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V drawMarkers(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YAxis: V drawMinorMarkers(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YAxis: V drawNumbering(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V drawNumberingOnRightSide(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V drawRightMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V drawRightMinorMarker(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxis: V abortAndReset()>
<com.wildplot.android.rendering.YAxis: D getxOffset()>
<com.wildplot.android.rendering.YAxis: Z isClusterable()>
<com.wildplot.android.rendering.YAxis: Z isCritical()>
<com.wildplot.android.rendering.YAxis: Z isOnFrame()>
<com.wildplot.android.rendering.YAxis: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YAxis: V setHasNumbersRotated()>
<com.wildplot.android.rendering.YAxis: V setIntegerNumbering(Z)>
<com.wildplot.android.rendering.YAxis: V setIntersectionOffset(D)>
<com.wildplot.android.rendering.YAxis: V setLog()>
<com.wildplot.android.rendering.YAxis: V setName(Ljava/lang/String;)>
<com.wildplot.android.rendering.YAxis: V setOnFrame()>
<com.wildplot.android.rendering.YAxis: V setOnRightSideFrame()>
<com.wildplot.android.rendering.YAxis: V setxOffset(D)>
<com.wildplot.android.rendering.YAxis: V unsetHasNumbersRotated()>
<com.wildplot.android.rendering.YAxis: V unsetLog()>
<com.wildplot.android.rendering.YAxis: V unsetOnFrame()>
<com.wildplot.android.rendering.YAxis: V unsetxOffset()>
<com.wildplot.android.rendering.YAxisBarGraph: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DDDLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.YAxisBarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.YAxisBarGraph: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxisBarGraph: V abortAndReset()>
<com.wildplot.android.rendering.YAxisBarGraph: D getExtraScaleFactor()>
<com.wildplot.android.rendering.YAxisBarGraph: Z isClusterable()>
<com.wildplot.android.rendering.YAxisBarGraph: Z isCritical()>
<com.wildplot.android.rendering.YAxisBarGraph: Z isOnFrame()>
<com.wildplot.android.rendering.YAxisBarGraph: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YAxisBarGraph: V setAutoscale()>
<com.wildplot.android.rendering.YAxisBarGraph: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.YAxisBarGraph: V setFillColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.YAxisBarGraph: V setFilling(Z)>
<com.wildplot.android.rendering.YAxisBarGraph: V setOnFrame()>
<com.wildplot.android.rendering.YAxisBarGraph: V setOnFrame(D)>
<com.wildplot.android.rendering.YAxisBarGraph: V unsetAutoscale()>
<com.wildplot.android.rendering.YAxisBarGraph: V unsetOnFrame()>
<com.wildplot.android.rendering.YAxisHistoGram: V <init>(Lcom/wildplot/android/rendering/PlotSheet;[[DDDLcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.YAxisHistoGram: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.YAxisHistoGram: V drawBar(DDLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;D)>
<com.wildplot.android.rendering.YAxisHistoGram: D getSizeInRange(DD)>
<com.wildplot.android.rendering.YAxisHistoGram: V abortAndReset()>
<com.wildplot.android.rendering.YAxisHistoGram: D getExtraScaleFactor()>
<com.wildplot.android.rendering.YAxisHistoGram: D getMaxValue()>
<com.wildplot.android.rendering.YAxisHistoGram: Z isClusterable()>
<com.wildplot.android.rendering.YAxisHistoGram: Z isCritical()>
<com.wildplot.android.rendering.YAxisHistoGram: Z isOnFrame()>
<com.wildplot.android.rendering.YAxisHistoGram: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YAxisHistoGram: V setAutoscale(D)>
<com.wildplot.android.rendering.YAxisHistoGram: V setExtraScaleFactor(D)>
<com.wildplot.android.rendering.YAxisHistoGram: V setFillColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.YAxisHistoGram: V setFilling(Z)>
<com.wildplot.android.rendering.YAxisHistoGram: V setOnFrame()>
<com.wildplot.android.rendering.YAxisHistoGram: V setOnFrame(D)>
<com.wildplot.android.rendering.YAxisHistoGram: V unsetAutoscale()>
<com.wildplot.android.rendering.YAxisHistoGram: V unsetOnFrame()>
<com.wildplot.android.rendering.YGrid: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.YGrid: V <init>(Lcom/wildplot/android/rendering/PlotSheet;DI)>
<com.wildplot.android.rendering.YGrid: V <init>(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;Lcom/wildplot/android/rendering/PlotSheet;DD)>
<com.wildplot.android.rendering.YGrid: V <init>(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;Lcom/wildplot/android/rendering/PlotSheet;DI)>
<com.wildplot.android.rendering.YGrid: V drawExplicitLines(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YGrid: V drawGridLine(DLcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;Lcom/wildplot/android/rendering/graphics/wrapper/RectangleWrap;)>
<com.wildplot.android.rendering.YGrid: V drawImplicitLines(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;D)>
<com.wildplot.android.rendering.YGrid: V abortAndReset()>
<com.wildplot.android.rendering.YGrid: Z isClusterable()>
<com.wildplot.android.rendering.YGrid: Z isCritical()>
<com.wildplot.android.rendering.YGrid: Z isOnFrame()>
<com.wildplot.android.rendering.YGrid: V paint(Lcom/wildplot/android/rendering/graphics/wrapper/GraphicsWrap;)>
<com.wildplot.android.rendering.YGrid: V setColor(Lcom/wildplot/android/rendering/graphics/wrapper/ColorWrap;)>
<com.wildplot.android.rendering.YGrid: V setExplicitTicks([D)>
<com.wildplot.android.rendering.YGrid: V setGridOnDownside(Z)>
<com.wildplot.android.rendering.YGrid: V setGridOnRight(Z)>
<com.wildplot.android.rendering.YGrid: V setGridOnUpside(Z)>
<com.wildplot.android.rendering.YGrid: V setGridkOnLeft(Z)>
<com.wildplot.android.rendering.YGrid: V unsetExplicitTics()>
<com.wildplot.android.rendering.graphics.wrapper.BasicStrokeWrap: V <init>(F)>
<io.requery.android.database.AbstractWindowedCursor: V <init>()>
<io.requery.android.database.AbstractWindowedCursor: V checkPosition()>
<io.requery.android.database.AbstractWindowedCursor: V clearOrCreateWindow(Ljava/lang/String;)>
<io.requery.android.database.AbstractWindowedCursor: V closeWindow()>
<io.requery.android.database.AbstractWindowedCursor: V copyStringToBuffer(ILandroid/database/CharArrayBuffer;)>
<io.requery.android.database.AbstractWindowedCursor: [B getBlob(I)>
<io.requery.android.database.AbstractWindowedCursor: D getDouble(I)>
<io.requery.android.database.AbstractWindowedCursor: F getFloat(I)>
<io.requery.android.database.AbstractWindowedCursor: I getInt(I)>
<io.requery.android.database.AbstractWindowedCursor: J getLong(I)>
<io.requery.android.database.AbstractWindowedCursor: S getShort(I)>
<io.requery.android.database.AbstractWindowedCursor: Ljava/lang/String; getString(I)>
<io.requery.android.database.AbstractWindowedCursor: I getType(I)>
<io.requery.android.database.AbstractWindowedCursor: Lio/requery/android/database/CursorWindow; getWindow()>
<io.requery.android.database.AbstractWindowedCursor: Z hasWindow()>
<io.requery.android.database.AbstractWindowedCursor: Z isNull(I)>
<io.requery.android.database.AbstractWindowedCursor: V onDeactivateOrClose()>
<io.requery.android.database.AbstractWindowedCursor: V setWindow(Lio/requery/android/database/CursorWindow;)>
<io.requery.android.database.CursorWindow: V <clinit>()>
<io.requery.android.database.CursorWindow: V <init>(Ljava/lang/String;)>
<io.requery.android.database.CursorWindow: V dispose()>
<io.requery.android.database.CursorWindow: Z allocRow()>
<io.requery.android.database.CursorWindow: V clear()>
<io.requery.android.database.CursorWindow: V copyStringToBuffer(IILandroid/database/CharArrayBuffer;)>
<io.requery.android.database.CursorWindow: V finalize()>
<io.requery.android.database.CursorWindow: V freeLastRow()>
<io.requery.android.database.CursorWindow: [B getBlob(II)>
<io.requery.android.database.CursorWindow: D getDouble(II)>
<io.requery.android.database.CursorWindow: F getFloat(II)>
<io.requery.android.database.CursorWindow: I getInt(II)>
<io.requery.android.database.CursorWindow: J getLong(II)>
<io.requery.android.database.CursorWindow: Ljava/lang/String; getName()>
<io.requery.android.database.CursorWindow: I getNumRows()>
<io.requery.android.database.CursorWindow: S getShort(II)>
<io.requery.android.database.CursorWindow: I getStartPosition()>
<io.requery.android.database.CursorWindow: Ljava/lang/String; getString(II)>
<io.requery.android.database.CursorWindow: I getType(II)>
<io.requery.android.database.CursorWindow: V onAllReferencesReleased()>
<io.requery.android.database.CursorWindow: Z putBlob([BII)>
<io.requery.android.database.CursorWindow: Z putDouble(DII)>
<io.requery.android.database.CursorWindow: Z putLong(JII)>
<io.requery.android.database.CursorWindow: Z putNull(II)>
<io.requery.android.database.CursorWindow: Z putString(Ljava/lang/String;II)>
<io.requery.android.database.CursorWindow: Z setNumColumns(I)>
<io.requery.android.database.CursorWindow: V setStartPosition(I)>
<io.requery.android.database.CursorWindow: Ljava/lang/String; toString()>
<io.requery.android.database.DefaultDatabaseErrorHandler: V <init>()>
<io.requery.android.database.DefaultDatabaseErrorHandler: V deleteDatabaseFile(Ljava/lang/String;)>
<io.requery.android.database.DefaultDatabaseErrorHandler: V onCorruption(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: V <init>()>
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: V <init>(Lio/requery/android/database/sqlite/CloseGuard$1;)>
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: V report(Ljava/lang/String;Ljava/lang/Throwable;)>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: V <init>(Lio/requery/android/database/sqlite/SQLiteConnection;I)>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: V dump(Landroid/util/Printer;)>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: V entryRemoved(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: V entryRemoved(ZLjava/lang/String;Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteConnection: V <init>(Lio/requery/android/database/sqlite/SQLiteConnectionPool;Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;IZ)>
<io.requery.android.database.sqlite.SQLiteConnection: V access$200(Lio/requery/android/database/sqlite/SQLiteConnection;Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; access$300(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: [B access$500()>
<io.requery.android.database.sqlite.SQLiteConnection: Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement; acquirePreparedStatement(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: V applyBlockGuardPolicy(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: V attachCancellationSignal(Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: V bindArguments(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; canonicalizeSyncMode(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: V detachCancellationSignal(Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: V dispose(Z)>
<io.requery.android.database.sqlite.SQLiteConnection: V finalizePreparedStatement(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: Lio/requery/android/database/sqlite/SQLiteDebug$DbStats; getMainDbStatsUnsafe(IJJ)>
<io.requery.android.database.sqlite.SQLiteConnection: I getTypeOfObject(Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteConnection: Z hasCodec()>
<io.requery.android.database.sqlite.SQLiteConnection: Z isCacheable(I)>
<io.requery.android.database.sqlite.SQLiteConnection: Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement; obtainPreparedStatement(Ljava/lang/String;JIIZ)>
<io.requery.android.database.sqlite.SQLiteConnection: Lio/requery/android/database/sqlite/SQLiteConnection; open(Lio/requery/android/database/sqlite/SQLiteConnectionPool;Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;IZ)>
<io.requery.android.database.sqlite.SQLiteConnection: V open()>
<io.requery.android.database.sqlite.SQLiteConnection: V recyclePreparedStatement(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: V releasePreparedStatement(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: V setAutoCheckpointInterval()>
<io.requery.android.database.sqlite.SQLiteConnection: V setForeignKeyModeFromConfiguration()>
<io.requery.android.database.sqlite.SQLiteConnection: V setJournalMode(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: V setJournalSizeLimit()>
<io.requery.android.database.sqlite.SQLiteConnection: V setLocaleFromConfiguration()>
<io.requery.android.database.sqlite.SQLiteConnection: V setPageSize()>
<io.requery.android.database.sqlite.SQLiteConnection: V setSyncMode(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: V setWalModeFromConfiguration()>
<io.requery.android.database.sqlite.SQLiteConnection: V throwIfStatementForbidden(Lio/requery/android/database/sqlite/SQLiteConnection$PreparedStatement;)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; trimSqlForDisplay(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: V close()>
<io.requery.android.database.sqlite.SQLiteConnection: V collectDbStats(Ljava/util/ArrayList;)>
<io.requery.android.database.sqlite.SQLiteConnection: V collectDbStatsUnsafe(Ljava/util/ArrayList;)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; describeCurrentOperationUnsafe()>
<io.requery.android.database.sqlite.SQLiteConnection: V dump(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteConnection: V dumpUnsafe(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteConnection: V enableLocalizedCollators()>
<io.requery.android.database.sqlite.SQLiteConnection: V execute(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: Landroid/os/ParcelFileDescriptor; executeForBlobFileDescriptor(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: I executeForChangedRowCount(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: I executeForCursorWindow(Ljava/lang/String;[Ljava/lang/Object;Lio/requery/android/database/CursorWindow;IIZLandroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: J executeForLastInsertedRowId(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: J executeForLong(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; executeForString(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteConnection: V finalize()>
<io.requery.android.database.sqlite.SQLiteConnection: Z isPreparedStatementInCache(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteConnection: Z isPrimaryConnection()>
<io.requery.android.database.sqlite.SQLiteConnection: V onCancel()>
<io.requery.android.database.sqlite.SQLiteConnection: V prepare(Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteStatementInfo;)>
<io.requery.android.database.sqlite.SQLiteConnection: V reconfigure(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;)>
<io.requery.android.database.sqlite.SQLiteConnection: V setOnlyAllowReadOnlyOperations(Z)>
<io.requery.android.database.sqlite.SQLiteConnection: Ljava/lang/String; toString()>
<io.requery.android.database.sqlite.SQLiteConnectionPool$1: V <init>(Lio/requery/android/database/sqlite/SQLiteConnectionPool;Lio/requery/android/database/sqlite/SQLiteConnectionPool$ConnectionWaiter;I)>
<io.requery.android.database.sqlite.SQLiteConnectionPool$1: V onCancel()>
<io.requery.android.database.sqlite.SQLiteDatabase: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteDatabase: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;Lio/requery/android/database/DatabaseErrorHandler;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransaction(Landroid/database/sqlite/SQLiteTransactionListener;I)>
<io.requery.android.database.sqlite.SQLiteDatabase: V collectDbStats(Ljava/util/ArrayList;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; create(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Z deleteDatabase(Ljava/io/File;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V dispose(Z)>
<io.requery.android.database.sqlite.SQLiteDatabase: V dump(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteDatabase: V dumpAll(Landroid/util/Printer;Z)>
<io.requery.android.database.sqlite.SQLiteDatabase: V ensureFile(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: I executeSql(Ljava/lang/String;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/lang/String; findEditTable(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/util/ArrayList; getActiveDatabases()>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/util/ArrayList; getDbStats()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z hasCodec()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isMainThread()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isReadOnlyLocked()>
<io.requery.android.database.sqlite.SQLiteDatabase: J longForQuery(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: J longForQuery(Lio/requery/android/database/sqlite/SQLiteStatement;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V open()>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openDatabase(Lio/requery/android/database/sqlite/SQLiteDatabaseConfiguration;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;Lio/requery/android/database/DatabaseErrorHandler;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openDatabase(Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;I)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openDatabase(Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;ILio/requery/android/database/DatabaseErrorHandler;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V openInner()>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openOrCreateDatabase(Ljava/io/File;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openOrCreateDatabase(Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteDatabase; openOrCreateDatabase(Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;Lio/requery/android/database/DatabaseErrorHandler;)>
<io.requery.android.database.sqlite.SQLiteDatabase: I releaseMemory()>
<io.requery.android.database.sqlite.SQLiteDatabase: V throwIfNotOpenLocked()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z yieldIfContendedHelper(ZJ)>
<io.requery.android.database.sqlite.SQLiteDatabase: V addCustomFunction(Ljava/lang/String;ILio/requery/android/database/sqlite/SQLiteDatabase$CustomFunction;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransaction()>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransactionDeferred()>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransactionNonExclusive()>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransactionWithListener(Landroid/database/sqlite/SQLiteTransactionListener;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransactionWithListenerDeferred(Landroid/database/sqlite/SQLiteTransactionListener;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V beginTransactionWithListenerNonExclusive(Landroid/database/sqlite/SQLiteTransactionListener;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteStatement; compileStatement(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteSession; createSession()>
<io.requery.android.database.sqlite.SQLiteDatabase: I delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V disableWriteAheadLogging()>
<io.requery.android.database.sqlite.SQLiteDatabase: V enableLocalizedCollators()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z enableWriteAheadLogging()>
<io.requery.android.database.sqlite.SQLiteDatabase: V endTransaction()>
<io.requery.android.database.sqlite.SQLiteDatabase: V execSQL(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V execSQL(Ljava/lang/String;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V finalize()>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/util/List; getAttachedDbs()>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/lang/String; getLabel()>
<io.requery.android.database.sqlite.SQLiteDatabase: J getMaximumSize()>
<io.requery.android.database.sqlite.SQLiteDatabase: J getPageSize()>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/lang/String; getPath()>
<io.requery.android.database.sqlite.SQLiteDatabase: I getThreadDefaultConnectionFlags(Z)>
<io.requery.android.database.sqlite.SQLiteDatabase: Lio/requery/android/database/sqlite/SQLiteSession; getThreadSession()>
<io.requery.android.database.sqlite.SQLiteDatabase: I getVersion()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z inTransaction()>
<io.requery.android.database.sqlite.SQLiteDatabase: J insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)>
<io.requery.android.database.sqlite.SQLiteDatabase: J insertOrThrow(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)>
<io.requery.android.database.sqlite.SQLiteDatabase: J insertWithOnConflict(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;I)>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isDatabaseIntegrityOk()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isDbLockedByCurrentThread()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isInMemoryDatabase()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isOpen()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isReadOnly()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z isWriteAheadLoggingEnabled()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z needUpgrade(I)>
<io.requery.android.database.sqlite.SQLiteDatabase: V onAllReferencesReleased()>
<io.requery.android.database.sqlite.SQLiteDatabase: V onCorruption()>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; query(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; query(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; queryWithFactory(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; queryWithFactory(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; rawQuery(Ljava/lang/String;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; rawQuery(Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; rawQueryWithFactory(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: Landroid/database/Cursor; rawQueryWithFactory(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V reopenReadWrite()>
<io.requery.android.database.sqlite.SQLiteDatabase: J replace(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)>
<io.requery.android.database.sqlite.SQLiteDatabase: J replaceOrThrow(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V setForeignKeyConstraintsEnabled(Z)>
<io.requery.android.database.sqlite.SQLiteDatabase: V setLocale(Ljava/util/Locale;)>
<io.requery.android.database.sqlite.SQLiteDatabase: V setMaxSqlCacheSize(I)>
<io.requery.android.database.sqlite.SQLiteDatabase: J setMaximumSize(J)>
<io.requery.android.database.sqlite.SQLiteDatabase: V setPageSize(J)>
<io.requery.android.database.sqlite.SQLiteDatabase: V setTransactionSuccessful()>
<io.requery.android.database.sqlite.SQLiteDatabase: V setVersion(I)>
<io.requery.android.database.sqlite.SQLiteDatabase: Ljava/lang/String; toString()>
<io.requery.android.database.sqlite.SQLiteDatabase: I update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDatabase: I updateWithOnConflict(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;I)>
<io.requery.android.database.sqlite.SQLiteDatabase: Z yieldIfContendedSafely()>
<io.requery.android.database.sqlite.SQLiteDatabase: Z yieldIfContendedSafely(J)>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: V cursorClosed()>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: V cursorDeactivated()>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: V cursorRequeried(Landroid/database/Cursor;)>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: Landroid/database/Cursor; query(Lio/requery/android/database/sqlite/SQLiteDatabase$CursorFactory;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: V setBindArguments([Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: Ljava/lang/String; toString()>
<io.requery.android.database.sqlite.SQLiteProgram: V <clinit>()>
<io.requery.android.database.sqlite.SQLiteProgram: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteProgram: V bind(ILjava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindAllArgsAsStrings([Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindBlob(I[B)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindDouble(ID)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindLong(IJ)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindNull(I)>
<io.requery.android.database.sqlite.SQLiteProgram: V bindString(ILjava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteProgram: V clearBindings()>
<io.requery.android.database.sqlite.SQLiteProgram: [Ljava/lang/Object; getBindArgs()>
<io.requery.android.database.sqlite.SQLiteProgram: [Ljava/lang/String; getColumnNames()>
<io.requery.android.database.sqlite.SQLiteProgram: I getConnectionFlags()>
<io.requery.android.database.sqlite.SQLiteProgram: Lio/requery/android/database/sqlite/SQLiteDatabase; getDatabase()>
<io.requery.android.database.sqlite.SQLiteProgram: Lio/requery/android/database/sqlite/SQLiteSession; getSession()>
<io.requery.android.database.sqlite.SQLiteProgram: Ljava/lang/String; getSql()>
<io.requery.android.database.sqlite.SQLiteProgram: V onAllReferencesReleased()>
<io.requery.android.database.sqlite.SQLiteProgram: V onCorruption()>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: Z getShowTrack()>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: Z getUseIntrinsicPadding()>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V setShowTrack(Z)>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V setTint(I)>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V setTintList(Landroid/content/res/ColorStateList;)>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable: V setUseIntrinsicPadding(Z)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: Landroid/graphics/PorterDuffColorFilter; makeTintFilter(Landroid/content/res/ColorStateList;Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V draw(Landroid/graphics/Canvas;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: I getAlpha()>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: Landroid/graphics/ColorFilter; getColorFilter()>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: I getOpacity()>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: Z getUseIntrinsicPadding()>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setAlpha(I)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setColorFilter(Landroid/graphics/ColorFilter;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setTint(I)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setTintList(Landroid/content/res/ColorStateList;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.ProgressDrawableBase: V setUseIntrinsicPadding(Z)>
<org.acra.ACRAConfiguration: V <init>()>
<org.acra.ACRAConfiguration: V <init>(Lorg/acra/annotation/ReportsCrashes;)>
<org.acra.ACRAConfiguration: Z isNull(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: [Ljava/lang/String; additionalDropBoxTags()>
<org.acra.ACRAConfiguration: [Ljava/lang/String; additionalSharedPreferences()>
<org.acra.ACRAConfiguration: Ljava/lang/Class; annotationType()>
<org.acra.ACRAConfiguration: Ljava/lang/String; applicationLogFile()>
<org.acra.ACRAConfiguration: I applicationLogFileLines()>
<org.acra.ACRAConfiguration: Ljava/lang/Class; buildConfigClass()>
<org.acra.ACRAConfiguration: I connectionTimeout()>
<org.acra.ACRAConfiguration: [Lorg/acra/ReportField; customReportContent()>
<org.acra.ACRAConfiguration: Z deleteOldUnsentReportsOnApplicationStart()>
<org.acra.ACRAConfiguration: Z deleteUnapprovedReportsOnApplicationStart()>
<org.acra.ACRAConfiguration: Z disableSSLCertValidation()>
<org.acra.ACRAConfiguration: I dropboxCollectionMinutes()>
<org.acra.ACRAConfiguration: [Ljava/lang/String; excludeMatchingSettingsKeys()>
<org.acra.ACRAConfiguration: [Ljava/lang/String; excludeMatchingSharedPreferencesKeys()>
<org.acra.ACRAConfiguration: Z forceCloseDialogAfterToast()>
<org.acra.ACRAConfiguration: Ljava/lang/String; formUri()>
<org.acra.ACRAConfiguration: Ljava/lang/String; formUriBasicAuthLogin()>
<org.acra.ACRAConfiguration: Ljava/lang/String; formUriBasicAuthPassword()>
<org.acra.ACRAConfiguration: Ljava/util/Map; getHttpHeaders()>
<org.acra.ACRAConfiguration: Lorg/acra/util/HttpsSocketFactoryFactory; getHttpSocketFactoryFactory()>
<org.acra.ACRAConfiguration: Ljava/util/List; getReportFields()>
<org.acra.ACRAConfiguration: Lorg/acra/sender/HttpSender$Method; httpMethod()>
<org.acra.ACRAConfiguration: Ljava/lang/String; httpsSocketFactoryFactoryClass()>
<org.acra.ACRAConfiguration: Z includeDropBoxSystemTags()>
<org.acra.ACRAConfiguration: Ljava/security/KeyStore; keyStore()>
<org.acra.ACRAConfiguration: [Ljava/lang/String; logcatArguments()>
<org.acra.ACRAConfiguration: Z logcatFilterByPid()>
<org.acra.ACRAConfiguration: Ljava/lang/String; mailTo()>
<org.acra.ACRAConfiguration: I maxNumberOfRequestRetries()>
<org.acra.ACRAConfiguration: Lorg/acra/ReportingInteractionMode; mode()>
<org.acra.ACRAConfiguration: Ljava/lang/Class; reportDialogClass()>
<org.acra.ACRAConfiguration: Lorg/acra/sender/HttpSender$Type; reportType()>
<org.acra.ACRAConfiguration: I resDialogCommentPrompt()>
<org.acra.ACRAConfiguration: I resDialogEmailPrompt()>
<org.acra.ACRAConfiguration: I resDialogIcon()>
<org.acra.ACRAConfiguration: I resDialogNegativeButtonText()>
<org.acra.ACRAConfiguration: I resDialogOkToast()>
<org.acra.ACRAConfiguration: I resDialogPositiveButtonText()>
<org.acra.ACRAConfiguration: I resDialogText()>
<org.acra.ACRAConfiguration: I resDialogTitle()>
<org.acra.ACRAConfiguration: I resNotifIcon()>
<org.acra.ACRAConfiguration: I resNotifText()>
<org.acra.ACRAConfiguration: I resNotifTickerText()>
<org.acra.ACRAConfiguration: I resNotifTitle()>
<org.acra.ACRAConfiguration: I resToastText()>
<org.acra.ACRAConfiguration: Z sendReportsAtShutdown()>
<org.acra.ACRAConfiguration: Z sendReportsInDevMode()>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setAdditionalDropboxTags([Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setAdditionalSharedPreferences([Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setApplicationLogFile(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setApplicationLogFileLines(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setBuildConfigClass(Ljava/lang/Class;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setConnectionTimeout(Ljava/lang/Integer;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setCustomReportContent([Lorg/acra/ReportField;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setDeleteOldUnsentReportsOnApplicationStart(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setDeleteUnapprovedReportsOnApplicationStart(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setDisableSSLCertValidation(Z)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setDropboxCollectionMinutes(Ljava/lang/Integer;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setExcludeMatchingSettingsKeys([Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setExcludeMatchingSharedPreferencesKeys([Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setForceCloseDialogAfterToast(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setFormUri(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setFormUriBasicAuthLogin(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setFormUriBasicAuthPassword(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setHttpHeaders(Ljava/util/Map;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setHttpMethod(Lorg/acra/sender/HttpSender$Method;)>
<org.acra.ACRAConfiguration: V setHttpsSocketFactoryFactory(Lorg/acra/util/HttpsSocketFactoryFactory;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setIncludeDropboxSystemTags(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: V setKeyStore(Ljava/security/KeyStore;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setLogcatArguments([Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setLogcatFilterByPid(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setMailTo(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setMaxNumberOfRequestRetries(Ljava/lang/Integer;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setMode(Lorg/acra/ReportingInteractionMode;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setReportDialogClass(Ljava/lang/Class;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setReportType(Lorg/acra/sender/HttpSender$Type;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogCommentPrompt(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogEmailPrompt(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogIcon(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogNegativeButtonText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogOkToast(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogPositiveButtonText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResDialogTitle(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResNotifIcon(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResNotifText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResNotifTickerText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResNotifTitle(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setResToastText(I)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setSendReportsAtShutdown(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setSendReportsInDevMode(Ljava/lang/Boolean;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setSharedPreferenceMode(Ljava/lang/Integer;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setSharedPreferenceName(Ljava/lang/String;)>
<org.acra.ACRAConfiguration: Lorg/acra/ACRAConfiguration; setSocketTimeout(Ljava/lang/Integer;)>
<org.acra.ACRAConfiguration: I sharedPreferencesMode()>
<org.acra.ACRAConfiguration: Ljava/lang/String; sharedPreferencesName()>
<org.acra.ACRAConfiguration: I socketTimeout()>
<org.acra.CrashReportDialog: V <init>()>
<org.acra.CrashReportDialog: Landroid/view/View; buildCustomView(Landroid/os/Bundle;)>
<org.acra.CrashReportDialog: V onClick(Landroid/content/DialogInterface;I)>
<org.acra.CrashReportDialog: V onCreate(Landroid/os/Bundle;)>
<org.acra.CrashReportDialog: V onDismiss(Landroid/content/DialogInterface;)>
<org.acra.CrashReportDialog: V onSaveInstanceState(Landroid/os/Bundle;)>
<org.acra.ErrorReporter$1: V <init>()>
<org.acra.ErrorReporter$1: V initializeExceptionHandler(Lorg/acra/ErrorReporter;)>
<org.acra.ErrorReporter$2: V <init>(Lorg/acra/ErrorReporter;)>
<org.acra.ErrorReporter$2: V onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.ErrorReporter$2: V onActivityDestroyed(Landroid/app/Activity;)>
<org.acra.ErrorReporter$2: V onActivityPaused(Landroid/app/Activity;)>
<org.acra.ErrorReporter$2: V onActivityResumed(Landroid/app/Activity;)>
<org.acra.ErrorReporter$2: V onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.ErrorReporter$2: V onActivityStarted(Landroid/app/Activity;)>
<org.acra.ErrorReporter$2: V onActivityStopped(Landroid/app/Activity;)>
<org.acra.ReportField$10: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$10: Z containsKeyValuePairs()>
<org.acra.ReportField$11: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$11: Z containsKeyValuePairs()>
<org.acra.ReportField$12: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$12: Z containsKeyValuePairs()>
<org.acra.ReportField$1: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$1: Z containsKeyValuePairs()>
<org.acra.ReportField$2: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$2: Z containsKeyValuePairs()>
<org.acra.ReportField$3: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$3: Z containsKeyValuePairs()>
<org.acra.ReportField$4: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$4: Z containsKeyValuePairs()>
<org.acra.ReportField$5: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$5: Z containsKeyValuePairs()>
<org.acra.ReportField$6: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$6: Z containsKeyValuePairs()>
<org.acra.ReportField$7: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$7: Z containsKeyValuePairs()>
<org.acra.ReportField$8: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$8: Z containsKeyValuePairs()>
<org.acra.ReportField$9: V <init>(Ljava/lang/String;I)>
<org.acra.ReportField$9: Z containsKeyValuePairs()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V <init>()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityDestroyed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityPaused(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityResumed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityStarted(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksAdapter: V onActivityStopped(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V <clinit>()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V <init>()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: [Ljava/lang/Object; collectActivityLifecycleCallbacks()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/MainLifecycleDispatcher; get()>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityDestroyed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityPaused(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityResumed(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityStarted(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V onActivityStopped(Landroid/app/Activity;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V registerActivityLifecycleCallbacks(Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.jraf.android.util.activitylifecyclecallbackscompat.MainLifecycleDispatcher: V unregisterActivityLifecycleCallbacks(Lorg/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat;)>
<org.acra.log.AndroidLogDelegate: V <init>()>
<org.acra.log.AndroidLogDelegate: I d(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.AndroidLogDelegate: I d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: I e(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.AndroidLogDelegate: I e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: Ljava/lang/String; getStackTraceString(Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: I i(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.AndroidLogDelegate: I i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: I v(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.AndroidLogDelegate: I v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: I w(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.AndroidLogDelegate: I w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.AndroidLogDelegate: I w(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: V <init>()>
<org.acra.log.HollowLog: I d(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.HollowLog: I d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: I e(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.HollowLog: I e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: Ljava/lang/String; getStackTraceString(Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: I i(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.HollowLog: I i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: I v(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.HollowLog: I v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: I w(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.log.HollowLog: I w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.log.HollowLog: I w(Ljava/lang/String;Ljava/lang/Throwable;)>
<org.acra.sender.EmailIntentSender: V <init>(Landroid/content/Context;)>
<org.acra.sender.EmailIntentSender: Ljava/lang/String; buildBody(Lorg/acra/collector/CrashReportData;)>
<org.acra.sender.EmailIntentSender: V send(Landroid/content/Context;Lorg/acra/collector/CrashReportData;)>
<org.acra.sender.HttpSender$Type$1: V <init>(Ljava/lang/String;I)>
<org.acra.sender.HttpSender$Type$1: Ljava/lang/String; getContentType()>
<org.acra.sender.HttpSender$Type$2: V <init>(Ljava/lang/String;I)>
<org.acra.sender.HttpSender$Type$2: Ljava/lang/String; getContentType()>
<org.acra.sender.HttpSender: V <init>(Lorg/acra/sender/HttpSender$Method;Lorg/acra/sender/HttpSender$Type;Ljava/lang/String;Ljava/util/Map;)>
<org.acra.sender.HttpSender: V <init>(Lorg/acra/sender/HttpSender$Method;Lorg/acra/sender/HttpSender$Type;Ljava/util/Map;)>
<org.acra.sender.HttpSender: Ljava/util/Map; remap(Ljava/util/Map;)>
<org.acra.sender.HttpSender: V send(Landroid/content/Context;Lorg/acra/collector/CrashReportData;)>
<org.acra.sender.HttpSender: V setBasicAuth(Ljava/lang/String;Ljava/lang/String;)>
<org.acra.util.DefaultHttpsSocketFactoryFactory: V <clinit>()>
<org.acra.util.DefaultHttpsSocketFactoryFactory: V <init>()>
<org.acra.util.DefaultHttpsSocketFactoryFactory: Lorg/apache/http/conn/scheme/SocketFactory; create(Landroid/content/Context;)>
<timber.log.Timber$1: V <init>()>
<timber.log.Timber$1: V d(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V e(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V i(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V v(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V w(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$1: V w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V <init>()>
<timber.log.Timber$HollowTree: V d(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V e(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V i(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V v(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V w(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$HollowTree: V w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<android.support.customtabs.CustomTabsClient$2: V <init>(Landroid/support/customtabs/CustomTabsClient;Landroid/support/customtabs/CustomTabsCallback;)>
<android.support.customtabs.CustomTabsClient$2: V extraCallback(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsClient$2: V onNavigationEvent(ILandroid/os/Bundle;)>
<android.support.customtabs.CustomTabsService$1: V <init>(Landroid/support/customtabs/CustomTabsService;)>
<android.support.customtabs.CustomTabsService$1: Landroid/os/Bundle; extraCommand(Ljava/lang/String;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsService$1: Z mayLaunchUrl(Landroid/support/customtabs/ICustomTabsCallback;Landroid/net/Uri;Landroid/os/Bundle;Ljava/util/List;)>
<android.support.customtabs.CustomTabsService$1: Z newSession(Landroid/support/customtabs/ICustomTabsCallback;)>
<android.support.customtabs.CustomTabsService$1: Z updateVisuals(Landroid/support/customtabs/ICustomTabsCallback;Landroid/os/Bundle;)>
<android.support.customtabs.CustomTabsService$1: Z warmup(J)>
<android.support.design.internal.BottomNavigationMenu: V <init>(Landroid/content/Context;)>
<android.support.design.internal.BottomNavigationMenu: Landroid/view/MenuItem; addInternal(IIILjava/lang/CharSequence;)>
<android.support.design.internal.BottomNavigationMenu: Landroid/view/SubMenu; addSubMenu(IIILjava/lang/CharSequence;)>
<android.support.design.internal.NavigationMenuItemView: V <clinit>()>
<android.support.design.internal.NavigationMenuItemView: V <init>(Landroid/content/Context;)>
<android.support.design.internal.NavigationMenuItemView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.NavigationMenuItemView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.NavigationMenuItemView: V adjustAppearance()>
<android.support.design.internal.NavigationMenuItemView: Landroid/graphics/drawable/StateListDrawable; createDefaultBackground()>
<android.support.design.internal.NavigationMenuItemView: V setActionView(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuItemView: Z shouldExpandActionArea()>
<android.support.design.internal.NavigationMenuItemView: Landroid/support/v7/view/menu/k; getItemData()>
<android.support.design.internal.NavigationMenuItemView: V initialize(Landroid/support/v7/view/menu/k;I)>
<android.support.design.internal.NavigationMenuItemView: [I onCreateDrawableState(I)>
<android.support.design.internal.NavigationMenuItemView: Z prefersCondensedTitle()>
<android.support.design.internal.NavigationMenuItemView: V recycle()>
<android.support.design.internal.NavigationMenuItemView: V setCheckable(Z)>
<android.support.design.internal.NavigationMenuItemView: V setChecked(Z)>
<android.support.design.internal.NavigationMenuItemView: V setIcon(Landroid/graphics/drawable/Drawable;)>
<android.support.design.internal.NavigationMenuItemView: V setIconTintList(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.NavigationMenuItemView: V setNeedsEmptyIcon(Z)>
<android.support.design.internal.NavigationMenuItemView: V setShortcut(ZC)>
<android.support.design.internal.NavigationMenuItemView: V setTextAppearance(I)>
<android.support.design.internal.NavigationMenuItemView: V setTextColor(Landroid/content/res/ColorStateList;)>
<android.support.design.internal.NavigationMenuItemView: V setTitle(Ljava/lang/CharSequence;)>
<android.support.design.internal.NavigationMenuItemView: Z showsIcon()>
<android.support.design.internal.NavigationMenuPresenter$HeaderViewHolder: V <init>(Landroid/view/View;)>
<android.support.design.internal.NavigationMenuPresenter$NormalViewHolder: V <init>(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/view/View$OnClickListener;)>
<android.support.design.internal.NavigationMenuPresenter$SeparatorViewHolder: V <init>(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;)>
<android.support.design.internal.NavigationMenuPresenter$SubheaderViewHolder: V <init>(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;)>
<android.support.design.internal.NavigationMenuView: V <init>(Landroid/content/Context;)>
<android.support.design.internal.NavigationMenuView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.internal.NavigationMenuView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.internal.NavigationMenuView: I getWindowAnimations()>
<android.support.design.internal.NavigationMenuView: V initialize(Landroid/support/v7/view/menu/h;)>
<android.support.design.internal.TextScale: V <init>()>
<android.support.design.internal.TextScale: V captureValues(Landroid/support/transition/TransitionValues;)>
<android.support.design.internal.TextScale: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.design.internal.TextScale: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.design.internal.TextScale: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.design.internal.a: V <init>(Landroid/content/Context;)>
<android.support.design.internal.a: Landroid/view/SubMenu; addSubMenu(IIILjava/lang/CharSequence;)>
<android.support.design.widget.BaseTransientBottomBar$7: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$7: V onAnimationEnd(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$7: V onAnimationStart(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$9: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;I)>
<android.support.design.widget.BaseTransientBottomBar$9: V onAnimationEnd(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$9: V onAnimationStart(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$Behavior: V <init>(Landroid/support/design/widget/BaseTransientBottomBar;)>
<android.support.design.widget.BaseTransientBottomBar$Behavior: Z canSwipeDismissView(Landroid/view/View;)>
<android.support.design.widget.BaseTransientBottomBar$Behavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/BaseTransientBottomBar$SnackbarBaseLayout;Landroid/view/MotionEvent;)>
<android.support.design.widget.BaseTransientBottomBar$Behavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.BottomSheetDialog: V <init>(Landroid/content/Context;)>
<android.support.design.widget.BottomSheetDialog: V <init>(Landroid/content/Context;I)>
<android.support.design.widget.BottomSheetDialog: V <init>(Landroid/content/Context;ZLandroid/content/DialogInterface$OnCancelListener;)>
<android.support.design.widget.BottomSheetDialog: I getThemeResId(Landroid/content/Context;I)>
<android.support.design.widget.BottomSheetDialog: Landroid/view/View; wrapInBottomSheet(ILandroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.BottomSheetDialog: V onCreate(Landroid/os/Bundle;)>
<android.support.design.widget.BottomSheetDialog: V setCancelable(Z)>
<android.support.design.widget.BottomSheetDialog: V setCanceledOnTouchOutside(Z)>
<android.support.design.widget.BottomSheetDialog: V setContentView(I)>
<android.support.design.widget.BottomSheetDialog: V setContentView(Landroid/view/View;)>
<android.support.design.widget.BottomSheetDialog: V setContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<android.support.design.widget.BottomSheetDialog: Z shouldWindowCloseOnTouchOutside()>
<android.support.design.widget.CheckableImageButton: V <clinit>()>
<android.support.design.widget.CheckableImageButton: V <init>(Landroid/content/Context;)>
<android.support.design.widget.CheckableImageButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.CheckableImageButton: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.CheckableImageButton: Z isChecked()>
<android.support.design.widget.CheckableImageButton: [I onCreateDrawableState(I)>
<android.support.design.widget.CheckableImageButton: V setChecked(Z)>
<android.support.design.widget.CheckableImageButton: V toggle()>
<android.support.design.widget.FloatingActionButtonGingerbread$ShadowAnimatorImpl: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;)>
<android.support.design.widget.FloatingActionButtonGingerbread$ShadowAnimatorImpl: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;Landroid/support/design/widget/FloatingActionButtonGingerbread$1;)>
<android.support.design.widget.FloatingActionButtonGingerbread$ShadowAnimatorImpl: V onAnimationEnd(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.FloatingActionButtonGingerbread$ShadowAnimatorImpl: V onAnimationUpdate(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.FloatingActionButtonIcs: V <init>(Landroid/support/design/widget/VisibilityAwareImageButton;Landroid/support/design/widget/ShadowViewDelegate;Landroid/support/design/widget/ValueAnimatorCompat$Creator;)>
<android.support.design.widget.FloatingActionButtonIcs: Z shouldAnimateVisibilityChange()>
<android.support.design.widget.FloatingActionButtonIcs: V updateFromViewRotation()>
<android.support.design.widget.FloatingActionButtonIcs: V hide(Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;Z)>
<android.support.design.widget.FloatingActionButtonIcs: V onPreDraw()>
<android.support.design.widget.FloatingActionButtonIcs: Z requirePreDrawListener()>
<android.support.design.widget.FloatingActionButtonIcs: V show(Landroid/support/design/widget/FloatingActionButtonImpl$InternalVisibilityChangedListener;Z)>
<android.support.design.widget.HeaderBehavior: V <init>()>
<android.support.design.widget.HeaderBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.HeaderBehavior: V ensureVelocityTracker()>
<android.support.design.widget.HeaderBehavior: Z canDragView(Landroid/view/View;)>
<android.support.design.widget.HeaderBehavior: Z fling(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;IIF)>
<android.support.design.widget.HeaderBehavior: I getMaxDragOffset(Landroid/view/View;)>
<android.support.design.widget.HeaderBehavior: I getScrollRangeForDragFling(Landroid/view/View;)>
<android.support.design.widget.HeaderBehavior: I getTopBottomOffsetForScrollingSibling()>
<android.support.design.widget.HeaderBehavior: V onFlingFinished(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.HeaderBehavior: Z onInterceptTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.HeaderBehavior: Z onTouchEvent(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/MotionEvent;)>
<android.support.design.widget.HeaderBehavior: I scroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;III)>
<android.support.design.widget.HeaderBehavior: I setHeaderTopBottomOffset(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.HeaderBehavior: I setHeaderTopBottomOffset(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;III)>
<android.support.design.widget.HeaderScrollingViewBehavior: V <init>()>
<android.support.design.widget.HeaderScrollingViewBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.HeaderScrollingViewBehavior: I resolveGravity(I)>
<android.support.design.widget.HeaderScrollingViewBehavior: I getOverlapPixelsForOffset(Landroid/view/View;)>
<android.support.design.widget.HeaderScrollingViewBehavior: F getOverlapRatioForOffset(Landroid/view/View;)>
<android.support.design.widget.HeaderScrollingViewBehavior: I getOverlayTop()>
<android.support.design.widget.HeaderScrollingViewBehavior: I getScrollRange(Landroid/view/View;)>
<android.support.design.widget.HeaderScrollingViewBehavior: I getVerticalLayoutGap()>
<android.support.design.widget.HeaderScrollingViewBehavior: V layoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.HeaderScrollingViewBehavior: Z onMeasureChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;IIII)>
<android.support.design.widget.HeaderScrollingViewBehavior: V setOverlayTop(I)>
<android.support.design.widget.StateListAnimator$1: V <init>(Landroid/support/design/widget/StateListAnimator;)>
<android.support.design.widget.StateListAnimator$1: V onAnimationEnd(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.TabLayout$SlidingTabStrip$2: V <init>(Landroid/support/design/widget/TabLayout$SlidingTabStrip;I)>
<android.support.design.widget.TabLayout$SlidingTabStrip$2: V onAnimationEnd(Landroid/support/design/widget/ValueAnimatorCompat;)>
<android.support.design.widget.TextInputEditText: V <init>(Landroid/content/Context;)>
<android.support.design.widget.TextInputEditText: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.TextInputEditText: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<android.support.design.widget.TextInputEditText: Landroid/view/inputmethod/InputConnection; onCreateInputConnection(Landroid/view/inputmethod/EditorInfo;)>
<android.support.design.widget.TextInputLayout$2: V <init>(Landroid/support/design/widget/TextInputLayout;)>
<android.support.design.widget.TextInputLayout$2: V onAnimationStart(Landroid/view/View;)>
<android.support.design.widget.TextInputLayout$3: V <init>(Landroid/support/design/widget/TextInputLayout;Ljava/lang/CharSequence;)>
<android.support.design.widget.TextInputLayout$3: V onAnimationEnd(Landroid/view/View;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V <init>()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V <init>(Landroid/content/Context;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V <init>(Landroid/content/Context;Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState;Landroid/content/res/Resources;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat; create(Landroid/content/Context;I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat; createFromXmlInner(Landroid/content/Context;Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z isStarted()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setupAnimatorsForTarget(Ljava/lang/String;Landroid/animation/Animator;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setupColorAnimator(Landroid/animation/Animator;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V applyTheme(Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z canApplyTheme()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V clearColorFilter()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V draw(Landroid/graphics/Canvas;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getAlpha()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getChangingConfigurations()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/graphics/ColorFilter; getColorFilter()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/graphics/drawable/Drawable$ConstantState; getConstantState()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/graphics/drawable/Drawable; getCurrent()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getIntrinsicHeight()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getIntrinsicWidth()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getMinimumHeight()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getMinimumWidth()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: I getOpacity()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z getPadding(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: [I getState()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/graphics/Region; getTransparentRegion()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V inflate(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V inflate(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z isAutoMirrored()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z isRunning()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z isStateful()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V jumpToCurrentState()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Landroid/graphics/drawable/Drawable; mutate()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V onBoundsChange(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z onLevelChange(I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z onStateChange([I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setAlpha(I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setAutoMirrored(Z)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setChangingConfigurations(I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setColorFilter(ILandroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setColorFilter(Landroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setFilterBitmap(Z)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setHotspot(FF)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setHotspotBounds(IIII)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z setState([I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setTint(I)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setTintList(Landroid/content/res/ColorStateList;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: Z setVisible(ZZ)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V start()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: V stop()>
<android.support.graphics.drawable.VectorDrawableCompat: V <clinit>()>
<android.support.graphics.drawable.VectorDrawableCompat: V <init>()>
<android.support.graphics.drawable.VectorDrawableCompat: V <init>(Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;)>
<android.support.graphics.drawable.VectorDrawableCompat: I applyAlpha(IF)>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/support/graphics/drawable/VectorDrawableCompat; create(Landroid/content/res/Resources;ILandroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/support/graphics/drawable/VectorDrawableCompat; createFromXmlInner(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat: V inflateInternal(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat: Z needMirroring()>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/PorterDuff$Mode; parseTintModeCompat(ILandroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.VectorDrawableCompat: V printGroupTree(Landroid/support/graphics/drawable/VectorDrawableCompat$VGroup;I)>
<android.support.graphics.drawable.VectorDrawableCompat: V updateStateFromTypedArray(Landroid/content/res/TypedArray;Lorg/xmlpull/v1/XmlPullParser;)>
<android.support.graphics.drawable.VectorDrawableCompat: V applyTheme(Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat: Z canApplyTheme()>
<android.support.graphics.drawable.VectorDrawableCompat: V clearColorFilter()>
<android.support.graphics.drawable.VectorDrawableCompat: V draw(Landroid/graphics/Canvas;)>
<android.support.graphics.drawable.VectorDrawableCompat: I getAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat: I getChangingConfigurations()>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/ColorFilter; getColorFilter()>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/drawable/Drawable$ConstantState; getConstantState()>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/drawable/Drawable; getCurrent()>
<android.support.graphics.drawable.VectorDrawableCompat: I getIntrinsicHeight()>
<android.support.graphics.drawable.VectorDrawableCompat: I getIntrinsicWidth()>
<android.support.graphics.drawable.VectorDrawableCompat: I getMinimumHeight()>
<android.support.graphics.drawable.VectorDrawableCompat: I getMinimumWidth()>
<android.support.graphics.drawable.VectorDrawableCompat: I getOpacity()>
<android.support.graphics.drawable.VectorDrawableCompat: Z getPadding(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.VectorDrawableCompat: F getPixelSize()>
<android.support.graphics.drawable.VectorDrawableCompat: [I getState()>
<android.support.graphics.drawable.VectorDrawableCompat: Ljava/lang/Object; getTargetByName(Ljava/lang/String;)>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/Region; getTransparentRegion()>
<android.support.graphics.drawable.VectorDrawableCompat: V inflate(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)>
<android.support.graphics.drawable.VectorDrawableCompat: V inflate(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)>
<android.support.graphics.drawable.VectorDrawableCompat: V invalidateSelf()>
<android.support.graphics.drawable.VectorDrawableCompat: Z isAutoMirrored()>
<android.support.graphics.drawable.VectorDrawableCompat: Z isStateful()>
<android.support.graphics.drawable.VectorDrawableCompat: V jumpToCurrentState()>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/drawable/Drawable; mutate()>
<android.support.graphics.drawable.VectorDrawableCompat: V onBoundsChange(Landroid/graphics/Rect;)>
<android.support.graphics.drawable.VectorDrawableCompat: Z onStateChange([I)>
<android.support.graphics.drawable.VectorDrawableCompat: V scheduleSelf(Ljava/lang/Runnable;J)>
<android.support.graphics.drawable.VectorDrawableCompat: V setAllowCaching(Z)>
<android.support.graphics.drawable.VectorDrawableCompat: V setAlpha(I)>
<android.support.graphics.drawable.VectorDrawableCompat: V setAutoMirrored(Z)>
<android.support.graphics.drawable.VectorDrawableCompat: V setChangingConfigurations(I)>
<android.support.graphics.drawable.VectorDrawableCompat: V setColorFilter(ILandroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.VectorDrawableCompat: V setColorFilter(Landroid/graphics/ColorFilter;)>
<android.support.graphics.drawable.VectorDrawableCompat: V setFilterBitmap(Z)>
<android.support.graphics.drawable.VectorDrawableCompat: V setHotspot(FF)>
<android.support.graphics.drawable.VectorDrawableCompat: V setHotspotBounds(IIII)>
<android.support.graphics.drawable.VectorDrawableCompat: Z setState([I)>
<android.support.graphics.drawable.VectorDrawableCompat: V setTint(I)>
<android.support.graphics.drawable.VectorDrawableCompat: V setTintList(Landroid/content/res/ColorStateList;)>
<android.support.graphics.drawable.VectorDrawableCompat: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<android.support.graphics.drawable.VectorDrawableCompat: Z setVisible(ZZ)>
<android.support.graphics.drawable.VectorDrawableCompat: V unscheduleSelf(Ljava/lang/Runnable;)>
<android.support.graphics.drawable.VectorDrawableCompat: Landroid/graphics/PorterDuffColorFilter; updateTintFilter(Landroid/graphics/PorterDuffColorFilter;Landroid/content/res/ColorStateList;Landroid/graphics/PorterDuff$Mode;)>
<android.support.transition.AutoTransitionPort: V <init>()>
<android.support.transition.ChangeBounds: V <init>()>
<android.support.transition.ChangeBounds: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBounds: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBounds: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.ChangeBounds: V setResizeClip(Z)>
<android.support.transition.ChangeBoundsIcs: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.ChangeBoundsIcs: V setResizeClip(Z)>
<android.support.transition.ChangeBoundsKitKat: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.ChangeBoundsKitKat: V setResizeClip(Z)>
<android.support.transition.ChangeBoundsPort$1: V <init>(Landroid/support/transition/ChangeBoundsPort;)>
<android.support.transition.ChangeBoundsPort$1: V onTransitionCancel(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$1: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$1: V onTransitionPause(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$1: V onTransitionResume(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$2: V <init>(Landroid/support/transition/ChangeBoundsPort;)>
<android.support.transition.ChangeBoundsPort$2: V onTransitionCancel(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$2: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$2: V onTransitionPause(Landroid/support/transition/TransitionPort;)>
<android.support.transition.ChangeBoundsPort$2: V onTransitionResume(Landroid/support/transition/TransitionPort;)>
<android.support.transition.FadeIcs: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.FadeIcs: V <init>(Landroid/support/transition/TransitionInterface;I)>
<android.support.transition.FadeIcs: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.FadeIcs: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.FadeIcs: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.FadeKitKat: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.FadeKitKat: V <init>(Landroid/support/transition/TransitionInterface;I)>
<android.support.transition.FadeKitKat: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.FadeKitKat: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.FadeKitKat: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.FadePort$1: V <init>(Landroid/support/transition/FadePort;Landroid/view/View;)>
<android.support.transition.FadePort$1: V onTransitionCancel(Landroid/support/transition/TransitionPort;)>
<android.support.transition.FadePort$1: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.FadePort$1: V onTransitionPause(Landroid/support/transition/TransitionPort;)>
<android.support.transition.FadePort$1: V onTransitionResume(Landroid/support/transition/TransitionPort;)>
<android.support.transition.FadePort: V <clinit>()>
<android.support.transition.FadePort: V <init>()>
<android.support.transition.FadePort: V <init>(I)>
<android.support.transition.FadePort: V captureValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.FadePort: Landroid/animation/Animator; createAnimation(Landroid/view/View;FFLandroid/animation/AnimatorListenerAdapter;)>
<android.support.transition.FadePort: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.FadePort: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.FadePort: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.SceneApi21: V <init>()>
<android.support.transition.SceneApi21: V enter()>
<android.support.transition.SceneApi21: V init(Landroid/view/ViewGroup;)>
<android.support.transition.SceneApi21: V init(Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.SceneKitKat: V <init>()>
<android.support.transition.SceneKitKat: V invokeEnterAction()>
<android.support.transition.SceneKitKat: V updateCurrentScene(Landroid/view/View;)>
<android.support.transition.SceneKitKat: V enter()>
<android.support.transition.SceneKitKat: V init(Landroid/view/ViewGroup;)>
<android.support.transition.SceneKitKat: V init(Landroid/view/ViewGroup;Landroid/view/View;)>
<android.support.transition.TransitionApi23: V <init>()>
<android.support.transition.TransitionApi23: Landroid/support/transition/TransitionImpl; removeTarget(I)>
<android.support.transition.TransitionManagerPort$MultiListener$1: V <init>(Landroid/support/transition/TransitionManagerPort$MultiListener;Landroid/support/v4/util/ArrayMap;)>
<android.support.transition.TransitionManagerPort$MultiListener$1: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSet: V <init>()>
<android.support.transition.TransitionSet: Landroid/support/transition/TransitionSet; addTransition(Landroid/support/transition/Transition;)>
<android.support.transition.TransitionSet: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionSet: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionSet: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.TransitionSet: I getOrdering()>
<android.support.transition.TransitionSet: Landroid/support/transition/TransitionSet; removeTransition(Landroid/support/transition/Transition;)>
<android.support.transition.TransitionSet: Landroid/support/transition/TransitionSet; setOrdering(I)>
<android.support.transition.TransitionSetIcs: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetIcs; addTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetImpl; addTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetIcs: I getOrdering()>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetIcs; removeTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetImpl; removeTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetIcs; setOrdering(I)>
<android.support.transition.TransitionSetIcs: Landroid/support/transition/TransitionSetImpl; setOrdering(I)>
<android.support.transition.TransitionSetKitKat: V <init>(Landroid/support/transition/TransitionInterface;)>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetImpl; addTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetKitKat; addTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetKitKat: I getOrdering()>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetImpl; removeTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetKitKat; removeTransition(Landroid/support/transition/TransitionImpl;)>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetImpl; setOrdering(I)>
<android.support.transition.TransitionSetKitKat: Landroid/support/transition/TransitionSetKitKat; setOrdering(I)>
<android.support.transition.TransitionSetPort$1: V <init>(Landroid/support/transition/TransitionSetPort;Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort$1: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort$TransitionSetListener: V <init>(Landroid/support/transition/TransitionSetPort;)>
<android.support.transition.TransitionSetPort$TransitionSetListener: V onTransitionEnd(Landroid/support/transition/TransitionPort;)>
<android.support.transition.TransitionSetPort$TransitionSetListener: V onTransitionStart(Landroid/support/transition/TransitionPort;)>
<android.support.transition.Visibility: V <init>()>
<android.support.transition.Visibility: V <init>(Z)>
<android.support.transition.Visibility: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.Visibility: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.Visibility: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.Visibility: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.Visibility: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: V <init>(Landroid/support/transition/VisibilityInterface;)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityIcs$VisibilityWrapper: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityIcs: V <init>()>
<android.support.transition.VisibilityIcs: V init(Landroid/support/transition/TransitionInterface;Ljava/lang/Object;)>
<android.support.transition.VisibilityIcs: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityIcs: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityIcs: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityKitKat: V <init>()>
<android.support.transition.VisibilityKitKat: V init(Landroid/support/transition/TransitionInterface;Ljava/lang/Object;)>
<android.support.transition.VisibilityKitKat: Z isVisible(Landroid/support/transition/TransitionValues;)>
<android.support.transition.VisibilityKitKat: Landroid/animation/Animator; onAppear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<android.support.transition.VisibilityKitKat: Landroid/animation/Animator; onDisappear(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;ILandroid/support/transition/TransitionValues;I)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$1: V <init>(Lcom/getbase/floatingactionbutton/FloatingActionsMenu;Landroid/content/Context;)>
<com.getbase.floatingactionbutton.FloatingActionsMenu$1: Landroid/graphics/drawable/Drawable; getIconDrawable()>
<com.getbase.floatingactionbutton.FloatingActionsMenu$1: V updateBackground()>
<com.ichi2.anki.AbstractFlashcardViewer$10: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$10: V onCancelled()>
<com.ichi2.anki.AbstractFlashcardViewer$10: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AbstractFlashcardViewer$10: V onPreExecute()>
<com.ichi2.anki.AbstractFlashcardViewer$10: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AbstractFlashcardViewer$8: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$8: V onCancelled()>
<com.ichi2.anki.AbstractFlashcardViewer$8: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AbstractFlashcardViewer$8: V onPreExecute()>
<com.ichi2.anki.AbstractFlashcardViewer$8: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AbstractFlashcardViewer$9: V <init>(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer$9: V onCancelled()>
<com.ichi2.anki.AbstractFlashcardViewer$9: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AbstractFlashcardViewer$9: V onPreExecute()>
<com.ichi2.anki.AbstractFlashcardViewer$9: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V <clinit>()>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V <init>()>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: Ljava/lang/String; createTag()>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: Ljava/lang/String; formatString(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V e(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V i(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V w(Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.AnkiDroidApp$ProductionCrashReportingTree: V w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<com.ichi2.anki.CardBrowser$13: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$13: V onCancelled()>
<com.ichi2.anki.CardBrowser$13: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$13: V onPreExecute()>
<com.ichi2.anki.CardBrowser$13: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$14: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$14: V onCancelled()>
<com.ichi2.anki.CardBrowser$14: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$14: V onPreExecute()>
<com.ichi2.anki.CardBrowser$14: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$15: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$15: V onCancelled()>
<com.ichi2.anki.CardBrowser$15: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$15: V onPreExecute()>
<com.ichi2.anki.CardBrowser$15: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$16: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$16: V onCancelled()>
<com.ichi2.anki.CardBrowser$16: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$16: V onPreExecute()>
<com.ichi2.anki.CardBrowser$16: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$17: V <init>(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser$17: V onCancelled()>
<com.ichi2.anki.CardBrowser$17: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardBrowser$17: V onPreExecute()>
<com.ichi2.anki.CardBrowser$17: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardTemplateEditor$1: V <init>(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor$1: V onCancelled()>
<com.ichi2.anki.CardTemplateEditor$1: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardTemplateEditor$1: V onPreExecute()>
<com.ichi2.anki.CardTemplateEditor$1: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$2: V <init>(Lcom/ichi2/anki/CardTemplateEditor$CardTemplateFragment;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$2: V onCancelled()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$2: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$2: V onPreExecute()>
<com.ichi2.anki.CardTemplateEditor$CardTemplateFragment$2: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: V <init>(Lcom/ichi2/anki/CardTemplateEditor;Landroid/support/v4/app/FragmentManager;)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: I getCount()>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: Landroid/support/v4/app/Fragment; getItem(I)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: J getItemId(I)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: I getItemPosition(Ljava/lang/Object;)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: Ljava/lang/CharSequence; getPageTitle(I)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: V notifyChangeInPosition(I)>
<com.ichi2.anki.CardTemplateEditor$TemplatePagerAdapter: V setModel(Lorg/json/JSONObject;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: V <init>(Lcom/ichi2/anki/DeckOptions$DeckPreferenceHack$Editor;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: V onCancelled()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: V onPreExecute()>
<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$14: V <init>(Lcom/ichi2/anki/DeckPicker;Z)>
<com.ichi2.anki.DeckPicker$14: V onCancelled()>
<com.ichi2.anki.DeckPicker$14: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$14: V onPreExecute()>
<com.ichi2.anki.DeckPicker$14: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$15: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$15: V onCancelled()>
<com.ichi2.anki.DeckPicker$15: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$15: V onPreExecute()>
<com.ichi2.anki.DeckPicker$15: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$16: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$16: V onCancelled()>
<com.ichi2.anki.DeckPicker$16: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$16: V onPreExecute()>
<com.ichi2.anki.DeckPicker$16: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$17: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$17: V onCancelled()>
<com.ichi2.anki.DeckPicker$17: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$17: V onPreExecute()>
<com.ichi2.anki.DeckPicker$17: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$18: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$18: V onCancelled()>
<com.ichi2.anki.DeckPicker$18: V onDisconnected()>
<com.ichi2.anki.DeckPicker$18: V onPostExecute(Lcom/ichi2/async/Connection$Payload;)>
<com.ichi2.anki.DeckPicker$18: V onPreExecute()>
<com.ichi2.anki.DeckPicker$18: V onProgressUpdate([Ljava/lang/Object;)>
<com.ichi2.anki.DeckPicker$23: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$23: V onCancelled()>
<com.ichi2.anki.DeckPicker$23: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$23: V onPreExecute()>
<com.ichi2.anki.DeckPicker$23: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$25: V <init>(Lcom/ichi2/anki/DeckPicker;J)>
<com.ichi2.anki.DeckPicker$25: V onCancelled()>
<com.ichi2.anki.DeckPicker$25: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$25: V onPreExecute()>
<com.ichi2.anki.DeckPicker$25: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$26: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$26: V onCancelled()>
<com.ichi2.anki.DeckPicker$26: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$26: V onPreExecute()>
<com.ichi2.anki.DeckPicker$26: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$27: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$27: V onDismissed(Landroid/support/design/widget/Snackbar;I)>
<com.ichi2.anki.DeckPicker$27: V onDismissed(Ljava/lang/Object;I)>
<com.ichi2.anki.DeckPicker$27: V onShown(Landroid/support/design/widget/Snackbar;)>
<com.ichi2.anki.DeckPicker$27: V onShown(Ljava/lang/Object;)>
<com.ichi2.anki.DeckPicker$5: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$5: V onCancelled()>
<com.ichi2.anki.DeckPicker$5: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$5: V onPreExecute()>
<com.ichi2.anki.DeckPicker$5: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$6: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$6: V onCancelled()>
<com.ichi2.anki.DeckPicker$6: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$6: V onPreExecute()>
<com.ichi2.anki.DeckPicker$6: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$7: V <init>(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker$7: V onCancelled()>
<com.ichi2.anki.DeckPicker$7: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.DeckPicker$7: V onPreExecute()>
<com.ichi2.anki.DeckPicker$7: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelBrowser$1: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$1: V onCancelled()>
<com.ichi2.anki.ModelBrowser$1: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelBrowser$1: V onPreExecute()>
<com.ichi2.anki.ModelBrowser$1: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelBrowser$2: V <init>(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser$2: V onCancelled()>
<com.ichi2.anki.ModelBrowser$2: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelBrowser$2: V onPreExecute()>
<com.ichi2.anki.ModelBrowser$2: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelFieldEditor$8: V <init>(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor$8: V onCancelled()>
<com.ichi2.anki.ModelFieldEditor$8: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.ModelFieldEditor$8: V onPreExecute()>
<com.ichi2.anki.ModelFieldEditor$8: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.NavigationDrawerActivity$3: V <init>(Lcom/ichi2/anki/NavigationDrawerActivity;Landroid/app/Activity;Landroid/support/v4/widget/DrawerLayout;II)>
<com.ichi2.anki.NavigationDrawerActivity$3: V onDrawerClosed(Landroid/view/View;)>
<com.ichi2.anki.NavigationDrawerActivity$3: V onDrawerOpened(Landroid/view/View;)>
<com.ichi2.anki.NoteEditor$1: V <init>(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor$1: V onCancelled()>
<com.ichi2.anki.NoteEditor$1: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.NoteEditor$1: V onPreExecute()>
<com.ichi2.anki.NoteEditor$1: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.Statistics$ChartFragment: V <init>()>
<com.ichi2.anki.Statistics$ChartFragment: V createChart()>
<com.ichi2.anki.Statistics$ChartFragment: Z isWholeCollection()>
<com.ichi2.anki.Statistics$ChartFragment: V checkAndUpdate()>
<com.ichi2.anki.Statistics$ChartFragment: V invalidateView()>
<com.ichi2.anki.Statistics$ChartFragment: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Statistics$ChartFragment: Landroid/view/View; onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)>
<com.ichi2.anki.Statistics$ChartFragment: V onDestroy()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: V <init>()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: V createStatisticOverview()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: Z isWholeCollection()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: V checkAndUpdate()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: V invalidateView()>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: Landroid/view/View; onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)>
<com.ichi2.anki.Statistics$OverviewStatisticsFragment: V onDestroy()>
<com.ichi2.anki.Statistics$SectionsPagerAdapter: V <init>(Lcom/ichi2/anki/Statistics;Landroid/support/v4/app/FragmentManager;)>
<com.ichi2.anki.Statistics$SectionsPagerAdapter: I getCount()>
<com.ichi2.anki.Statistics$SectionsPagerAdapter: Landroid/support/v4/app/Fragment; getItem(I)>
<com.ichi2.anki.Statistics$SectionsPagerAdapter: I getItemPosition(Ljava/lang/Object;)>
<com.ichi2.anki.Statistics$SectionsPagerAdapter: Ljava/lang/CharSequence; getPageTitle(I)>
<com.ichi2.anki.StudyOptionsFragment$3: V <init>(Lcom/ichi2/anki/StudyOptionsFragment;Z)>
<com.ichi2.anki.StudyOptionsFragment$3: V onCancelled()>
<com.ichi2.anki.StudyOptionsFragment$3: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.StudyOptionsFragment$3: V onPreExecute()>
<com.ichi2.anki.StudyOptionsFragment$3: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.UIUtils$1: V <init>()>
<com.ichi2.anki.UIUtils$1: V onCancelled()>
<com.ichi2.anki.UIUtils$1: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.UIUtils$1: V onPreExecute()>
<com.ichi2.anki.UIUtils$1: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.api.AddContentApi$CompatV2: V <init>(Lcom/ichi2/anki/api/AddContentApi;)>
<com.ichi2.anki.api.AddContentApi$CompatV2: V <init>(Lcom/ichi2/anki/api/AddContentApi;Lcom/ichi2/anki/api/AddContentApi$1;)>
<com.ichi2.anki.api.AddContentApi$CompatV2: Landroid/util/SparseArray; findDuplicateNotes(JLjava/util/List;)>
<com.ichi2.anki.api.AddContentApi$CompatV2: I insertNotes(J[Landroid/content/ContentValues;)>
<com.ichi2.anki.api.AddContentApi$CompatV2: Landroid/database/Cursor; queryNotes(J)>
<com.ichi2.anki.dialogs.AsyncDialogFragment: V <init>()>
<com.ichi2.anki.dialogs.AsyncDialogFragment: Landroid/os/Message; getDialogHandlerMessage()>
<com.ichi2.anki.dialogs.AsyncDialogFragment: Landroid/content/res/Resources; res()>
<com.ichi2.anki.dialogs.CardBrowserContextMenu: V <init>()>
<com.ichi2.anki.dialogs.CardBrowserContextMenu: Lcom/ichi2/anki/dialogs/CardBrowserContextMenu; newInstance(Ljava/lang/String;ZZLcom/afollestad/materialdialogs/MaterialDialog$ListCallback;)>
<com.ichi2.anki.dialogs.CardBrowserContextMenu: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: V <clinit>()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: V <init>()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$MySearchesArrayAdapter; access$000(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$MySearchesDialogListener; access$100()>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Ljava/lang/String; access$200(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Ljava/util/HashMap; access$300(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: V access$700(Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog; newInstance(Ljava/util/HashMap;Lcom/ichi2/anki/dialogs/CardBrowserMySearchesDialog$MySearchesDialogListener;Ljava/lang/String;I)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: V removeSearch(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.CardBrowserMySearchesDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.CardBrowserOrderDialog: V <init>()>
<com.ichi2.anki.dialogs.CardBrowserOrderDialog: Lcom/ichi2/anki/dialogs/CardBrowserOrderDialog; newInstance(IZLcom/afollestad/materialdialogs/MaterialDialog$ListCallbackSingleChoice;)>
<com.ichi2.anki.dialogs.CardBrowserOrderDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: V <init>()>
<com.ichi2.anki.dialogs.ConfirmationDialog: Ljava/lang/Runnable; access$000(Lcom/ichi2/anki/dialogs/ConfirmationDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: Ljava/lang/Runnable; access$100(Lcom/ichi2/anki/dialogs/ConfirmationDialog;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: V setArgs(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: V setArgs(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: V setCancel(Ljava/lang/Runnable;)>
<com.ichi2.anki.dialogs.ConfirmationDialog: V setConfirm(Ljava/lang/Runnable;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$4: V <init>(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$4: V onCancelled()>
<com.ichi2.anki.dialogs.CustomStudyDialog$4: V onPostExecute(Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.dialogs.CustomStudyDialog$4: V onPreExecute()>
<com.ichi2.anki.dialogs.CustomStudyDialog$4: V onProgressUpdate([Lcom/ichi2/async/DeckTask$TaskData;)>
<com.ichi2.anki.dialogs.CustomStudyDialog: V <init>()>
<com.ichi2.anki.dialogs.CustomStudyDialog: V access$000(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Lorg/json/JSONArray;[Ljava/lang/Object;Ljava/lang/Boolean;)>
<com.ichi2.anki.dialogs.CustomStudyDialog: V access$100(Lcom/ichi2/anki/dialogs/CustomStudyDialog;Z)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Lcom/afollestad/materialdialogs/MaterialDialog; buildContextMenu(I)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Lcom/afollestad/materialdialogs/MaterialDialog; buildInputDialog(I)>
<com.ichi2.anki.dialogs.CustomStudyDialog: V createCustomStudySession(Lorg/json/JSONArray;[Ljava/lang/Object;Ljava/lang/Boolean;)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Ljava/lang/String; getDefaultValue()>
<com.ichi2.anki.dialogs.CustomStudyDialog: Ljava/util/HashMap; getKeyValueMap()>
<com.ichi2.anki.dialogs.CustomStudyDialog: [I getListIds(I)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Ljava/lang/String; getText1()>
<com.ichi2.anki.dialogs.CustomStudyDialog: Ljava/lang/String; getText2()>
<com.ichi2.anki.dialogs.CustomStudyDialog: Lcom/ichi2/anki/dialogs/CustomStudyDialog; newInstance(IJ)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Lcom/ichi2/anki/dialogs/CustomStudyDialog; newInstance(IJZ)>
<com.ichi2.anki.dialogs.CustomStudyDialog: V onLimitsExtended(Z)>
<com.ichi2.anki.dialogs.CustomStudyDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog: V <init>()>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog: Lcom/ichi2/anki/dialogs/DeckPickerBackupNoSpaceLeftDialog; newInstance()>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog: V <init>()>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog: Lcom/ichi2/anki/dialogs/DeckPickerConfirmDeleteDeckDialog; newInstance(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerContextMenu: V <init>()>
<com.ichi2.anki.dialogs.DeckPickerContextMenu: Ljava/util/HashMap; getKeyValueMap()>
<com.ichi2.anki.dialogs.DeckPickerContextMenu: [I getListIds()>
<com.ichi2.anki.dialogs.DeckPickerContextMenu: Lcom/ichi2/anki/dialogs/DeckPickerContextMenu; newInstance(J)>
<com.ichi2.anki.dialogs.DeckPickerContextMenu: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog: V <init>()>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog: Lcom/ichi2/anki/dialogs/DeckPickerNoSpaceLeftDialog; newInstance()>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ExportDialog: V <init>()>
<com.ichi2.anki.dialogs.ExportDialog: Z access$000(Lcom/ichi2/anki/dialogs/ExportDialog;)>
<com.ichi2.anki.dialogs.ExportDialog: Z access$002(Lcom/ichi2/anki/dialogs/ExportDialog;Z)>
<com.ichi2.anki.dialogs.ExportDialog: Z access$100(Lcom/ichi2/anki/dialogs/ExportDialog;)>
<com.ichi2.anki.dialogs.ExportDialog: Z access$102(Lcom/ichi2/anki/dialogs/ExportDialog;Z)>
<com.ichi2.anki.dialogs.ExportDialog: Lcom/ichi2/anki/dialogs/ExportDialog; newInstance(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ExportDialog: Lcom/ichi2/anki/dialogs/ExportDialog; newInstance(Ljava/lang/String;Ljava/lang/Long;)>
<com.ichi2.anki.dialogs.ExportDialog: V dismissAllDialogFragments()>
<com.ichi2.anki.dialogs.ExportDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ExportDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ImportDialog: V <init>()>
<com.ichi2.anki.dialogs.ImportDialog: Ljava/lang/String; access$000(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ImportDialog: Ljava/lang/String; filenameFromPath(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.ImportDialog: Lcom/ichi2/anki/dialogs/ImportDialog; newInstance(ILjava/lang/String;)>
<com.ichi2.anki.dialogs.ImportDialog: V dismissAllDialogFragments()>
<com.ichi2.anki.dialogs.ImportDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ImportDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ModelBrowserContextMenu: V <init>()>
<com.ichi2.anki.dialogs.ModelBrowserContextMenu: Lcom/ichi2/anki/dialogs/ModelBrowserContextMenu; newInstance(Ljava/lang/String;Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback;)>
<com.ichi2.anki.dialogs.ModelBrowserContextMenu: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.ModelEditorContextMenu: V <init>()>
<com.ichi2.anki.dialogs.ModelEditorContextMenu: Lcom/ichi2/anki/dialogs/ModelEditorContextMenu; newInstance(Ljava/lang/String;Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback;)>
<com.ichi2.anki.dialogs.ModelEditorContextMenu: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard: V <init>()>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard: Lcom/ichi2/anki/dialogs/NoteEditorRescheduleCard; newInstance()>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.NoteEditorRescheduleCard: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.TagsDialog: V <init>()>
<com.ichi2.anki.dialogs.TagsDialog: I access$000(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: I access$002(Lcom/ichi2/anki/dialogs/TagsDialog;I)>
<com.ichi2.anki.dialogs.TagsDialog: Ljava/util/TreeSet; access$100(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Lcom/ichi2/anki/dialogs/TagsDialog$TagsDialogListener; access$200(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Landroid/support/v7/widget/SearchView; access$300(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Landroid/view/MenuItem; access$400(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Landroid/support/v7/widget/RecyclerView; access$500(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Lcom/ichi2/anki/dialogs/TagsDialog$TagsArrayAdapter; access$600(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: Ljava/util/ArrayList; access$700(Lcom/ichi2/anki/dialogs/TagsDialog;)>
<com.ichi2.anki.dialogs.TagsDialog: V adjustToolbar(Landroid/view/View;)>
<com.ichi2.anki.dialogs.TagsDialog: Lcom/ichi2/anki/dialogs/TagsDialog; newInstance(ILjava/util/ArrayList;Ljava/util/ArrayList;)>
<com.ichi2.anki.dialogs.TagsDialog: V addTag(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.TagsDialog: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.TagsDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.TagsDialog: V setTagsDialogListener(Lcom/ichi2/anki/dialogs/TagsDialog$TagsDialogListener;)>
<com.ichi2.anki.multimediacard.activity.PickStringDialogFragment: V <init>()>
<com.ichi2.anki.multimediacard.activity.PickStringDialogFragment: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.PickStringDialogFragment: V setChoices(Ljava/util/ArrayList;)>
<com.ichi2.anki.multimediacard.activity.PickStringDialogFragment: V setOnclickListener(Landroid/content/DialogInterface$OnClickListener;)>
<com.ichi2.anki.multimediacard.activity.PickStringDialogFragment: V setTitle(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V <init>()>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: Ljava/lang/String; access$000(Lcom/ichi2/anki/multimediacard/fields/BasicAudioFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V createUI(Landroid/content/Context;Landroid/widget/LinearLayout;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V onDestroy()>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V onDone()>
<com.ichi2.anki.multimediacard.fields.BasicAudioFieldController: V onFocusLost()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V <init>()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: I getMaxImageSize()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: Ljava/lang/String; rotateAndCompress(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V createUI(Landroid/content/Context;Landroid/widget/LinearLayout;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: Landroid/util/DisplayMetrics; getDisplayMetrics()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V onDestroy()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V onDone()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V onFocusLost()>
<com.ichi2.anki.multimediacard.fields.BasicImageFieldController: V setPreviewImage(Ljava/lang/String;I)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V <init>()>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: Landroid/widget/EditText; access$000(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: Ljava/lang/String; access$100(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;I)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V access$200(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: Ljava/util/ArrayList; access$300(Lcom/ichi2/anki/multimediacard/fields/BasicTextFieldController;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V createClearButton(Landroid/widget/LinearLayout;Landroid/widget/LinearLayout$LayoutParams;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V createCloneButton(Landroid/widget/LinearLayout;Landroid/widget/LinearLayout$LayoutParams;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V createPronounceButton(Landroid/widget/LinearLayout;Landroid/widget/LinearLayout$LayoutParams;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V createTranslateButton(Landroid/widget/LinearLayout;Landroid/widget/LinearLayout$LayoutParams;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: Z isIntentAvailable(Landroid/content/Context;Landroid/content/Intent;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V showToast(Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V createUI(Landroid/content/Context;Landroid/widget/LinearLayout;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V onClick(Landroid/content/DialogInterface;I)>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V onDestroy()>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V onDone()>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V onFocusLost()>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V startTranslationWithColorDict()>
<com.ichi2.anki.multimediacard.fields.BasicTextFieldController: V startTranslationWithGlosbe()>
<com.ichi2.async.CollectionLoader: V <init>(Landroid/content/Context;)>
<com.ichi2.async.CollectionLoader: V deliverResult(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.async.CollectionLoader: V deliverResult(Ljava/lang/Object;)>
<com.ichi2.async.CollectionLoader: Lcom/ichi2/libanki/Collection; loadInBackground()>
<com.ichi2.async.CollectionLoader: Ljava/lang/Object; loadInBackground()>
<com.ichi2.async.CollectionLoader: V onReset()>
<com.ichi2.async.CollectionLoader: V onStartLoading()>
<com.ichi2.async.CollectionLoader: V onStopLoading()>
<com.ichi2.compat.CompatV11: V <init>()>
<com.ichi2.compat.CompatV11: V disableDatabaseWriteAheadLogging(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.compat.CompatV11: Landroid/content/Intent; getPreferenceSubscreenIntent(Landroid/content/Context;Ljava/lang/String;)>
<com.ichi2.compat.CompatV11: V restartActivityInvalidateBackstack(Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.libanki.AnkiPackageExporter: V <init>(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.libanki.AnkiPackageExporter: Lorg/json/JSONObject; exportFiltered(Lcom/ichi2/libanki/ZipFile;Ljava/lang/String;Landroid/content/Context;)>
<com.ichi2.libanki.AnkiPackageExporter: Lorg/json/JSONObject; exportVerbatim(Lcom/ichi2/libanki/ZipFile;)>
<com.ichi2.libanki.AnkiPackageExporter: V exportInto(Ljava/lang/String;Landroid/content/Context;)>
<com.ichi2.libanki.AnkiPackageExporter: V prepareMedia()>
<com.ichi2.libanki.AnkiPackageExporter: V setDid(Ljava/lang/Long;)>
<com.ichi2.libanki.AnkiPackageExporter: V setIncludeMedia(Z)>
<com.ichi2.libanki.AnkiPackageExporter: V setIncludeSched(Z)>
<com.ichi2.libanki.importer.AnkiPackageImporter: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.importer.AnkiPackageImporter: Ljava/io/BufferedInputStream; _srcMediaData(Ljava/lang/String;)>
<com.ichi2.libanki.importer.AnkiPackageImporter: V run()>
<com.ichi2.libanki.importer.TextImporter: V <init>(Lcom/ichi2/libanki/Collection;Ljava/lang/String;)>
<com.ichi2.libanki.importer.TextImporter: V initMapping()>
<com.ichi2.libanki.importer.TextImporter: V run()>
<com.ichi2.libanki.importer.TextImporter: V setImportMode(I)>
<io.requery.android.database.sqlite.SQLiteCursor: V <init>(Lio/requery/android/database/sqlite/SQLiteCursorDriver;Ljava/lang/String;Lio/requery/android/database/sqlite/SQLiteQuery;)>
<io.requery.android.database.sqlite.SQLiteCursor: I cursorPickFillWindowStartPosition(II)>
<io.requery.android.database.sqlite.SQLiteCursor: V fillWindow(I)>
<io.requery.android.database.sqlite.SQLiteCursor: V close()>
<io.requery.android.database.sqlite.SQLiteCursor: V deactivate()>
<io.requery.android.database.sqlite.SQLiteCursor: V finalize()>
<io.requery.android.database.sqlite.SQLiteCursor: I getColumnIndex(Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteCursor: [Ljava/lang/String; getColumnNames()>
<io.requery.android.database.sqlite.SQLiteCursor: I getCount()>
<io.requery.android.database.sqlite.SQLiteCursor: Lio/requery/android/database/sqlite/SQLiteDatabase; getDatabase()>
<io.requery.android.database.sqlite.SQLiteCursor: Z onMove(II)>
<io.requery.android.database.sqlite.SQLiteCursor: Z requery()>
<io.requery.android.database.sqlite.SQLiteCursor: V setSelectionArguments([Ljava/lang/String;)>
<io.requery.android.database.sqlite.SQLiteCursor: V setWindow(Lio/requery/android/database/CursorWindow;)>
<io.requery.android.database.sqlite.SQLiteQuery: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/Object;Landroid/support/v4/os/CancellationSignal;)>
<io.requery.android.database.sqlite.SQLiteQuery: I fillWindow(Lio/requery/android/database/CursorWindow;IIZ)>
<io.requery.android.database.sqlite.SQLiteQuery: Ljava/lang/String; toString()>
<io.requery.android.database.sqlite.SQLiteStatement: V <init>(Lio/requery/android/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/Object;)>
<io.requery.android.database.sqlite.SQLiteStatement: V execute()>
<io.requery.android.database.sqlite.SQLiteStatement: J executeInsert()>
<io.requery.android.database.sqlite.SQLiteStatement: I executeUpdateDelete()>
<io.requery.android.database.sqlite.SQLiteStatement: Landroid/os/ParcelFileDescriptor; simpleQueryForBlobFileDescriptor()>
<io.requery.android.database.sqlite.SQLiteStatement: J simpleQueryForLong()>
<io.requery.android.database.sqlite.SQLiteStatement: Ljava/lang/String; simpleQueryForString()>
<io.requery.android.database.sqlite.SQLiteStatement: Ljava/lang/String; toString()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: Z isStarted()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: V draw(Landroid/graphics/Canvas;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: Z isRunning()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: V start()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawableBase: V stop()>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V <clinit>()>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V drawProgressRect(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V drawTrackRect(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: I getIntrinsicHeight()>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: Z getShowTrack()>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V onDraw(Landroid/graphics/Canvas;IILandroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: Z onLevelChange(I)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V onPreparePaint(Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.SingleHorizontalProgressDrawable: V setShowTrack(Z)>
<timber.log.Timber$DebugTree: V <clinit>()>
<timber.log.Timber$DebugTree: V <init>()>
<timber.log.Timber$DebugTree: Ljava/lang/String; maybeFormat(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V throwShade(ILjava/lang/String;Ljava/lang/Throwable;)>
<timber.log.Timber$DebugTree: Ljava/lang/String; createTag()>
<timber.log.Timber$DebugTree: V d(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V e(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V i(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V logMessage(ILjava/lang/String;Ljava/lang/String;)>
<timber.log.Timber$DebugTree: Ljava/lang/String; nextTag()>
<timber.log.Timber$DebugTree: V tag(Ljava/lang/String;)>
<timber.log.Timber$DebugTree: V v(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V w(Ljava/lang/String;[Ljava/lang/Object;)>
<timber.log.Timber$DebugTree: V w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)>
<android.support.design.internal.b: V <init>(Landroid/content/Context;Landroid/support/design/internal/a;Landroid/support/v7/view/menu/k;)>
<android.support.design.internal.b: V onItemsChanged(Z)>
<android.support.design.widget.AppBarLayout$Behavior: V <init>()>
<android.support.design.widget.AppBarLayout$Behavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout$Behavior: I access$000(Landroid/support/design/widget/AppBarLayout$Behavior;)>
<android.support.design.widget.AppBarLayout$Behavior: V animateOffsetTo(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;IF)>
<android.support.design.widget.AppBarLayout$Behavior: V animateOffsetWithDuration(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;II)>
<android.support.design.widget.AppBarLayout$Behavior: Z checkFlag(II)>
<android.support.design.widget.AppBarLayout$Behavior: Landroid/view/View; getAppBarChildOnOffset(Landroid/support/design/widget/AppBarLayout;I)>
<android.support.design.widget.AppBarLayout$Behavior: I getChildIndexOnOffset(Landroid/support/design/widget/AppBarLayout;I)>
<android.support.design.widget.AppBarLayout$Behavior: I interpolateOffset(Landroid/support/design/widget/AppBarLayout;I)>
<android.support.design.widget.AppBarLayout$Behavior: Z shouldJumpElevationState(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: V snapToChildIfNeeded(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: V updateAppBarLayoutDrawableState(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;II)>
<android.support.design.widget.AppBarLayout$Behavior: Z canDragView(Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: Z canDragView(Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: I getLeftAndRightOffset()>
<android.support.design.widget.AppBarLayout$Behavior: I getMaxDragOffset(Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: I getMaxDragOffset(Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: I getScrollRangeForDragFling(Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: I getScrollRangeForDragFling(Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: I getTopAndBottomOffset()>
<android.support.design.widget.AppBarLayout$Behavior: I getTopBottomOffsetForScrollingSibling()>
<android.support.design.widget.AppBarLayout$Behavior: Z isOffsetAnimatorRunning()>
<android.support.design.widget.AppBarLayout$Behavior: V onFlingFinished(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: V onFlingFinished(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;I)>
<android.support.design.widget.AppBarLayout$Behavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.AppBarLayout$Behavior: Z onMeasureChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;IIII)>
<android.support.design.widget.AppBarLayout$Behavior: Z onMeasureChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;IIII)>
<android.support.design.widget.AppBarLayout$Behavior: Z onNestedFling(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/view/View;FFZ)>
<android.support.design.widget.AppBarLayout$Behavior: Z onNestedFling(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;FFZ)>
<android.support.design.widget.AppBarLayout$Behavior: V onNestedPreScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/view/View;II[I)>
<android.support.design.widget.AppBarLayout$Behavior: V onNestedPreScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;II[I)>
<android.support.design.widget.AppBarLayout$Behavior: V onNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/view/View;IIII)>
<android.support.design.widget.AppBarLayout$Behavior: V onNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;IIII)>
<android.support.design.widget.AppBarLayout$Behavior: V onRestoreInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/os/Parcelable;)>
<android.support.design.widget.AppBarLayout$Behavior: V onRestoreInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/os/Parcelable;)>
<android.support.design.widget.AppBarLayout$Behavior: Landroid/os/Parcelable; onSaveInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$Behavior: Landroid/os/Parcelable; onSaveInstanceState(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: Z onStartNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.AppBarLayout$Behavior: Z onStartNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;Landroid/view/View;I)>
<android.support.design.widget.AppBarLayout$Behavior: V onStopNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: V onStopNestedScroll(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$Behavior: V setDragCallback(Landroid/support/design/widget/AppBarLayout$Behavior$DragCallback;)>
<android.support.design.widget.AppBarLayout$Behavior: I setHeaderTopBottomOffset(Landroid/support/design/widget/CoordinatorLayout;Landroid/support/design/widget/AppBarLayout;III)>
<android.support.design.widget.AppBarLayout$Behavior: I setHeaderTopBottomOffset(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;III)>
<android.support.design.widget.AppBarLayout$Behavior: Z setLeftAndRightOffset(I)>
<android.support.design.widget.AppBarLayout$Behavior: Z setTopAndBottomOffset(I)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: V <init>()>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: I getAppBarLayoutOffset(Landroid/support/design/widget/AppBarLayout;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: V offsetChildAsNeeded(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Landroid/support/design/widget/AppBarLayout; findFirstDependency(Ljava/util/List;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Landroid/view/View; findFirstDependency(Ljava/util/List;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: I getLeftAndRightOffset()>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: F getOverlapRatioForOffset(Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: I getScrollRange(Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: I getTopAndBottomOffset()>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z layoutDependsOn(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z onDependentViewChanged(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/view/View;)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z onLayoutChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;I)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z onMeasureChild(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;IIII)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z onRequestChildRectangleOnScreen(Landroid/support/design/widget/CoordinatorLayout;Landroid/view/View;Landroid/graphics/Rect;Z)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z setLeftAndRightOffset(I)>
<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: Z setTopAndBottomOffset(I)>
<android.support.design.widget.BottomSheetDialogFragment: V <init>()>
<android.support.design.widget.BottomSheetDialogFragment: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<android.support.design.widget.FloatingActionButtonGingerbread$DisabledElevationAnimation: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;)>
<android.support.design.widget.FloatingActionButtonGingerbread$DisabledElevationAnimation: F getTargetShadowSize()>
<android.support.design.widget.FloatingActionButtonGingerbread$ElevateToTranslationZAnimation: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;)>
<android.support.design.widget.FloatingActionButtonGingerbread$ElevateToTranslationZAnimation: F getTargetShadowSize()>
<android.support.design.widget.FloatingActionButtonGingerbread$ResetElevationAnimation: V <init>(Landroid/support/design/widget/FloatingActionButtonGingerbread;)>
<android.support.design.widget.FloatingActionButtonGingerbread$ResetElevationAnimation: F getTargetShadowSize()>
<android.support.design.widget.FloatingActionButtonLollipop: V <init>(Landroid/support/design/widget/VisibilityAwareImageButton;Landroid/support/design/widget/ShadowViewDelegate;Landroid/support/design/widget/ValueAnimatorCompat$Creator;)>
<android.support.design.widget.FloatingActionButtonLollipop: F getElevation()>
<android.support.design.widget.FloatingActionButtonLollipop: V getPadding(Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButtonLollipop: V jumpDrawableToCurrentState()>
<android.support.design.widget.FloatingActionButtonLollipop: Landroid/support/design/widget/CircularBorderDrawable; newCircularDrawable()>
<android.support.design.widget.FloatingActionButtonLollipop: Landroid/graphics/drawable/GradientDrawable; newGradientDrawableForShape()>
<android.support.design.widget.FloatingActionButtonLollipop: V onCompatShadowChanged()>
<android.support.design.widget.FloatingActionButtonLollipop: V onDrawableStateChanged([I)>
<android.support.design.widget.FloatingActionButtonLollipop: V onElevationsChanged(FF)>
<android.support.design.widget.FloatingActionButtonLollipop: V onPaddingUpdated(Landroid/graphics/Rect;)>
<android.support.design.widget.FloatingActionButtonLollipop: Z requirePreDrawListener()>
<android.support.design.widget.FloatingActionButtonLollipop: V setBackgroundDrawable(Landroid/content/res/ColorStateList;Landroid/graphics/PorterDuff$Mode;II)>
<android.support.design.widget.FloatingActionButtonLollipop: V setRippleColor(I)>
<android.support.transition.AutoTransition: V <init>()>
<android.support.transition.Fade: V <init>()>
<android.support.transition.Fade: V <init>(I)>
<android.support.transition.Fade: V captureEndValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.Fade: V captureStartValues(Landroid/support/transition/TransitionValues;)>
<android.support.transition.Fade: Landroid/animation/Animator; createAnimator(Landroid/view/ViewGroup;Landroid/support/transition/TransitionValues;Landroid/support/transition/TransitionValues;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: V <clinit>()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: V <init>()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: [I access$000(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: [Ljava/io/File; access$100(Lcom/ichi2/anki/dialogs/DatabaseErrorDialog;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Ljava/lang/String; getMessage()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Ljava/lang/String; getTitle()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Lcom/ichi2/anki/dialogs/DatabaseErrorDialog; newInstance(I)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: V dismissAllDialogFragments()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Landroid/os/Message; getDialogHandlerMessage()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Ljava/lang/String; getNotificationMessage()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Ljava/lang/String; getNotificationTitle()>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DatabaseErrorDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: V <init>()>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Lcom/ichi2/anki/dialogs/DeckPickerExportCompleteDialog; newInstance(Ljava/lang/String;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Landroid/os/Message; getDialogHandlerMessage()>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Ljava/lang/String; getNotificationMessage()>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Ljava/lang/String; getNotificationTitle()>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.DeckPickerExportCompleteDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.MediaCheckDialog: V <init>()>
<com.ichi2.anki.dialogs.MediaCheckDialog: Lcom/ichi2/anki/dialogs/MediaCheckDialog; newInstance(I)>
<com.ichi2.anki.dialogs.MediaCheckDialog: Lcom/ichi2/anki/dialogs/MediaCheckDialog; newInstance(ILjava/util/List;)>
<com.ichi2.anki.dialogs.MediaCheckDialog: V dismissAllDialogFragments()>
<com.ichi2.anki.dialogs.MediaCheckDialog: Landroid/os/Message; getDialogHandlerMessage()>
<com.ichi2.anki.dialogs.MediaCheckDialog: Ljava/lang/String; getNotificationMessage()>
<com.ichi2.anki.dialogs.MediaCheckDialog: Ljava/lang/String; getNotificationTitle()>
<com.ichi2.anki.dialogs.MediaCheckDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.MediaCheckDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.SimpleMessageDialog: V <init>()>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Lcom/ichi2/anki/dialogs/SimpleMessageDialog; newInstance(Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Lcom/ichi2/anki/dialogs/SimpleMessageDialog; newInstance(Ljava/lang/String;Z)>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Ljava/lang/String; getNotificationMessage()>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Ljava/lang/String; getNotificationTitle()>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.SimpleMessageDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.SyncErrorDialog: V <init>()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Ljava/lang/String; getMessage()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Ljava/lang/String; getTitle()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Lcom/ichi2/anki/dialogs/SyncErrorDialog; newInstance(ILjava/lang/String;)>
<com.ichi2.anki.dialogs.SyncErrorDialog: V dismissAllDialogFragments()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Landroid/os/Message; getDialogHandlerMessage()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Ljava/lang/String; getNotificationMessage()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Ljava/lang/String; getNotificationTitle()>
<com.ichi2.anki.dialogs.SyncErrorDialog: Landroid/app/Dialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.anki.dialogs.SyncErrorDialog: Lcom/afollestad/materialdialogs/MaterialDialog; onCreateDialog(Landroid/os/Bundle;)>
<com.ichi2.compat.CompatV12: V <init>()>
<com.ichi2.compat.CompatV12: V enableCookiesForFileSchemePages()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V <clinit>()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V drawProgressRect(Landroid/graphics/Canvas;Lme/zhanghai/android/materialprogressbar/IndeterminateHorizontalProgressDrawable$RectTransformX;Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V drawTrackRect(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V draw(Landroid/graphics/Canvas;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: I getAlpha()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: Landroid/graphics/ColorFilter; getColorFilter()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: I getIntrinsicHeight()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: I getOpacity()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: Z getShowTrack()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: Z getUseIntrinsicPadding()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: Z isRunning()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V onDraw(Landroid/graphics/Canvas;IILandroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V onPreparePaint(Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setAlpha(I)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setColorFilter(Landroid/graphics/ColorFilter;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setShowTrack(Z)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setTint(I)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setTintList(Landroid/content/res/ColorStateList;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V setUseIntrinsicPadding(Z)>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V start()>
<me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable: V stop()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V <clinit>()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V <init>(Landroid/content/Context;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V drawRing(Landroid/graphics/Canvas;Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: I getIntrinsicSize()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V draw(Landroid/graphics/Canvas;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: I getAlpha()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: Landroid/graphics/ColorFilter; getColorFilter()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: I getIntrinsicHeight()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: I getIntrinsicWidth()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: I getOpacity()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: Z getUseIntrinsicPadding()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: Z isRunning()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V onDraw(Landroid/graphics/Canvas;IILandroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V onPreparePaint(Landroid/graphics/Paint;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setAlpha(I)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setColorFilter(Landroid/graphics/ColorFilter;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setTint(I)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setTintList(Landroid/content/res/ColorStateList;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setTintMode(Landroid/graphics/PorterDuff$Mode;)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V setUseIntrinsicPadding(Z)>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V start()>
<me.zhanghai.android.materialprogressbar.IndeterminateProgressDrawable: V stop()>
<com.ichi2.compat.CompatV15: V <init>()>
<com.ichi2.compat.CompatV15: V setTtsOnUtteranceProgressListener(Landroid/speech/tts/TextToSpeech;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V <init>()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Landroid/widget/Spinner; access$000(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Landroid/widget/Spinner; access$100(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Ljava/lang/String; access$200(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Landroid/app/ProgressDialog; access$300(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V access$400(Lcom/ichi2/anki/multimediacard/activity/TranslationActivity;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Ljava/lang/String; computeAddress()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V dismissCarefullyProgressDialog()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V finishCancel()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: I getSpinnerIndex(Landroid/widget/Spinner;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Ljava/util/ArrayList; parseJson(Lcom/ichi2/anki/multimediacard/glosbe/json/Response;Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V returnFailure(Ljava/lang/String;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V returnTheTranslation()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V showPickTranslationDialog()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V showToast(Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V showToastLong(Ljava/lang/CharSequence;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V stopWorking()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V onCancel(Landroid/content/DialogInterface;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V onClick(Landroid/content/DialogInterface;I)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V onPause()>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.TranslationActivity: V translate()>
<com.ichi2.compat.CompatV15NookHdOrHdPlus: V <init>()>
<com.ichi2.compat.CompatV15NookHdOrHdPlus: V disableDatabaseWriteAheadLogging(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.compat.CompatV16: V <init>()>
<com.ichi2.compat.CompatV16: Z deleteDatabase(Ljava/io/File;)>
<com.ichi2.compat.CompatV16: Ljava/lang/String; detagged(Ljava/lang/String;)>
<com.ichi2.compat.CompatV16: V disableDatabaseWriteAheadLogging(Lio/requery/android/database/sqlite/SQLiteDatabase;)>
<com.ichi2.compat.CompatV16: Landroid/net/Uri; getExportUri(Landroid/content/Context;Ljava/io/File;)>
<com.ichi2.compat.CompatV16: V openUrl(Lcom/ichi2/anki/AnkiActivity;Landroid/net/Uri;)>
<com.ichi2.compat.CompatV16: V updateWidgetDimensions(Landroid/content/Context;Landroid/widget/RemoteViews;Ljava/lang/Class;)>
<com.ichi2.anki.AnkiActivity: V <init>()>
<com.ichi2.anki.AnkiActivity: V disableActivityAnimation()>
<com.ichi2.anki.AnkiActivity: V disableIntentAnimation(Landroid/content/Intent;)>
<com.ichi2.anki.AnkiActivity: V enableActivityAnimation(I)>
<com.ichi2.anki.AnkiActivity: V enableIntentAnimation(Landroid/content/Intent;)>
<com.ichi2.anki.AnkiActivity: V addContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.ichi2.anki.AnkiActivity: Z animationDisabled()>
<com.ichi2.anki.AnkiActivity: Z animationEnabled()>
<com.ichi2.anki.AnkiActivity: Z colIsOpen()>
<com.ichi2.anki.AnkiActivity: V disableViewAnimation(Landroid/view/View;)>
<com.ichi2.anki.AnkiActivity: V dismissAllDialogFragments()>
<com.ichi2.anki.AnkiActivity: V dismissSimpleMessageDialog(Z)>
<com.ichi2.anki.AnkiActivity: V enableViewAnimation(Landroid/view/View;Landroid/view/animation/Animation;)>
<com.ichi2.anki.AnkiActivity: V finish()>
<com.ichi2.anki.AnkiActivity: V finishWithAnimation(I)>
<com.ichi2.anki.AnkiActivity: V finishWithoutAnimation()>
<com.ichi2.anki.AnkiActivity: Lcom/ichi2/libanki/Collection; getCol()>
<com.ichi2.anki.AnkiActivity: Lcom/ichi2/compat/customtabs/CustomTabActivityHelper; getCustomTabActivityHelper()>
<com.ichi2.anki.AnkiActivity: Lcom/ichi2/anki/dialogs/DialogHandler; getDialogHandler()>
<com.ichi2.anki.AnkiActivity: V hideProgressBar()>
<com.ichi2.anki.AnkiActivity: V mayOpenUrl(Landroid/net/Uri;)>
<com.ichi2.anki.AnkiActivity: V onCollectionLoadError()>
<com.ichi2.anki.AnkiActivity: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.AnkiActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.AnkiActivity: Landroid/support/v4/content/Loader; onCreateLoader(ILandroid/os/Bundle;)>
<com.ichi2.anki.AnkiActivity: V onLoadFinished(Landroid/support/v4/content/Loader;Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.AnkiActivity: V onLoadFinished(Landroid/support/v4/content/Loader;Ljava/lang/Object;)>
<com.ichi2.anki.AnkiActivity: V onLoaderReset(Landroid/support/v4/content/Loader;)>
<com.ichi2.anki.AnkiActivity: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.AnkiActivity: V onResume()>
<com.ichi2.anki.AnkiActivity: V onStart()>
<com.ichi2.anki.AnkiActivity: V onStop()>
<com.ichi2.anki.AnkiActivity: V openUrl(Landroid/net/Uri;)>
<com.ichi2.anki.AnkiActivity: V restartActivity()>
<com.ichi2.anki.AnkiActivity: V setContentView(Landroid/view/View;)>
<com.ichi2.anki.AnkiActivity: V setContentView(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)>
<com.ichi2.anki.AnkiActivity: V showAsyncDialogFragment(Lcom/ichi2/anki/dialogs/AsyncDialogFragment;)>
<com.ichi2.anki.AnkiActivity: V showDialogFragment(Landroid/support/v4/app/DialogFragment;)>
<com.ichi2.anki.AnkiActivity: V showProgressBar()>
<com.ichi2.anki.AnkiActivity: V showSimpleMessageDialog(Ljava/lang/String;)>
<com.ichi2.anki.AnkiActivity: V showSimpleMessageDialog(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.AnkiActivity: V showSimpleMessageDialog(Ljava/lang/String;Ljava/lang/String;Z)>
<com.ichi2.anki.AnkiActivity: V showSimpleMessageDialog(Ljava/lang/String;Z)>
<com.ichi2.anki.AnkiActivity: V showSimpleNotification(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.AnkiActivity: V startActivity(Landroid/content/Intent;)>
<com.ichi2.anki.AnkiActivity: V startActivityForResult(Landroid/content/Intent;I)>
<com.ichi2.anki.AnkiActivity: V startActivityForResultWithAnimation(Landroid/content/Intent;II)>
<com.ichi2.anki.AnkiActivity: V startActivityForResultWithoutAnimation(Landroid/content/Intent;I)>
<com.ichi2.anki.AnkiActivity: V startActivityWithAnimation(Landroid/content/Intent;I)>
<com.ichi2.anki.AnkiActivity: V startActivityWithoutAnimation(Landroid/content/Intent;)>
<com.ichi2.anki.AnkiActivity: V startLoadingCollection()>
<com.ichi2.compat.CompatV17: V <init>()>
<com.ichi2.compat.CompatV17: V setHTML5MediaAutoPlay(Landroid/webkit/WebSettings;Ljava/lang/Boolean;)>
<com.ichi2.anki.CardTemplateEditor: V <init>()>
<com.ichi2.anki.CardTemplateEditor: J access$000(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: Landroid/support/v4/view/ViewPager; access$100(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: Lcom/ichi2/anki/CardTemplateEditor$TemplatePagerAdapter; access$200(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: Lorg/json/JSONObject; access$400(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: J access$500(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: Lcom/ichi2/async/DeckTask$TaskListener; access$800(Lcom/ichi2/anki/CardTemplateEditor;)>
<com.ichi2.anki.CardTemplateEditor: V showDiscardChangesDialog()>
<com.ichi2.anki.CardTemplateEditor: V hideProgressBar()>
<com.ichi2.anki.CardTemplateEditor: Z modelHasChanged()>
<com.ichi2.anki.CardTemplateEditor: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.CardTemplateEditor: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.CardTemplateEditor: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.CardTemplateEditor: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.CardTemplateEditor: V selectTemplate(I)>
<com.ichi2.anki.CardTemplateEditor: V showProgressBar()>
<com.ichi2.anki.Info: V <init>()>
<com.ichi2.anki.Info: I access$000(Lcom/ichi2/anki/Info;)>
<com.ichi2.anki.Info: V access$100(Lcom/ichi2/anki/Info;)>
<com.ichi2.anki.Info: V finishWithAnimation()>
<com.ichi2.anki.Info: Ljava/lang/String; copyDebugInfo()>
<com.ichi2.anki.Info: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Info: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.ModelBrowser: V <init>()>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$000(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$002(Lcom/ichi2/anki/ModelBrowser;Ljava/util/ArrayList;)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$100(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: J access$1002(Lcom/ichi2/anki/ModelBrowser;J)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$102(Lcom/ichi2/anki/ModelBrowser;Ljava/util/ArrayList;)>
<com.ichi2.anki.ModelBrowser: Lcom/ichi2/anki/dialogs/ModelBrowserContextMenu; access$1100(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Lcom/ichi2/anki/dialogs/ModelBrowserContextMenu; access$1102(Lcom/ichi2/anki/ModelBrowser;Lcom/ichi2/anki/dialogs/ModelBrowserContextMenu;)>
<com.ichi2.anki.ModelBrowser: Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback; access$1200(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Landroid/widget/EditText; access$1300(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Landroid/widget/EditText; access$1302(Lcom/ichi2/anki/ModelBrowser;Landroid/widget/EditText;)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$1400(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Ljava/lang/String; access$1500(Lcom/ichi2/anki/ModelBrowser;Ljava/lang/String;)>
<com.ichi2.anki.ModelBrowser: V access$1600(Lcom/ichi2/anki/ModelBrowser;Ljava/lang/String;I)>
<com.ichi2.anki.ModelBrowser: Lcom/ichi2/libanki/Collection; access$1700(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$1800(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$1900(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$200(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$2000(Lcom/ichi2/anki/ModelBrowser;Ljava/lang/CharSequence;)>
<com.ichi2.anki.ModelBrowser: V access$300(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$400(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$500(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V access$600(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$700(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: I access$800(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: I access$802(Lcom/ichi2/anki/ModelBrowser;I)>
<com.ichi2.anki.ModelBrowser: Ljava/util/ArrayList; access$900(Lcom/ichi2/anki/ModelBrowser;)>
<com.ichi2.anki.ModelBrowser: V addNewNoteType(Ljava/lang/String;I)>
<com.ichi2.anki.ModelBrowser: V addNewNoteTypeDialog()>
<com.ichi2.anki.ModelBrowser: V deleteModel()>
<com.ichi2.anki.ModelBrowser: V deleteModelDialog()>
<com.ichi2.anki.ModelBrowser: V dismissContextMenu()>
<com.ichi2.anki.ModelBrowser: V fillModelList()>
<com.ichi2.anki.ModelBrowser: V fullRefresh()>
<com.ichi2.anki.ModelBrowser: V openTemplateEditor()>
<com.ichi2.anki.ModelBrowser: Ljava/lang/String; randomizeName(Ljava/lang/String;)>
<com.ichi2.anki.ModelBrowser: V refreshList()>
<com.ichi2.anki.ModelBrowser: V renameModelDialog()>
<com.ichi2.anki.ModelBrowser: V showToast(Ljava/lang/CharSequence;)>
<com.ichi2.anki.ModelBrowser: V updateSubtitleText()>
<com.ichi2.anki.ModelBrowser: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.ModelBrowser: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.ModelBrowser: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.ModelBrowser: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.ModelBrowser: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.ModelBrowser: V onResume()>
<com.ichi2.anki.ModelBrowser: V onStop()>
<com.ichi2.anki.ModelFieldEditor: V <init>()>
<com.ichi2.anki.ModelFieldEditor: V access$000(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/ichi2/anki/dialogs/ModelEditorContextMenu; access$100(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lorg/json/JSONObject; access$1000(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/ichi2/anki/dialogs/ModelEditorContextMenu; access$102(Lcom/ichi2/anki/ModelFieldEditor;Lcom/ichi2/anki/dialogs/ModelEditorContextMenu;)>
<com.ichi2.anki.ModelFieldEditor: Ljava/lang/Runnable; access$1100(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$1200(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$1300(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$1400(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lorg/json/JSONArray; access$1500(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/afollestad/materialdialogs/MaterialDialog; access$1600(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/afollestad/materialdialogs/MaterialDialog; access$1602(Lcom/ichi2/anki/ModelFieldEditor;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.ModelFieldEditor: V access$1700(Lcom/ichi2/anki/ModelFieldEditor;I)>
<com.ichi2.anki.ModelFieldEditor: V access$1800(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$1900(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Ljava/util/ArrayList; access$200(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$2000(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$2100(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$2200(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback; access$300(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: I access$400(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: I access$402(Lcom/ichi2/anki/ModelFieldEditor;I)>
<com.ichi2.anki.ModelFieldEditor: Landroid/widget/EditText; access$500(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V access$600(Lcom/ichi2/anki/ModelFieldEditor;Ljava/lang/CharSequence;)>
<com.ichi2.anki.ModelFieldEditor: Z access$700(Lcom/ichi2/anki/ModelFieldEditor;Ljava/lang/String;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/ichi2/libanki/Collection; access$800(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: Lcom/ichi2/async/DeckTask$TaskListener; access$900(Lcom/ichi2/anki/ModelFieldEditor;)>
<com.ichi2.anki.ModelFieldEditor: V addFieldDialog()>
<com.ichi2.anki.ModelFieldEditor: V closeActivity(I)>
<com.ichi2.anki.ModelFieldEditor: Z containsField(Ljava/lang/String;)>
<com.ichi2.anki.ModelFieldEditor: V createfieldLabels()>
<com.ichi2.anki.ModelFieldEditor: V deleteField()>
<com.ichi2.anki.ModelFieldEditor: V deleteFieldDialog()>
<com.ichi2.anki.ModelFieldEditor: V dismissContextMenu()>
<com.ichi2.anki.ModelFieldEditor: V dismissProgressBar()>
<com.ichi2.anki.ModelFieldEditor: V fullRefreshList()>
<com.ichi2.anki.ModelFieldEditor: V renameField()>
<com.ichi2.anki.ModelFieldEditor: V renameFieldDialog()>
<com.ichi2.anki.ModelFieldEditor: V repositionFieldDialog()>
<com.ichi2.anki.ModelFieldEditor: V setupLabels()>
<com.ichi2.anki.ModelFieldEditor: V showToast(Ljava/lang/CharSequence;)>
<com.ichi2.anki.ModelFieldEditor: V sortByField()>
<com.ichi2.anki.ModelFieldEditor: V closeActivity()>
<com.ichi2.anki.ModelFieldEditor: V onBackPressed()>
<com.ichi2.anki.ModelFieldEditor: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.ModelFieldEditor: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.ModelFieldEditor: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.ModelFieldEditor: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.ModelFieldEditor: V onStop()>
<com.ichi2.anki.MyAccount: V <init>()>
<com.ichi2.anki.MyAccount: V access$000(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount: V access$100(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount: V access$200(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount: Lcom/afollestad/materialdialogs/MaterialDialog; access$300(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount: Lcom/afollestad/materialdialogs/MaterialDialog; access$302(Lcom/ichi2/anki/MyAccount;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.MyAccount: V access$400(Lcom/ichi2/anki/MyAccount;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.MyAccount: Landroid/widget/TextView; access$500(Lcom/ichi2/anki/MyAccount;)>
<com.ichi2.anki.MyAccount: V access$600(Lcom/ichi2/anki/MyAccount;I)>
<com.ichi2.anki.MyAccount: V initAllContentViews()>
<com.ichi2.anki.MyAccount: V login()>
<com.ichi2.anki.MyAccount: V logout()>
<com.ichi2.anki.MyAccount: V resetPassword()>
<com.ichi2.anki.MyAccount: V saveUserInformation(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.MyAccount: V switchToState(I)>
<com.ichi2.anki.MyAccount: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.MyAccount: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.NavigationDrawerActivity: V <init>()>
<com.ichi2.anki.NavigationDrawerActivity: Z access$000(Lcom/ichi2/anki/NavigationDrawerActivity;)>
<com.ichi2.anki.NavigationDrawerActivity: Landroid/support/v4/widget/DrawerLayout; access$100(Lcom/ichi2/anki/NavigationDrawerActivity;)>
<com.ichi2.anki.NavigationDrawerActivity: Ljava/lang/Runnable; access$200(Lcom/ichi2/anki/NavigationDrawerActivity;)>
<com.ichi2.anki.NavigationDrawerActivity: Ljava/lang/Runnable; access$202(Lcom/ichi2/anki/NavigationDrawerActivity;Ljava/lang/Runnable;)>
<com.ichi2.anki.NavigationDrawerActivity: Landroid/support/v7/widget/SwitchCompat; access$300(Lcom/ichi2/anki/NavigationDrawerActivity;)>
<com.ichi2.anki.NavigationDrawerActivity: Ljava/lang/String; access$402(Lcom/ichi2/anki/NavigationDrawerActivity;Ljava/lang/String;)>
<com.ichi2.anki.NavigationDrawerActivity: I access$502(Lcom/ichi2/anki/NavigationDrawerActivity;I)>
<com.ichi2.anki.NavigationDrawerActivity: V disableDrawerSwipe()>
<com.ichi2.anki.NavigationDrawerActivity: V enableDrawerSwipe()>
<com.ichi2.anki.NavigationDrawerActivity: Landroid/support/v7/app/ActionBarDrawerToggle; getDrawerToggle()>
<com.ichi2.anki.NavigationDrawerActivity: V initNavigationDrawer(Landroid/view/View;)>
<com.ichi2.anki.NavigationDrawerActivity: Z isDrawerOpen()>
<com.ichi2.anki.NavigationDrawerActivity: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.NavigationDrawerActivity: V onBackPressed()>
<com.ichi2.anki.NavigationDrawerActivity: V onConfigurationChanged(Landroid/content/res/Configuration;)>
<com.ichi2.anki.NavigationDrawerActivity: Z onNavigationItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.NavigationDrawerActivity: V onPostCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.NavigationDrawerActivity: V openCardBrowser()>
<com.ichi2.anki.NavigationDrawerActivity: V selectNavigationItem(I)>
<com.ichi2.anki.NavigationDrawerActivity: V setTitle(Ljava/lang/CharSequence;)>
<com.ichi2.anki.NavigationDrawerActivity: V showBackIcon()>
<com.ichi2.anki.NoteEditor: V <init>()>
<com.ichi2.anki.NoteEditor: Lcom/afollestad/materialdialogs/MaterialDialog; access$000(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Lcom/afollestad/materialdialogs/MaterialDialog; access$002(Lcom/ichi2/anki/NoteEditor;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.NoteEditor: V access$1000(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Z access$102(Lcom/ichi2/anki/NoteEditor;Z)>
<com.ichi2.anki.NoteEditor: Z access$1102(Lcom/ichi2/anki/NoteEditor;Z)>
<com.ichi2.anki.NoteEditor: Z access$1202(Lcom/ichi2/anki/NoteEditor;Z)>
<com.ichi2.anki.NoteEditor: V access$1300(Lcom/ichi2/anki/NoteEditor;I)>
<com.ichi2.anki.NoteEditor: V access$1400(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: J access$1502(Lcom/ichi2/anki/NoteEditor;J)>
<com.ichi2.anki.NoteEditor: Ljava/util/ArrayList; access$1600(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$1900(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$2000(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: [Ljava/lang/String; access$202(Lcom/ichi2/anki/NoteEditor;[Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor: V access$2100(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: Z access$2202(Lcom/ichi2/anki/NoteEditor;Z)>
<com.ichi2.anki.NoteEditor: Ljava/util/List; access$2300(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Ljava/util/List; access$2302(Lcom/ichi2/anki/NoteEditor;Ljava/util/List;)>
<com.ichi2.anki.NoteEditor: V access$2400(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$2500(Lcom/ichi2/anki/NoteEditor;ILcom/ichi2/anki/multimediacard/IMultimediaEditableNote;Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.NoteEditor: Ljava/lang/String; access$2600(Lcom/ichi2/anki/NoteEditor;Ljava/lang/String;II)>
<com.ichi2.anki.NoteEditor: Ljava/util/Map; access$2700(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Ljava/util/Map; access$2702(Lcom/ichi2/anki/NoteEditor;Ljava/util/Map;)>
<com.ichi2.anki.NoteEditor: Ljava/lang/Object; access$2800(Lcom/ichi2/anki/NoteEditor;Ljava/util/Map;Ljava/lang/Object;)>
<com.ichi2.anki.NoteEditor: Lorg/json/JSONObject; access$2900(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Lcom/ichi2/libanki/Note; access$300(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$3000(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: Z access$3100(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Ljava/util/ArrayList; access$3200(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$3300(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$3400(Lcom/ichi2/anki/NoteEditor;[Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor: Ljava/util/Map; access$3500(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Ljava/util/Map; access$3502(Lcom/ichi2/anki/NoteEditor;Ljava/util/Map;)>
<com.ichi2.anki.NoteEditor: Landroid/widget/Spinner; access$3600(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$3700(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$3800(Lcom/ichi2/anki/NoteEditor;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: V access$400(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Ljava/util/LinkedList; access$500(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Z access$600(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: I access$700(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: Z access$800(Lcom/ichi2/anki/NoteEditor;)>
<com.ichi2.anki.NoteEditor: V access$900(Lcom/ichi2/anki/NoteEditor;Landroid/content/Intent;)>
<com.ichi2.anki.NoteEditor: Z addFromAedict(Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor: Z allowFieldRemapping()>
<com.ichi2.anki.NoteEditor: V changeNoteType(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: V changeNoteTypeWithErrorHandling(Lorg/json/JSONObject;Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: V closeCardEditorWithCheck()>
<com.ichi2.anki.NoteEditor: V closeNoteEditor()>
<com.ichi2.anki.NoteEditor: V closeNoteEditor(I)>
<com.ichi2.anki.NoteEditor: V closeNoteEditor(ILandroid/content/Intent;)>
<com.ichi2.anki.NoteEditor: V closeNoteEditor(Landroid/content/Intent;)>
<com.ichi2.anki.NoteEditor: Z duplicateCheck()>
<com.ichi2.anki.NoteEditor: V fetchIntentInformation(Landroid/content/Intent;)>
<com.ichi2.anki.NoteEditor: Lorg/json/JSONObject; getCurrentlySelectedModel()>
<com.ichi2.anki.NoteEditor: Ljava/lang/String; getFieldsText()>
<com.ichi2.anki.NoteEditor: Ljava/lang/Object; getKeyByValue(Ljava/util/Map;Ljava/lang/Object;)>
<com.ichi2.anki.NoteEditor: Z hasUnsavedChanges()>
<com.ichi2.anki.NoteEditor: V initFieldEditText(Lcom/ichi2/anki/FieldEditText;I[Ljava/lang/String;Landroid/graphics/Typeface;Z)>
<com.ichi2.anki.NoteEditor: Ljava/lang/String; insertClozeAround(Ljava/lang/String;II)>
<com.ichi2.anki.NoteEditor: V populateEditFields()>
<com.ichi2.anki.NoteEditor: V populateEditFields([[Ljava/lang/String;Z)>
<com.ichi2.anki.NoteEditor: V registerExternalStorageListener()>
<com.ichi2.anki.NoteEditor: V resetEditFields([Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor: V saveNote()>
<com.ichi2.anki.NoteEditor: V setDid(Lcom/ichi2/libanki/Note;)>
<com.ichi2.anki.NoteEditor: V setEditFieldTexts(Ljava/lang/String;)>
<com.ichi2.anki.NoteEditor: V setMMButtonListener(Landroid/widget/ImageButton;I)>
<com.ichi2.anki.NoteEditor: V setNote()>
<com.ichi2.anki.NoteEditor: V setNote(Lcom/ichi2/libanki/Note;)>
<com.ichi2.anki.NoteEditor: V setRemapButtonListener(Landroid/widget/ImageButton;I)>
<com.ichi2.anki.NoteEditor: V showCardTemplateEditor()>
<com.ichi2.anki.NoteEditor: V showDiscardChangesDialog()>
<com.ichi2.anki.NoteEditor: V showTagsDialog()>
<com.ichi2.anki.NoteEditor: V startMultimediaFieldEditor(ILcom/ichi2/anki/multimediacard/IMultimediaEditableNote;Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.NoteEditor: Ljava/lang/String; tagsAsString(Ljava/util/List;)>
<com.ichi2.anki.NoteEditor: V updateCards(Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: V updateDeckPosition()>
<com.ichi2.anki.NoteEditor: Z updateField(Lcom/ichi2/anki/FieldEditText;)>
<com.ichi2.anki.NoteEditor: V updateFieldsFromMap(Lorg/json/JSONObject;)>
<com.ichi2.anki.NoteEditor: V updateTags()>
<com.ichi2.anki.NoteEditor: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.NoteEditor: V onBackPressed()>
<com.ichi2.anki.NoteEditor: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.NoteEditor: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.NoteEditor: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.NoteEditor: V onDestroy()>
<com.ichi2.anki.NoteEditor: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.NoteEditor: V onRescheduleCard(I)>
<com.ichi2.anki.NoteEditor: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.NoteEditor: V onStop()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V <init>()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V createSpareMenu(Landroid/widget/LinearLayout;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V finishCancel()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: Ljava/lang/String; gtxt(I)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V recreateEditingUi()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V done()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V handleFieldChanged(Lcom/ichi2/anki/multimediacard/fields/IField;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V onDestroy()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V onRequestPermissionsResult(I[Ljava/lang/String;[I)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V toAudioField()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V toImageField()>
<com.ichi2.anki.multimediacard.activity.MultimediaEditFieldActivity: V toTextField()>
<com.ichi2.compat.CompatV19: V <init>()>
<com.ichi2.compat.CompatV19: V access$000(Lcom/ichi2/compat/CompatV19;Landroid/view/View;)>
<com.ichi2.compat.CompatV19: V access$100(Lcom/ichi2/compat/CompatV19;Landroid/view/View;)>
<com.ichi2.compat.CompatV19: V hideViewWithAnimation(Landroid/view/View;)>
<com.ichi2.compat.CompatV19: V showViewWithAnimation(Landroid/view/View;)>
<com.ichi2.compat.CompatV19: Z isImmersiveSystemUiVisible(Lcom/ichi2/anki/AnkiActivity;)>
<com.ichi2.compat.CompatV19: V setFullScreen(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: V <clinit>()>
<com.ichi2.anki.AbstractFlashcardViewer: V <init>()>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; SmpToHtmlEntity(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Lcom/ichi2/libanki/Sound; access$000(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/Runnable; access$100(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/webkit/WebView; access$1000(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$1100(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$1200(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$1202(Lcom/ichi2/anki/AbstractFlashcardViewer;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$1302(Lcom/ichi2/anki/AbstractFlashcardViewer;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: V access$1400(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: V access$1500(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: V access$1600(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/widget/TextView; access$1700(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$1800(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/os/Handler; access$1900(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/os/Handler; access$200(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; access$2002(Lcom/ichi2/anki/AbstractFlashcardViewer;Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$2100(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$2102(Lcom/ichi2/anki/AbstractFlashcardViewer;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$2200(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$2202(Lcom/ichi2/anki/AbstractFlashcardViewer;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2300(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$2400(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2500(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2600(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2700(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2800(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$2900(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$300(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/widget/FrameLayout; access$3000(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$3100(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$3200(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$3300(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$3400(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: V access$3500(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: J access$400(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: J access$402(Lcom/ichi2/anki/AbstractFlashcardViewer;J)>
<com.ichi2.anki.AbstractFlashcardViewer: I access$502(Lcom/ichi2/anki/AbstractFlashcardViewer;I)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/support/v4/view/GestureDetectorCompat; access$600(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$700(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$800(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z access$802(Lcom/ichi2/anki/AbstractFlashcardViewer;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/Runnable; access$900(Lcom/ichi2/anki/AbstractFlashcardViewer;)>
<com.ichi2.anki.AbstractFlashcardViewer: V addAnswerSounds(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: V blockControls()>
<com.ichi2.anki.AbstractFlashcardViewer: I calculateDynamicFontSize(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/CharSequence; clipboardGetText()>
<com.ichi2.anki.AbstractFlashcardViewer: V clipboardSetText(Ljava/lang/CharSequence;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; contentForCloze(Ljava/lang/String;I)>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/webkit/WebView; createWebView()>
<com.ichi2.anki.AbstractFlashcardViewer: V destroyWebView(Landroid/webkit/WebView;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; enrichWithQADiv(Ljava/lang/String;Z)>
<com.ichi2.anki.AbstractFlashcardViewer: V finishNoStorageAvailable()>
<com.ichi2.anki.AbstractFlashcardViewer: Lorg/json/JSONObject; getConfigForCurrentCard()>
<com.ichi2.anki.AbstractFlashcardViewer: J getDeckIdForCard(Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.AbstractFlashcardViewer: Lcom/ichi2/libanki/Card; getEditorCard()>
<com.ichi2.anki.AbstractFlashcardViewer: I getRecommendedEase(Z)>
<com.ichi2.anki.AbstractFlashcardViewer: V hideLookupButton()>
<com.ichi2.anki.AbstractFlashcardViewer: Z lookUp()>
<com.ichi2.anki.AbstractFlashcardViewer: V pauseTimer()>
<com.ichi2.anki.AbstractFlashcardViewer: V readCardText(Lcom/ichi2/libanki/Card;I)>
<com.ichi2.anki.AbstractFlashcardViewer: V registerExternalStorageListener()>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; removeFrontSideAudio(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: V resumeTimer()>
<com.ichi2.anki.AbstractFlashcardViewer: V selectAndCopyText()>
<com.ichi2.anki.AbstractFlashcardViewer: V setInterface()>
<com.ichi2.anki.AbstractFlashcardViewer: Z shouldUseQuickUpdate()>
<com.ichi2.anki.AbstractFlashcardViewer: V showLookupButtonIfNeeded()>
<com.ichi2.anki.AbstractFlashcardViewer: V switchTopBarVisibility(I)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; typeAnsAnswerFilter(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; typeAnsQuestionFilter(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z typeAnswer()>
<com.ichi2.anki.AbstractFlashcardViewer: V unblockControls()>
<com.ichi2.anki.AbstractFlashcardViewer: V updateCard(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: V updateForNewCard()>
<com.ichi2.anki.AbstractFlashcardViewer: V updateTypeAnswerInfo()>
<com.ichi2.anki.AbstractFlashcardViewer: V answerCard(I)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; cleanCorrectAnswer(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; cleanTypedAnswer(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z clipboardHasText()>
<com.ichi2.anki.AbstractFlashcardViewer: V closeReviewer(IZ)>
<com.ichi2.anki.AbstractFlashcardViewer: V delayedHide(I)>
<com.ichi2.anki.AbstractFlashcardViewer: V dismiss(Lcom/ichi2/libanki/Collection$DismissType;)>
<com.ichi2.anki.AbstractFlashcardViewer: V displayCardAnswer()>
<com.ichi2.anki.AbstractFlashcardViewer: V displayCardQuestion()>
<com.ichi2.anki.AbstractFlashcardViewer: Z editCard()>
<com.ichi2.anki.AbstractFlashcardViewer: V executeCommand(I)>
<com.ichi2.anki.AbstractFlashcardViewer: V fillFlashcard()>
<com.ichi2.anki.AbstractFlashcardViewer: V generateQuestionSoundList()>
<com.ichi2.anki.AbstractFlashcardViewer: Ljava/lang/String; getAnswerFormat()>
<com.ichi2.anki.AbstractFlashcardViewer: I getContentViewAttr(I)>
<com.ichi2.anki.AbstractFlashcardViewer: I getDefaultEase()>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/support/v4/view/GestureDetectorCompat; getGestureDetector()>
<com.ichi2.anki.AbstractFlashcardViewer: J getParentDid()>
<com.ichi2.anki.AbstractFlashcardViewer: V hideEaseButtons()>
<com.ichi2.anki.AbstractFlashcardViewer: V initControls()>
<com.ichi2.anki.AbstractFlashcardViewer: V initLayout()>
<com.ichi2.anki.AbstractFlashcardViewer: V initTimer()>
<com.ichi2.anki.AbstractFlashcardViewer: V lookUpOrSelectText()>
<com.ichi2.anki.AbstractFlashcardViewer: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onBackPressed()>
<com.ichi2.anki.AbstractFlashcardViewer: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onConfigurationChanged(Landroid/content/res/Configuration;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onDestroy()>
<com.ichi2.anki.AbstractFlashcardViewer: Z onKeyDown(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer: Z onKeyUp(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onMark(Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.AbstractFlashcardViewer: V onPause()>
<com.ichi2.anki.AbstractFlashcardViewer: V onResume()>
<com.ichi2.anki.AbstractFlashcardViewer: V playSounds(Z)>
<com.ichi2.anki.AbstractFlashcardViewer: V playVideo(Ljava/lang/String;)>
<com.ichi2.anki.AbstractFlashcardViewer: V refreshActionBar()>
<com.ichi2.anki.AbstractFlashcardViewer: Landroid/content/SharedPreferences; restorePreferences()>
<com.ichi2.anki.AbstractFlashcardViewer: V showDeleteNoteDialog()>
<com.ichi2.anki.AbstractFlashcardViewer: V showEaseButtons()>
<com.ichi2.anki.AbstractFlashcardViewer: V showSelectTtsDialogue()>
<com.ichi2.anki.AbstractFlashcardViewer: V ttsInitialized()>
<com.ichi2.anki.AbstractFlashcardViewer: V undo()>
<com.ichi2.anki.AbstractFlashcardViewer: V updateScreenCounts()>
<com.ichi2.anki.CardBrowser: V <clinit>()>
<com.ichi2.anki.CardBrowser: V <init>()>
<com.ichi2.anki.CardBrowser: Ljava/util/List; access$000(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V access$100(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: [J access$1000(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$1100(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$1102(Lcom/ichi2/anki/CardBrowser;I)>
<com.ichi2.anki.CardBrowser: Z access$1200(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Z access$1202(Lcom/ichi2/anki/CardBrowser;Z)>
<com.ichi2.anki.CardBrowser: [Ljava/lang/String; access$1300()>
<com.ichi2.anki.CardBrowser: Ljava/util/List; access$1400(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Ljava/util/List; access$1402(Lcom/ichi2/anki/CardBrowser;Ljava/util/List;)>
<com.ichi2.anki.CardBrowser: V access$1500(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Ljava/lang/String; access$1600(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Ljava/lang/String; access$1602(Lcom/ichi2/anki/CardBrowser;Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser: Landroid/support/v7/widget/SearchView; access$1700(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Landroid/view/MenuItem; access$1800(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Landroid/view/MenuItem; access$1900(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$200(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$2000(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$2002(Lcom/ichi2/anki/CardBrowser;I)>
<com.ichi2.anki.CardBrowser: I access$202(Lcom/ichi2/anki/CardBrowser;I)>
<com.ichi2.anki.CardBrowser: Lcom/ichi2/anki/CardBrowser$MultiColumnListAdapter; access$2100(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: [Ljava/lang/String; access$2200()>
<com.ichi2.anki.CardBrowser: I access$2300(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: I access$2302(Lcom/ichi2/anki/CardBrowser;I)>
<com.ichi2.anki.CardBrowser: [Ljava/lang/String; access$2400()>
<com.ichi2.anki.CardBrowser: Lcom/afollestad/materialdialogs/MaterialDialog$ListCallback; access$2600(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Landroid/view/MenuItem; access$2700(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V access$2800(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V access$2900(Lcom/ichi2/anki/CardBrowser;I)>
<com.ichi2.anki.CardBrowser: V access$300(Lcom/ichi2/anki/CardBrowser;Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser: J access$3000(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: J access$3002(Lcom/ichi2/anki/CardBrowser;J)>
<com.ichi2.anki.CardBrowser: Lcom/ichi2/async/DeckTask$TaskListener; access$3100(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V access$400(Lcom/ichi2/anki/CardBrowser;Lcom/ichi2/libanki/Card;Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser: Z access$500(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: Z access$602(Lcom/ichi2/anki/CardBrowser;Z)>
<com.ichi2.anki.CardBrowser: Lcom/ichi2/async/DeckTask$TaskListener; access$700(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V access$800(Lcom/ichi2/anki/CardBrowser;Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser: Lcom/ichi2/async/DeckTask$TaskListener; access$900(Lcom/ichi2/anki/CardBrowser;)>
<com.ichi2.anki.CardBrowser: V closeCardBrowser(I)>
<com.ichi2.anki.CardBrowser: V closeCardBrowser(ILandroid/content/Intent;)>
<com.ichi2.anki.CardBrowser: Z currentCardInUseByReviewer()>
<com.ichi2.anki.CardBrowser: V deleteNote(Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser: Ljava/lang/String; formatQA(Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser: [J getCardIds()>
<com.ichi2.anki.CardBrowser: Ljava/util/List; getCards()>
<com.ichi2.anki.CardBrowser: I getDeckPositionFromDeckId(J)>
<com.ichi2.anki.CardBrowser: I getPosition(Ljava/util/List;J)>
<com.ichi2.anki.CardBrowser: V onMark(Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser: V onSearch()>
<com.ichi2.anki.CardBrowser: V registerExternalStorageListener()>
<com.ichi2.anki.CardBrowser: V searchCards()>
<com.ichi2.anki.CardBrowser: V showTagsDialog()>
<com.ichi2.anki.CardBrowser: V updateCardInList(Lcom/ichi2/libanki/Card;Ljava/lang/String;)>
<com.ichi2.anki.CardBrowser: V updateList()>
<com.ichi2.anki.CardBrowser: V updateSearchItemQA(Ljava/util/Map;Lcom/ichi2/libanki/Card;)>
<com.ichi2.anki.CardBrowser: Ljava/lang/String; getSubtitleText()>
<com.ichi2.anki.CardBrowser: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.CardBrowser: V onBackPressed()>
<com.ichi2.anki.CardBrowser: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.CardBrowser: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.CardBrowser: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.CardBrowser: V onDestroy()>
<com.ichi2.anki.CardBrowser: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.CardBrowser: V onResume()>
<com.ichi2.anki.CardBrowser: V onStop()>
<com.ichi2.anki.CardBrowser: V selectDropDownItem(I)>
<com.ichi2.anki.DeckPicker: V <init>()>
<com.ichi2.anki.DeckPicker: V access$000(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: Lcom/getbase/floatingactionbutton/FloatingActionsMenu; access$100(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: V access$1000(Lcom/ichi2/anki/DeckPicker;ILjava/lang/String;)>
<com.ichi2.anki.DeckPicker: Ljava/lang/String; access$1100(Lcom/ichi2/anki/DeckPicker;Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V access$1200(Lcom/ichi2/anki/DeckPicker;Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V access$1300(Lcom/ichi2/anki/DeckPicker;Z)>
<com.ichi2.anki.DeckPicker: Landroid/view/View; access$1400(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: J access$1500(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: J access$1502(Lcom/ichi2/anki/DeckPicker;J)>
<com.ichi2.anki.DeckPicker: V access$1600(Lcom/ichi2/anki/DeckPicker;J)>
<com.ichi2.anki.DeckPicker: Landroid/widget/TextView; access$1700(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: V access$200(Lcom/ichi2/anki/DeckPicker;JZ)>
<com.ichi2.anki.DeckPicker: Lcom/ichi2/anki/widgets/DeckAdapter; access$300(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: J access$402(Lcom/ichi2/anki/DeckPicker;J)>
<com.ichi2.anki.DeckPicker: Lcom/afollestad/materialdialogs/MaterialDialog; access$500(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: Lcom/afollestad/materialdialogs/MaterialDialog; access$502(Lcom/ichi2/anki/DeckPicker;Lcom/afollestad/materialdialogs/MaterialDialog;)>
<com.ichi2.anki.DeckPicker: Landroid/support/v4/widget/SwipeRefreshLayout; access$600(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: Landroid/widget/EditText; access$700(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: Landroid/widget/EditText; access$702(Lcom/ichi2/anki/DeckPicker;Landroid/widget/EditText;)>
<com.ichi2.anki.DeckPicker: V access$800(Lcom/ichi2/anki/DeckPicker;Z)>
<com.ichi2.anki.DeckPicker: V access$900(Lcom/ichi2/anki/DeckPicker;)>
<com.ichi2.anki.DeckPicker: V automaticSync()>
<com.ichi2.anki.DeckPicker: V configureFloatingActionsMenu()>
<com.ichi2.anki.DeckPicker: V finishWithAnimation()>
<com.ichi2.anki.DeckPicker: Z firstCollectionOpen()>
<com.ichi2.anki.DeckPicker: V handleDeckSelection(JZ)>
<com.ichi2.anki.DeckPicker: Ljava/lang/String; joinSyncMessages(Ljava/lang/String;Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V loadStudyOptionsFragment(Z)>
<com.ichi2.anki.DeckPicker: V onFinishedStartup()>
<com.ichi2.anki.DeckPicker: V openReviewer()>
<com.ichi2.anki.DeckPicker: V openStudyOptions(Z)>
<com.ichi2.anki.DeckPicker: V registerExternalStorageListener()>
<com.ichi2.anki.DeckPicker: V scrollDecklistToDeck(J)>
<com.ichi2.anki.DeckPicker: V showStartupScreensAndDialogs(Landroid/content/SharedPreferences;I)>
<com.ichi2.anki.DeckPicker: V showSyncErrorMessage(Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V showSyncLogMessage(ILjava/lang/String;)>
<com.ichi2.anki.DeckPicker: V undo()>
<com.ichi2.anki.DeckPicker: V updateDeckList()>
<com.ichi2.anki.DeckPicker: V upgradePreferences(I)>
<com.ichi2.anki.DeckPicker: V addNote()>
<com.ichi2.anki.DeckPicker: V addSharedDeck()>
<com.ichi2.anki.DeckPicker: V confirmDeckDeletion()>
<com.ichi2.anki.DeckPicker: V confirmDeckDeletion(J)>
<com.ichi2.anki.DeckPicker: V deleteContextMenuDeck()>
<com.ichi2.anki.DeckPicker: V deleteDeck(J)>
<com.ichi2.anki.DeckPicker: V deleteUnused(Ljava/util/List;)>
<com.ichi2.anki.DeckPicker: V emailFile(Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V emptyFiltered()>
<com.ichi2.anki.DeckPicker: V exit()>
<com.ichi2.anki.DeckPicker: V exportApkg(Ljava/lang/String;Ljava/lang/Long;ZZ)>
<com.ichi2.anki.DeckPicker: V exportDeck(J)>
<com.ichi2.anki.DeckPicker: Lcom/ichi2/anki/StudyOptionsFragment; getFragment()>
<com.ichi2.anki.DeckPicker: V handleDbError()>
<com.ichi2.anki.DeckPicker: V handleEmptyCards()>
<com.ichi2.anki.DeckPicker: Z hasErrorFiles()>
<com.ichi2.anki.DeckPicker: V importAdd(Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V importReplace(Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V integrityCheck()>
<com.ichi2.anki.DeckPicker: V loginToSyncServer()>
<com.ichi2.anki.DeckPicker: V mediaCheck()>
<com.ichi2.anki.DeckPicker: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.DeckPicker: V onAttachedToWindow()>
<com.ichi2.anki.DeckPicker: V onBackPressed()>
<com.ichi2.anki.DeckPicker: V onCollectionLoadError()>
<com.ichi2.anki.DeckPicker: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.DeckPicker: V onCreateCustomStudySession()>
<com.ichi2.anki.DeckPicker: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.DeckPicker: V onDestroy()>
<com.ichi2.anki.DeckPicker: V onExtendStudyLimits()>
<com.ichi2.anki.DeckPicker: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.DeckPicker: V onPause()>
<com.ichi2.anki.DeckPicker: Z onPrepareOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.DeckPicker: V onRequestPermissionsResult(I[Ljava/lang/String;[I)>
<com.ichi2.anki.DeckPicker: V onRequireDeckListUpdate()>
<com.ichi2.anki.DeckPicker: V onRestoreInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.DeckPicker: V onResume()>
<com.ichi2.anki.DeckPicker: V onSaveInstanceState(Landroid/os/Bundle;)>
<com.ichi2.anki.DeckPicker: V onSdCardNotMounted()>
<com.ichi2.anki.DeckPicker: V onStop()>
<com.ichi2.anki.DeckPicker: V openCardBrowser()>
<com.ichi2.anki.DeckPicker: V rebuildFiltered()>
<com.ichi2.anki.DeckPicker: V renameDeckDialog()>
<com.ichi2.anki.DeckPicker: V renameDeckDialog(J)>
<com.ichi2.anki.DeckPicker: V repairDeck()>
<com.ichi2.anki.DeckPicker: V restoreFromBackup(Ljava/lang/String;)>
<com.ichi2.anki.DeckPicker: V sendErrorReport()>
<com.ichi2.anki.DeckPicker: V showContextMenuDeckOptions()>
<com.ichi2.anki.DeckPicker: V showContextMenuExportDialog()>
<com.ichi2.anki.DeckPicker: V showDatabaseErrorDialog(I)>
<com.ichi2.anki.DeckPicker: V showImportDialog(I)>
<com.ichi2.anki.DeckPicker: V showImportDialog(ILjava/lang/String;)>
<com.ichi2.anki.DeckPicker: V showMediaCheckDialog(I)>
<com.ichi2.anki.DeckPicker: V showMediaCheckDialog(ILjava/util/List;)>
<com.ichi2.anki.DeckPicker: V showSyncErrorDialog(I)>
<com.ichi2.anki.DeckPicker: V showSyncErrorDialog(ILjava/lang/String;)>
<com.ichi2.anki.DeckPicker: V sync()>
<com.ichi2.anki.DeckPicker: V sync(Ljava/lang/String;)>
<com.ichi2.anki.Statistics: V <init>()>
<com.ichi2.anki.Statistics: Z access$000()>
<com.ichi2.anki.Statistics: Z access$100(Lcom/ichi2/anki/Statistics;)>
<com.ichi2.anki.Statistics: Lcom/ichi2/anki/Statistics$SectionsPagerAdapter; getSectionsPagerAdapter()>
<com.ichi2.anki.Statistics: Ljava/lang/String; getSubtitleText()>
<com.ichi2.anki.Statistics: Lcom/ichi2/anki/stats/AnkiStatsTaskHandler; getTaskHandler()>
<com.ichi2.anki.Statistics: Landroid/support/v4/view/ViewPager; getViewPager()>
<com.ichi2.anki.Statistics: V onBackPressed()>
<com.ichi2.anki.Statistics: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.Statistics: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Statistics: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.Statistics: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.Statistics: Z onPrepareOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.Statistics: V onResume()>
<com.ichi2.anki.Statistics: V selectDropDownItem(I)>
<com.ichi2.anki.StudyOptionsActivity: V <init>()>
<com.ichi2.anki.StudyOptionsActivity: V closeStudyOptions()>
<com.ichi2.anki.StudyOptionsActivity: V closeStudyOptions(I)>
<com.ichi2.anki.StudyOptionsActivity: Lcom/ichi2/anki/StudyOptionsFragment; getCurrentFragment()>
<com.ichi2.anki.StudyOptionsActivity: V loadStudyOptionsFragment()>
<com.ichi2.anki.StudyOptionsActivity: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.StudyOptionsActivity: V onBackPressed()>
<com.ichi2.anki.StudyOptionsActivity: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.StudyOptionsActivity: V onCreateCustomStudySession()>
<com.ichi2.anki.StudyOptionsActivity: V onExtendStudyLimits()>
<com.ichi2.anki.StudyOptionsActivity: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.StudyOptionsActivity: V onRequireDeckListUpdate()>
<com.ichi2.anki.StudyOptionsActivity: V onResume()>
<com.ichi2.anki.StudyOptionsActivity: V onStop()>
<com.ichi2.compat.CompatV21: V <init>()>
<com.ichi2.compat.CompatV21: V flushWebViewCookies()>
<com.ichi2.compat.CompatV21: V prepareWebViewCookies(Landroid/content/Context;)>
<com.ichi2.compat.CompatV21: V setSelectableBackground(Landroid/view/View;)>
<com.ichi2.compat.CompatV21: V setStatusBarColor(Landroid/view/Window;I)>
<com.ichi2.anki.Previewer: V <init>()>
<com.ichi2.anki.Previewer: Z access$000(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer: I access$100(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer: I access$108(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer: I access$110(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer: [J access$200(Lcom/ichi2/anki/Previewer;)>
<com.ichi2.anki.Previewer: V updateButtonState()>
<com.ichi2.anki.Previewer: V displayCardAnswer()>
<com.ichi2.anki.Previewer: V displayCardQuestion()>
<com.ichi2.anki.Previewer: V executeCommand(I)>
<com.ichi2.anki.Previewer: V initLayout()>
<com.ichi2.anki.Previewer: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.Previewer: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Previewer: V setTitle()>
<com.ichi2.anki.Previewer: V updateScreenCounts()>
<com.ichi2.anki.Reviewer: V <init>()>
<com.ichi2.anki.Reviewer: Z access$000(Lcom/ichi2/anki/Reviewer;)>
<com.ichi2.anki.Reviewer: Z access$100(Lcom/ichi2/anki/Reviewer;)>
<com.ichi2.anki.Reviewer: Z access$200(Lcom/ichi2/anki/Reviewer;Lcom/ichi2/libanki/Collection$DismissType;)>
<com.ichi2.anki.Reviewer: V addNote()>
<com.ichi2.anki.Reviewer: V createWhiteboard()>
<com.ichi2.anki.Reviewer: V disableDrawerSwipeOnConflicts()>
<com.ichi2.anki.Reviewer: Z dismissNoteAvailable(Lcom/ichi2/libanki/Collection$DismissType;)>
<com.ichi2.anki.Reviewer: V selectDeckFromExtra()>
<com.ichi2.anki.Reviewer: V setCustomButtons(Landroid/view/Menu;)>
<com.ichi2.anki.Reviewer: V setWhiteboardEnabledState(Z)>
<com.ichi2.anki.Reviewer: V setWhiteboardVisibility(Z)>
<com.ichi2.anki.Reviewer: V displayCardQuestion()>
<com.ichi2.anki.Reviewer: V fillFlashcard()>
<com.ichi2.anki.Reviewer: I getContentViewAttr(I)>
<com.ichi2.anki.Reviewer: V initControls()>
<com.ichi2.anki.Reviewer: V onActivityResult(IILandroid/content/Intent;)>
<com.ichi2.anki.Reviewer: V onCollectionLoaded(Lcom/ichi2/libanki/Collection;)>
<com.ichi2.anki.Reviewer: V onCreate(Landroid/os/Bundle;)>
<com.ichi2.anki.Reviewer: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<com.ichi2.anki.Reviewer: Z onKeyUp(ILandroid/view/KeyEvent;)>
<com.ichi2.anki.Reviewer: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<com.ichi2.anki.Reviewer: V onStop()>
<com.ichi2.anki.Reviewer: V onWindowFocusChanged(Z)>
<com.ichi2.anki.Reviewer: V openCardBrowser()>
<com.ichi2.anki.Reviewer: Landroid/content/SharedPreferences; restorePreferences()>
<com.ichi2.anki.Reviewer: V setTitle()>
