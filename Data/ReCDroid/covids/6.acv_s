<com.flurry.android.FlurryAdListener: V <init>()>
<com.flurry.android.FlurryAdSize: V <clinit>()>
<com.flurry.android.FlurryAdSize: V <init>(Ljava/lang/String;I)>
<com.flurry.android.FlurryAdSize: V <init>(Ljava/lang/String;II)>
<com.flurry.android.FlurryAdSize: Lcom/flurry/android/FlurryAdSize; valueOf(Ljava/lang/String;)>
<com.flurry.android.FlurryAdSize: [Lcom/flurry/android/FlurryAdSize; values()>
<com.flurry.android.FlurryAdSize: I a()>
<com.flurry.android.FlurryAgent: V <clinit>()>
<com.flurry.android.FlurryAgent: V <init>()>
<com.flurry.android.FlurryAgent: V clearTargetingKeywords()>
<com.flurry.android.FlurryAgent: V clearUserCookies()>
<com.flurry.android.FlurryAgent: V enableTestAds(Z)>
<com.flurry.android.FlurryAgent: V endTimedEvent(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: Z fetchAdsForSpace(Landroid/content/Context;Ljava/lang/String;Lcom/flurry/android/FlurryAdSize;)>
<com.flurry.android.FlurryAgent: Z getAd(Landroid/content/Context;Ljava/lang/String;Landroid/view/ViewGroup;Lcom/flurry/android/FlurryAdSize;J)>
<com.flurry.android.FlurryAgent: I getAgentVersion()>
<com.flurry.android.FlurryAgent: V initializeAds(Landroid/content/Context;)>
<com.flurry.android.FlurryAgent: Z isAdAvailable(Landroid/content/Context;Ljava/lang/String;Lcom/flurry/android/FlurryAdSize;J)>
<com.flurry.android.FlurryAgent: V logEvent(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V logEvent(Ljava/lang/String;Ljava/util/Map;)>
<com.flurry.android.FlurryAgent: V logEvent(Ljava/lang/String;Ljava/util/Map;Z)>
<com.flurry.android.FlurryAgent: V logEvent(Ljava/lang/String;Z)>
<com.flurry.android.FlurryAgent: V onEndSession(Landroid/content/Context;)>
<com.flurry.android.FlurryAgent: V onError(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V onEvent(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V onEvent(Ljava/lang/String;Ljava/util/Map;)>
<com.flurry.android.FlurryAgent: V onPageView()>
<com.flurry.android.FlurryAgent: V onStartSession(Landroid/content/Context;Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V removeAd(Landroid/content/Context;Ljava/lang/String;Landroid/view/ViewGroup;)>
<com.flurry.android.FlurryAgent: V setAdListener(Lcom/flurry/android/FlurryAdListener;)>
<com.flurry.android.FlurryAgent: V setAge(I)>
<com.flurry.android.FlurryAgent: V setCaptureUncaughtExceptions(Z)>
<com.flurry.android.FlurryAgent: V setContinueSessionMillis(J)>
<com.flurry.android.FlurryAgent: V setGender(B)>
<com.flurry.android.FlurryAgent: V setLocation(FF)>
<com.flurry.android.FlurryAgent: V setLocationCriteria(Landroid/location/Criteria;)>
<com.flurry.android.FlurryAgent: V setLogEnabled(Z)>
<com.flurry.android.FlurryAgent: V setLogEvents(Z)>
<com.flurry.android.FlurryAgent: V setLogLevel(I)>
<com.flurry.android.FlurryAgent: V setReportLocation(Z)>
<com.flurry.android.FlurryAgent: V setTargetingKeywords(Ljava/util/Map;)>
<com.flurry.android.FlurryAgent: V setUseHttps(Z)>
<com.flurry.android.FlurryAgent: V setUserCookies(Ljava/util/Map;)>
<com.flurry.android.FlurryAgent: V setUserId(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V setVersionName(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V onLocationChanged(Landroid/location/Location;)>
<com.flurry.android.FlurryAgent: V onProviderDisabled(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V onProviderEnabled(Ljava/lang/String;)>
<com.flurry.android.FlurryAgent: V onStatusChanged(Ljava/lang/String;ILandroid/os/Bundle;)>
<net.androidcomics.acv.BuildConfig: V <init>()>
<net.androidcomics.acv.R$anim: V <init>()>
<net.androidcomics.acv.R$array: V <init>()>
<net.androidcomics.acv.R$attr: V <init>()>
<net.androidcomics.acv.R$color: V <init>()>
<net.androidcomics.acv.R$drawable: V <init>()>
<net.androidcomics.acv.R$id: V <init>()>
<net.androidcomics.acv.R$layout: V <init>()>
<net.androidcomics.acv.R$menu: V <init>()>
<net.androidcomics.acv.R$string: V <init>()>
<net.androidcomics.acv.R$style: V <init>()>
<net.androidcomics.acv.R$styleable: V <clinit>()>
<net.androidcomics.acv.R$styleable: V <init>()>
<net.androidcomics.acv.R$xml: V <init>()>
<net.androidcomics.acv.R: V <init>()>
<net.robotmedia.acv.ACVApplication: V <init>()>
<net.robotmedia.acv.ACVApplication: V onCreate()>
<net.robotmedia.acv.Constants: V <clinit>()>
<net.robotmedia.acv.Constants: V <init>()>
<net.robotmedia.acv.Constants: Ljava/util/HashMap; getSupportedExtensions(Landroid/app/Activity;)>
<net.robotmedia.acv.adapter.ACVListAdapter: V <init>(Landroid/content/Context;I)>
<net.robotmedia.acv.adapter.ACVListAdapter: I getCount()>
<net.robotmedia.acv.adapter.ACVListAdapter: Ljava/lang/Object; getItem(I)>
<net.robotmedia.acv.adapter.ACVListAdapter: J getItemId(I)>
<net.robotmedia.acv.adapter.ACVListAdapter: Landroid/view/View; makeRow()>
<net.robotmedia.acv.comic.ACVComic$1$1: V <init>(Lnet/robotmedia/acv/comic/ACVComic$1;)>
<net.robotmedia.acv.comic.ACVComic$1$1: V onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$1$2: V <init>(Lnet/robotmedia/acv/comic/ACVComic$1;)>
<net.robotmedia.acv.comic.ACVComic$1$2: V onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)>
<net.robotmedia.acv.comic.ACVComic$1: V <init>(Lnet/robotmedia/acv/comic/ACVComic;Landroid/webkit/WebView;Ljava/util/concurrent/atomic/AtomicBoolean;Landroid/graphics/Bitmap;Ljava/util/concurrent/CountDownLatch;Landroid/graphics/Rect;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$1: V run()>
<net.robotmedia.acv.comic.ACVComic$Message: V <init>()>
<net.robotmedia.acv.comic.ACVParser: V <init>()>
<net.robotmedia.acv.comic.ACVParser: V parse(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: Z parseBoolean(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVParser: V parseComic(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: Lnet/robotmedia/acv/comic/ACVContent; parseContent(Lorg/xmlpull/v1/XmlPullParser;)>
<net.robotmedia.acv.comic.ACVParser: Lnet/robotmedia/acv/comic/ACVFrame; parseFrame(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: V parseImagePattern(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: Lnet/robotmedia/acv/comic/ACVComic$Message; parseMessage(Lorg/xmlpull/v1/XmlPullParser;)>
<net.robotmedia.acv.comic.ACVParser: V parseRelativeArea(Ljava/lang/String;Lnet/robotmedia/acv/comic/ACVRectangle;)>
<net.robotmedia.acv.comic.ACVParser: Lnet/robotmedia/acv/comic/ACVScreen; parseScreen(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: V parseThumbnailPattern(Lorg/xmlpull/v1/XmlPullParser;Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVParser: Ljava/lang/String; toRegex(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVRectangle: V <init>()>
<net.robotmedia.acv.comic.ACVRectangle: Landroid/graphics/Rect; createRect(II)>
<net.robotmedia.acv.comic.ACVRectangle: Z matches(Landroid/graphics/Point;II)>
<net.robotmedia.acv.comic.ACVRectangle: V setArea(FFFF)>
<net.robotmedia.acv.comic.ACVScreen: V <init>(I)>
<net.robotmedia.acv.comic.ACVScreen: V add(Lnet/robotmedia/acv/comic/ACVContent;)>
<net.robotmedia.acv.comic.ACVScreen: V addFrame(Lnet/robotmedia/acv/comic/ACVFrame;)>
<net.robotmedia.acv.comic.ACVScreen: I framesSize()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getBgcolorString()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/util/ArrayList; getContents()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getDescription()>
<net.robotmedia.acv.comic.ACVScreen: J getDuration()>
<net.robotmedia.acv.comic.ACVScreen: Lnet/robotmedia/acv/comic/ACVFrame; getFrame(I)>
<net.robotmedia.acv.comic.ACVScreen: I getIndex()>
<net.robotmedia.acv.comic.ACVScreen: Lnet/robotmedia/acv/comic/ACVComic$Message; getMessage()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getSound()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getTitle()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getTransition()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/lang/String; getTransition(I)>
<net.robotmedia.acv.comic.ACVScreen: J getTransitionDuration()>
<net.robotmedia.acv.comic.ACVScreen: Ljava/io/File; getVideoFile()>
<net.robotmedia.acv.comic.ACVScreen: Z isAutoplay()>
<net.robotmedia.acv.comic.ACVScreen: Z isVibrate()>
<net.robotmedia.acv.comic.ACVScreen: V setAutoplay(Z)>
<net.robotmedia.acv.comic.ACVScreen: V setBgcolorString(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVScreen: V setDescription(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVScreen: V setDuration(F)>
<net.robotmedia.acv.comic.ACVScreen: V setIndex(I)>
<net.robotmedia.acv.comic.ACVScreen: V setMessage(Lnet/robotmedia/acv/comic/ACVComic$Message;)>
<net.robotmedia.acv.comic.ACVScreen: V setSound(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVScreen: V setTitle(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVScreen: V setTransition(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVScreen: V setTransitionDuration(F)>
<net.robotmedia.acv.comic.ACVScreen: V setVibrate(Z)>
<net.robotmedia.acv.comic.ACVScreen: V setVideoFile(Ljava/io/File;)>
<net.robotmedia.acv.comic.Comic$ImageState: V <clinit>()>
<net.robotmedia.acv.comic.Comic$ImageState: V <init>(Ljava/lang/String;I)>
<net.robotmedia.acv.comic.Comic$ImageState: Lnet/robotmedia/acv/comic/Comic$ImageState; valueOf(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic$ImageState: [Lnet/robotmedia/acv/comic/Comic$ImageState; values()>
<net.robotmedia.acv.comic.Comic: V <clinit>()>
<net.robotmedia.acv.comic.Comic: V <init>(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: Lnet/robotmedia/acv/comic/Comic; createComic(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: Lnet/robotmedia/acv/comic/Comic; getComic(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: Lnet/robotmedia/acv/comic/Comic; getInstance()>
<net.robotmedia.acv.comic.Comic: V setMaxHeight(I)>
<net.robotmedia.acv.comic.Comic: V setMaxWidth(I)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; addLeadingZeroes(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: I calculateSampleSize(II)>
<net.robotmedia.acv.comic.Comic: Ljava/io/File; createTempFile(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: V error()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/Integer; getBackgroundColor(I)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getDefaultFileName(I)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getDescription()>
<net.robotmedia.acv.comic.Comic: I getFramesSize(I)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getID()>
<net.robotmedia.acv.comic.Comic: I getMaxHeight(Z)>
<net.robotmedia.acv.comic.Comic: I getMaxWidth(Z)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getName()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getPath()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getRelativePath()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getScaleMode()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getTempFilePath(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; getType()>
<net.robotmedia.acv.comic.Comic: Z hasFrames(I)>
<net.robotmedia.acv.comic.Comic: Z isCompatible(I)>
<net.robotmedia.acv.comic.Comic: Z isError()>
<net.robotmedia.acv.comic.Comic: Ljava/lang/String; saveBitmap(Ljava/lang/String;Landroid/graphics/Bitmap;)>
<net.robotmedia.acv.comic.Comic: V setDescription(Ljava/lang/String;)>
<net.robotmedia.acv.comic.Comic: V setId(Ljava/lang/String;)>
<net.robotmedia.acv.comic.FileComic$1: V <clinit>()>
<net.robotmedia.acv.comic.FolderComic$1: V <init>(Lnet/robotmedia/acv/comic/FolderComic;)>
<net.robotmedia.acv.comic.FolderComic$1: Z accept(Ljava/io/File;Ljava/lang/String;)>
<net.robotmedia.acv.comic.FolderComic$2: V <clinit>()>
<net.robotmedia.acv.comic.ZipComic$1: V <clinit>()>
<net.robotmedia.acv.logic.AdMobProxy: V <clinit>()>
<net.robotmedia.acv.logic.AdMobProxy: V <init>()>
<net.robotmedia.acv.logic.AdMobProxy: V destroyAds(Landroid/app/Activity;I)>
<net.robotmedia.acv.logic.AdMobProxy: Landroid/view/View; getAd(Landroid/app/Activity;ILjava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.AdMobProxy: V init()>
<net.robotmedia.acv.logic.AdMobProxy: Ljava/lang/Object; sizeToAdSize(I)>
<net.robotmedia.acv.logic.AdsManager: V <clinit>()>
<net.robotmedia.acv.logic.AdsManager: V <init>()>
<net.robotmedia.acv.logic.AdsManager: V destroyAds(Landroid/app/Activity;)>
<net.robotmedia.acv.logic.AdsManager: V disableAds()>
<net.robotmedia.acv.logic.AdsManager: Landroid/view/View; getAd(Landroid/app/Activity;)>
<net.robotmedia.acv.logic.AdsManager: Landroid/view/View; getAd(Landroid/app/Activity;I)>
<net.robotmedia.acv.logic.AdsManager: V init(Landroid/content/Context;)>
<net.robotmedia.acv.logic.FlurryAgentProxy: V <clinit>()>
<net.robotmedia.acv.logic.FlurryAgentProxy: V <init>()>
<net.robotmedia.acv.logic.FlurryAgentProxy: V init()>
<net.robotmedia.acv.logic.FlurryAgentProxy: V onEndSession(Landroid/content/Context;)>
<net.robotmedia.acv.logic.FlurryAgentProxy: V onError(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.FlurryAgentProxy: V onEvent(Ljava/lang/String;Ljava/util/Map;)>
<net.robotmedia.acv.logic.FlurryAgentProxy: V onStartSession(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.acv.logic.PreferencesController: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.logic.PreferencesController: V flipControls(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.PreferencesController: V checkCleanExit()>
<net.robotmedia.acv.logic.PreferencesController: V flipControls()>
<net.robotmedia.acv.logic.PreferencesController: Z isLeftToRight()>
<net.robotmedia.acv.logic.PreferencesController: Z isUsedForPreviousNext(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.PreferencesController: V legacy()>
<net.robotmedia.acv.logic.PreferencesController: V markCleanExit()>
<net.robotmedia.acv.logic.PreferencesController: V restoreControlDefaults()>
<net.robotmedia.acv.logic.PreferencesController: V savePreference(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.PreferencesController: V setMaxImageResolution()>
<net.robotmedia.acv.logic.ServiceManager: V <init>()>
<net.robotmedia.acv.logic.ServiceManager: Ljava/lang/String; getNativeURL(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ServiceManager: Z subscribe(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.logic.SetComicScreenAsTask: V <init>(Landroid/content/Context;Lnet/robotmedia/acv/comic/Comic;)>
<net.robotmedia.acv.logic.SetComicScreenAsTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.logic.SetComicScreenAsTask: Ljava/lang/String; doInBackground([Ljava/lang/Integer;)>
<net.robotmedia.acv.logic.SetComicScreenAsTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.logic.SetComicScreenAsTask: V onPostExecute(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/io/File; getImageFile()>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/String; doInBackground([Landroid/view/View;)>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/String; getChooserTitle()>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/String; getExtraSubject()>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/String; getExtraText()>
<net.robotmedia.acv.logic.ShareViewTask: Ljava/lang/String; getRelativeTempPath()>
<net.robotmedia.acv.logic.ShareViewTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.logic.ShareViewTask: V onPostExecute(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setChooserTitle(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setExtraSubject(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setExtraText(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setName(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setRelativeTempPath(Ljava/lang/String;)>
<net.robotmedia.acv.logic.ShareViewTask: V setTempDir(Ljava/io/File;)>
<net.robotmedia.acv.logic.TrackingManager: V <clinit>()>
<net.robotmedia.acv.logic.TrackingManager: V <init>()>
<net.robotmedia.acv.logic.TrackingManager: V onStart(Landroid/content/Context;)>
<net.robotmedia.acv.logic.TrackingManager: V onStop(Landroid/content/Context;)>
<net.robotmedia.acv.logic.TrackingManager: V pageView(Ljava/lang/String;)>
<net.robotmedia.acv.logic.TrackingManager: V track(Ljava/lang/String;[Ljava/lang/String;)>
<net.robotmedia.acv.logic.TrackingManager: V trackError(Ljava/lang/String;Ljava/lang/Exception;)>
<net.robotmedia.acv.provider.DBHelper: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.provider.DBHelper: V deleteFiles()>
<net.robotmedia.acv.provider.DBHelper: Z existsFile(Ljava/lang/String;)>
<net.robotmedia.acv.provider.DBHelper: Ljava/util/List; getRecentFiles()>
<net.robotmedia.acv.provider.DBHelper: V increaseFileViews(Ljava/lang/String;)>
<net.robotmedia.acv.provider.DBHelper: J insertFile(Ljava/lang/String;)>
<net.robotmedia.acv.provider.DBHelper: I selectFileBookmark(Ljava/lang/String;)>
<net.robotmedia.acv.provider.DBHelper: Ljava/lang/String; selectMostRecentFile()>
<net.robotmedia.acv.provider.DBHelper: V updateFileBookmark(Ljava/lang/String;I)>
<net.robotmedia.acv.provider.DBHelper: V updateLastOpened(Ljava/lang/String;)>
<net.robotmedia.acv.provider.DBOpenHelper: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.provider.DBOpenHelper: V onCreate(Landroid/database/sqlite/SQLiteDatabase;)>
<net.robotmedia.acv.provider.DBOpenHelper: V onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)>
<net.robotmedia.acv.provider.HistoryManager: V <clinit>()>
<net.robotmedia.acv.provider.HistoryManager: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.provider.HistoryManager: Lnet/robotmedia/acv/provider/HistoryManager; getInstance(Landroid/content/Context;)>
<net.robotmedia.acv.provider.HistoryManager: V clear()>
<net.robotmedia.acv.provider.HistoryManager: I getBookmark(Ljava/io/File;)>
<net.robotmedia.acv.provider.HistoryManager: Ljava/lang/String; getLast()>
<net.robotmedia.acv.provider.HistoryManager: Ljava/util/List; getRecentFiles()>
<net.robotmedia.acv.provider.HistoryManager: V remember(Ljava/io/File;)>
<net.robotmedia.acv.provider.HistoryManager: V setBookmark(Ljava/io/File;I)>
<net.robotmedia.acv.ui.ACVDialogFactory$1: V <init>(Lnet/robotmedia/acv/ui/ACVDialogFactory;)>
<net.robotmedia.acv.ui.ACVDialogFactory$1: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.ACVDialogFactory$2: V <init>(Lnet/robotmedia/acv/ui/ACVDialogFactory;)>
<net.robotmedia.acv.ui.ACVDialogFactory$2: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.ACVDialogFactory$3: V <init>(Lnet/robotmedia/acv/ui/ACVDialogFactory;)>
<net.robotmedia.acv.ui.ACVDialogFactory$3: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.ACVDialogFactory$4: V <init>(Lnet/robotmedia/acv/ui/ACVDialogFactory;)>
<net.robotmedia.acv.ui.ACVDialogFactory$4: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.ACVDialogFactory: V <init>(Landroid/app/Activity;)>
<net.robotmedia.acv.ui.ACVDialogFactory: Landroid/app/Activity; access$000(Lnet/robotmedia/acv/ui/ACVDialogFactory;)>
<net.robotmedia.acv.ui.ACVDialogFactory: Landroid/app/AlertDialog; createFlipControlsDialog()>
<net.robotmedia.acv.ui.ACVDialogFactory: Landroid/app/AlertDialog; createLoadErrorDialog()>
<net.robotmedia.acv.ui.ACVDialogFactory: Landroid/app/ProgressDialog; createLoadProgressDialog()>
<net.robotmedia.acv.ui.ACVDialogFactory: Landroid/app/AlertDialog; createPageErrorDialog()>
<net.robotmedia.acv.ui.BrowseActivity$1: V <init>(Lnet/robotmedia/acv/ui/BrowseActivity;)>
<net.robotmedia.acv.ui.BrowseActivity$1: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.BrowseActivity$2: V <init>(Lnet/robotmedia/acv/ui/BrowseActivity;)>
<net.robotmedia.acv.ui.BrowseActivity$2: V onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.BrowseActivity$2: V onNothingSelected(Landroid/widget/AdapterView;)>
<net.robotmedia.acv.ui.BrowseActivity$3: V <init>(Lnet/robotmedia/acv/ui/BrowseActivity;)>
<net.robotmedia.acv.ui.BrowseActivity$3: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.BrowseActivity$ImageAdapter: V <init>(Lnet/robotmedia/acv/ui/BrowseActivity;Landroid/content/Context;)>
<net.robotmedia.acv.ui.BrowseActivity$ImageAdapter: I getCount()>
<net.robotmedia.acv.ui.BrowseActivity$ImageAdapter: Ljava/lang/Object; getItem(I)>
<net.robotmedia.acv.ui.BrowseActivity$ImageAdapter: J getItemId(I)>
<net.robotmedia.acv.ui.BrowseActivity$ImageAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<net.robotmedia.acv.ui.ComicViewerActivity$1: V <init>(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity$1: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.ComicViewerActivity$2: V <init>(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity$2: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: V <init>(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: V <init>(Lnet/robotmedia/acv/ui/ComicViewerActivity;Lnet/robotmedia/acv/ui/ComicViewerActivity$1;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: Lnet/robotmedia/acv/comic/Comic; doInBackground([Ljava/lang/String;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: V onPostExecute(Lnet/robotmedia/acv/comic/Comic;)>
<net.robotmedia.acv.ui.ComicViewerActivity$LoadComicTask: V onPreExecute()>
<net.robotmedia.acv.ui.ExtendedActivity$1: V <init>(Lnet/robotmedia/acv/ui/ExtendedActivity;)>
<net.robotmedia.acv.ui.ExtendedActivity$1: V run()>
<net.robotmedia.acv.ui.ExtendedActivity$ActionBarHelper: V <init>(Lnet/robotmedia/acv/ui/ExtendedActivity;)>
<net.robotmedia.acv.ui.ExtendedActivity$ActionBarHelper: V hide()>
<net.robotmedia.acv.ui.ExtendedActivity$ActionBarHelper: Z isShowing()>
<net.robotmedia.acv.ui.ExtendedActivity$ActionBarHelper: V setup()>
<net.robotmedia.acv.ui.ExtendedActivity$ActionBarHelper: V show()>
<net.robotmedia.acv.ui.ExtendedActivity$MenuHelper: V <init>(Lnet/robotmedia/acv/ui/ExtendedActivity;)>
<net.robotmedia.acv.ui.ExtendedActivity$MenuHelper: V invalidateOptionsMenu()>
<net.robotmedia.acv.ui.ExtendedActivity: V <init>()>
<net.robotmedia.acv.ui.ExtendedActivity: V hideActionBar()>
<net.robotmedia.acv.ui.ExtendedActivity: V hideActionBarDelayed()>
<net.robotmedia.acv.ui.ExtendedActivity: Z isHoneyComb()>
<net.robotmedia.acv.ui.ExtendedActivity: Z isIcecream()>
<net.robotmedia.acv.ui.ExtendedActivity: V onActivityResult(IILandroid/content/Intent;)>
<net.robotmedia.acv.ui.ExtendedActivity: V onDestroy()>
<net.robotmedia.acv.ui.ExtendedActivity: V onPostCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.ExtendedActivity: V onStart()>
<net.robotmedia.acv.ui.ExtendedActivity: V onStop()>
<net.robotmedia.acv.ui.ExtendedActivity: V setCanBeKilledByChild(Z)>
<net.robotmedia.acv.ui.ExtendedActivity: V setupActionBar()>
<net.robotmedia.acv.ui.ExtendedActivity: V showActionBar()>
<net.robotmedia.acv.ui.ExtendedActivity: Z toggleControls()>
<net.robotmedia.acv.ui.SDBrowserActivity$1: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity$1: V onTabChanged(Ljava/lang/String;)>
<net.robotmedia.acv.ui.SDBrowserActivity$2$1: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity$2;)>
<net.robotmedia.acv.ui.SDBrowserActivity$2$1: Z accept(Ljava/io/File;Ljava/lang/String;)>
<net.robotmedia.acv.ui.SDBrowserActivity$2: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity$2: Z onItemLongClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.SDBrowserActivity$3: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity$3: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.SDBrowserActivity$4: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity$4: V onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)>
<net.robotmedia.acv.ui.SDBrowserActivity$5: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity$5: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;Landroid/content/Context;Ljava/io/File;I)>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: V filterContents()>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: I getCount()>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: Ljava/io/File; getItem(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: Ljava/lang/Object; getItem(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: J getItemId(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$ListAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: V <init>(Lnet/robotmedia/acv/ui/SDBrowserActivity;Landroid/content/Context;I)>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: V populate()>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: I getCount()>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: Ljava/lang/Object; getItem(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: Ljava/lang/String; getItem(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: J getItemId(I)>
<net.robotmedia.acv.ui.SDBrowserActivity$RecentListAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<net.robotmedia.acv.ui.SDBrowserActivity$ViewHolder: V <init>()>
<net.robotmedia.acv.ui.SDBrowserActivity: V <clinit>()>
<net.robotmedia.acv.ui.SDBrowserActivity: V <init>()>
<net.robotmedia.acv.ui.SDBrowserActivity: Ljava/io/File; access$000(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity: V access$100(Lnet/robotmedia/acv/ui/SDBrowserActivity;Ljava/io/File;)>
<net.robotmedia.acv.ui.SDBrowserActivity: V access$200(Lnet/robotmedia/acv/ui/SDBrowserActivity;Ljava/io/File;)>
<net.robotmedia.acv.ui.SDBrowserActivity: Ljava/util/HashMap; access$300()>
<net.robotmedia.acv.ui.SDBrowserActivity: Landroid/view/LayoutInflater; access$400(Lnet/robotmedia/acv/ui/SDBrowserActivity;)>
<net.robotmedia.acv.ui.SDBrowserActivity: V changeDirectory(Ljava/io/File;)>
<net.robotmedia.acv.ui.SDBrowserActivity: V setResultAndFinish(Ljava/io/File;)>
<net.robotmedia.acv.ui.SDBrowserActivity: Landroid/view/ViewGroup; getIndicator(I)>
<net.robotmedia.acv.ui.SDBrowserActivity: Landroid/view/ViewGroup; getIndicator(Ljava/lang/String;)>
<net.robotmedia.acv.ui.SDBrowserActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.SDBrowserActivity: Landroid/app/Dialog; onCreateDialog(I)>
<net.robotmedia.acv.ui.SDBrowserActivity: Z onKeyDown(ILandroid/view/KeyEvent;)>
<net.robotmedia.acv.ui.SubscribeActivity$1: V <init>(Lnet/robotmedia/acv/ui/SubscribeActivity;)>
<net.robotmedia.acv.ui.SubscribeActivity$1: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.SubscribeActivity$2: V <init>(Lnet/robotmedia/acv/ui/SubscribeActivity;)>
<net.robotmedia.acv.ui.SubscribeActivity$2: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: V <init>(Lnet/robotmedia/acv/ui/SubscribeActivity;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: V <init>(Lnet/robotmedia/acv/ui/SubscribeActivity;Lnet/robotmedia/acv/ui/SubscribeActivity$1;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: Ljava/lang/Boolean; doInBackground([Ljava/lang/String;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: V onPostExecute(Ljava/lang/Boolean;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.ui.SubscribeActivity$SubscribeTask: V onPreExecute()>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V updateBrightness(I)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onBindDialogView(Landroid/view/View;)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onCheckedChanged(Landroid/widget/CompoundButton;Z)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: Landroid/view/View; onCreateDialogView()>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onProgressChanged(Landroid/widget/SeekBar;IZ)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onSetInitialValue(ZLjava/lang/Object;)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onStartTrackingTouch(Landroid/widget/SeekBar;)>
<net.robotmedia.acv.ui.settings.BrightnessPreference: V onStopTrackingTouch(Landroid/widget/SeekBar;)>
<net.robotmedia.acv.ui.settings.CollectionSettingsHelper$1: V <init>(Lnet/robotmedia/acv/ui/settings/CollectionSettingsHelper;)>
<net.robotmedia.acv.ui.settings.CollectionSettingsHelper$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.IconPreferenceScreen: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.settings.IconPreferenceScreen: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<net.robotmedia.acv.ui.settings.IconPreferenceScreen: V onBindView(Landroid/view/View;)>
<net.robotmedia.acv.ui.settings.PremiumSettingsHelper$1: V <init>(Lnet/robotmedia/acv/ui/settings/PremiumSettingsHelper;)>
<net.robotmedia.acv.ui.settings.PremiumSettingsHelper$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.SettingsHelper: V <init>(Landroid/app/Activity;)>
<net.robotmedia.acv.ui.settings.SettingsHelper: Landroid/app/Activity; getActivity()>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity$1: V <init>(Lnet/robotmedia/acv/ui/settings/mobile/AboutSettingsActivity;)>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity$1: V <init>(Lnet/robotmedia/acv/ui/settings/mobile/ControlSettingsActivity;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V showValues()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onDestroy()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onPause()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onResume()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onStart()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V onStop()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V removeAd()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V showAd()>
<net.robotmedia.acv.ui.settings.mobile.ExtendedPreferenceActivity: V showValueOnSummary(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.AboutSettingsFragment$1: V <init>(Lnet/robotmedia/acv/ui/settings/tablet/AboutSettingsFragment;)>
<net.robotmedia.acv.ui.settings.tablet.AboutSettingsFragment$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment$1: V <init>(Lnet/robotmedia/acv/ui/settings/tablet/ControlSettingsFragment;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment$1: Z onPreferenceClick(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V showValues()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onPause()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onResume()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onStart()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V onStop()>
<net.robotmedia.acv.ui.settings.tablet.ExtendedPreferenceFragment: V showValueOnSummary(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.SettingsActivityTablet: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.SettingsActivityTablet: Landroid/preference/PreferenceActivity$Header; bug22430Workaround()>
<net.robotmedia.acv.ui.settings.tablet.SettingsActivityTablet: V onBuildHeaders(Ljava/util/List;)>
<net.robotmedia.acv.ui.settings.tablet.SettingsActivityTablet: Landroid/preference/PreferenceActivity$Header; onGetNewHeader()>
<net.robotmedia.acv.ui.widget.CaptionView$1: V <init>(Lnet/robotmedia/acv/ui/widget/CaptionView;)>
<net.robotmedia.acv.ui.widget.CaptionView$1: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.widget.CaptionView$2: V <init>(Lnet/robotmedia/acv/ui/widget/CaptionView;)>
<net.robotmedia.acv.ui.widget.CaptionView$2: Z onDown(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.CaptionView$2: Z onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)>
<net.robotmedia.acv.ui.widget.CaptionView$2: V onLongPress(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.CaptionView$2: Z onScroll(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)>
<net.robotmedia.acv.ui.widget.CaptionView$2: V onShowPress(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.CaptionView$2: Z onSingleTapUp(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.CaptionView$3: V <init>(Lnet/robotmedia/acv/ui/widget/CaptionView;Landroid/view/GestureDetector;)>
<net.robotmedia.acv.ui.widget.CaptionView$3: Z onTouch(Landroid/view/View;Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.CaptionView$4: V <init>(Lnet/robotmedia/acv/ui/widget/CaptionView;Landroid/view/View;Z)>
<net.robotmedia.acv.ui.widget.CaptionView$4: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.CaptionView$4: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.CaptionView$4: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.CaptionView: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.CaptionView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.widget.CaptionView: Landroid/webkit/WebView; access$000(Lnet/robotmedia/acv/ui/widget/CaptionView;)>
<net.robotmedia.acv.ui.widget.CaptionView: V init()>
<net.robotmedia.acv.ui.widget.CaptionView: V toggle(Landroid/view/View;Z)>
<net.robotmedia.acv.ui.widget.CaptionView: V hideCaption()>
<net.robotmedia.acv.ui.widget.CaptionView: V setCaption(Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.CaptionView: V setCaptionButtonText(Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.CaptionView: V showCaption()>
<net.robotmedia.acv.ui.widget.ComicFrame$1: V <init>(Lnet/robotmedia/acv/ui/widget/ComicFrame;Lnet/robotmedia/acv/comic/ACVContent;Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.ComicFrame$1: V onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.ComicFrame$1: Z shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.ComicFrame: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.ComicFrame: V init(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.ComicFrame: Lnet/robotmedia/acv/ui/widget/SuperImageView; getImage()>
<net.robotmedia.acv.ui.widget.ComicFrame: Lnet/robotmedia/acv/ui/widget/Letterbox; getLetterbox()>
<net.robotmedia.acv.ui.widget.ComicFrame: V removeContent()>
<net.robotmedia.acv.ui.widget.ComicFrame: V showContent(Lnet/robotmedia/acv/comic/ACVComic;IIZLnet/robotmedia/acv/ui/widget/SuperImageView$LayoutMeasures;)>
<net.robotmedia.acv.ui.widget.ComicView$1: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$1: Landroid/view/View; makeView()>
<net.robotmedia.acv.ui.widget.ComicView$2: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$2: V onClick(Landroid/view/View;)>
<net.robotmedia.acv.ui.widget.ComicView$3: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$3: V run()>
<net.robotmedia.acv.ui.widget.ComicView$5: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;IZZ)>
<net.robotmedia.acv.ui.widget.ComicView$5: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$5: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$5: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$6: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$6: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.widget.ComicView$7: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$7: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.widget.ComicView$8: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView$8: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$8: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$8: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/ui/widget/ComicView$1;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: Ljava/lang/String; doInBackground([Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: V onPostExecute(Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.ComicView$GetNativeUrlTask: V onPreExecute()>
<net.robotmedia.acv.ui.widget.ComicView$PrepareScreenTask: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/comic/Comic;)>
<net.robotmedia.acv.ui.widget.ComicView$PrepareScreenTask: Ljava/lang/Object; doInBackground([Ljava/lang/Integer;)>
<net.robotmedia.acv.ui.widget.ComicView$PrepareScreenTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$1: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$1: V run()>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$2: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$2: V run()>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$3: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$3: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$3: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask$3: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/ui/widget/ComicView$1;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Landroid/app/ProgressDialog; access$100(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Landroid/app/ProgressDialog; access$102(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;Landroid/app/ProgressDialog;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Z access$200(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V access$2500(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Z access$2600(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Z access$2602(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;Z)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: I access$300(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: I access$302(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;I)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Z access$3602(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;Z)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: I access$3702(Lnet/robotmedia/acv/ui/widget/ComicView$SwitchImageTask;I)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: I getFrameIndex()>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Z isImageSwitch()>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V postScreenChangedActions()>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V scale(Lnet/robotmedia/acv/ui/widget/SuperImageView;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Landroid/graphics/drawable/Drawable; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: Ljava/lang/Object; doInBackground([Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V onPostExecute(Landroid/graphics/drawable/Drawable;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V onPostExecute(Ljava/lang/Object;)>
<net.robotmedia.acv.ui.widget.ComicView$SwitchImageTask: V onPreExecute()>
<net.robotmedia.acv.ui.widget.ComicView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$000(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1000(Lnet/robotmedia/acv/ui/widget/ComicView;IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$1100(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1200(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Ljava/lang/Runnable; access$1300(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Ljava/lang/Runnable; access$1302(Lnet/robotmedia/acv/ui/widget/ComicView;Ljava/lang/Runnable;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$1402(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1500(Lnet/robotmedia/acv/ui/widget/ComicView;IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1600(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1700(Lnet/robotmedia/acv/ui/widget/ComicView;Ljava/io/File;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$1800(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$1802(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: V access$1900(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/ui/widget/ComicViewListener; access$2000(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$2102(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: I access$2200(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: I access$2202(Lnet/robotmedia/acv/ui/widget/ComicView;I)>
<net.robotmedia.acv.ui.widget.ComicView: I access$2300(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: I access$2302(Lnet/robotmedia/acv/ui/widget/ComicView;I)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$2400(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$2402(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: V access$2700(Lnet/robotmedia/acv/ui/widget/ComicView;Z)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$2800(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/ui/widget/ComicView$PrepareScreenTask; access$2900(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/ui/widget/ComicView$PrepareScreenTask; access$2902(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/ui/widget/ComicView$PrepareScreenTask;)>
<net.robotmedia.acv.ui.widget.ComicView: Landroid/content/SharedPreferences; access$3000(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$3100(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$3200(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/ui/widget/ComicView$GetNativeUrlTask; access$3300(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/ui/widget/ComicView$GetNativeUrlTask; access$3302(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/ui/widget/ComicView$GetNativeUrlTask;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$3800(Lnet/robotmedia/acv/ui/widget/ComicView;IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: I access$400(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: I access$402(Lnet/robotmedia/acv/ui/widget/ComicView;I)>
<net.robotmedia.acv.ui.widget.ComicView: Lnet/robotmedia/acv/comic/Comic; access$500(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$600(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$700(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: V access$800(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z access$900(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.widget.ComicView: Z fit(Ljava/lang/String;)>
<net.robotmedia.acv.ui.widget.ComicView: Z forceNextScreen()>
<net.robotmedia.acv.ui.widget.ComicView: Z forcePreviousScreen()>
<net.robotmedia.acv.ui.widget.ComicView: Z isAnimating()>
<net.robotmedia.acv.ui.widget.ComicView: Z mustConsiderFrames()>
<net.robotmedia.acv.ui.widget.ComicView: V playSound(Ljava/io/File;)>
<net.robotmedia.acv.ui.widget.ComicView: V postFrameDisplayedActions(Z)>
<net.robotmedia.acv.ui.widget.ComicView: V prepareCaption()>
<net.robotmedia.acv.ui.widget.ComicView: V prepareMessageButton()>
<net.robotmedia.acv.ui.widget.ComicView: V setFrame(IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: V setPosition(IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: V setSequentialTransition(IZ)>
<net.robotmedia.acv.ui.widget.ComicView: V setTransition(ZLjava/lang/String;J)>
<net.robotmedia.acv.ui.widget.ComicView: V showOfferSubscribeDialog()>
<net.robotmedia.acv.ui.widget.ComicView: V showScreenNumber()>
<net.robotmedia.acv.ui.widget.ComicView: V startAnimating()>
<net.robotmedia.acv.ui.widget.ComicView: V startChangeScreenTask(IZZ)>
<net.robotmedia.acv.ui.widget.ComicView: V stopAnimating()>
<net.robotmedia.acv.ui.widget.ComicView: V vibrate(Z)>
<net.robotmedia.acv.ui.widget.ComicView: Z actualSize()>
<net.robotmedia.acv.ui.widget.ComicView: V destroy()>
<net.robotmedia.acv.ui.widget.ComicView: Z fitHeight()>
<net.robotmedia.acv.ui.widget.ComicView: Z fitScreen()>
<net.robotmedia.acv.ui.widget.ComicView: Z fitWidth()>
<net.robotmedia.acv.ui.widget.ComicView: I getFrameIndex()>
<net.robotmedia.acv.ui.widget.ComicView: I getIndex()>
<net.robotmedia.acv.ui.widget.ComicView: Landroid/graphics/Rect; getOriginalSize()>
<net.robotmedia.acv.ui.widget.ComicView: Z goToCurrent()>
<net.robotmedia.acv.ui.widget.ComicView: Z goToScreen(I)>
<net.robotmedia.acv.ui.widget.ComicView: V initializeWithResources(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.ComicView: Z isBottomMost()>
<net.robotmedia.acv.ui.widget.ComicView: Z isLeftMost()>
<net.robotmedia.acv.ui.widget.ComicView: Z isLeftToRight()>
<net.robotmedia.acv.ui.widget.ComicView: Z isLoading()>
<net.robotmedia.acv.ui.widget.ComicView: Z isMaxZoom()>
<net.robotmedia.acv.ui.widget.ComicView: Z isRightMost()>
<net.robotmedia.acv.ui.widget.ComicView: Z isTopMost()>
<net.robotmedia.acv.ui.widget.ComicView: Z next()>
<net.robotmedia.acv.ui.widget.ComicView: Z nextScreen()>
<net.robotmedia.acv.ui.widget.ComicView: V onCompletion(Landroid/media/MediaPlayer;)>
<net.robotmedia.acv.ui.widget.ComicView: Z onError(Landroid/media/MediaPlayer;II)>
<net.robotmedia.acv.ui.widget.ComicView: Z onKeyDown(ILandroid/view/KeyEvent;)>
<net.robotmedia.acv.ui.widget.ComicView: Z onTouchEvent(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.ComicView: Z previous()>
<net.robotmedia.acv.ui.widget.ComicView: Z previousScreen()>
<net.robotmedia.acv.ui.widget.ComicView: V recycleBitmaps()>
<net.robotmedia.acv.ui.widget.ComicView: V scroll(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.ComicView: Z scroll(II)>
<net.robotmedia.acv.ui.widget.ComicView: V setAutoplay(Z)>
<net.robotmedia.acv.ui.widget.ComicView: V setComic(Lnet/robotmedia/acv/comic/Comic;)>
<net.robotmedia.acv.ui.widget.ComicView: V setListener(Lnet/robotmedia/acv/ui/widget/ComicViewListener;)>
<net.robotmedia.acv.ui.widget.ComicView: V setLowMemoryTransitions(Z)>
<net.robotmedia.acv.ui.widget.ComicView: V setPreload(Z)>
<net.robotmedia.acv.ui.widget.ComicView: Landroid/graphics/Point; toImagePoint(Landroid/graphics/Point;)>
<net.robotmedia.acv.ui.widget.ComicView: Z zoom(FLandroid/graphics/Point;)>
<net.robotmedia.acv.ui.widget.ComicView: Z zoom(ILandroid/graphics/Point;)>
<net.robotmedia.acv.ui.widget.DialogFactory$1: V <init>()>
<net.robotmedia.acv.ui.widget.DialogFactory$1: V onClick(Landroid/content/DialogInterface;I)>
<net.robotmedia.acv.ui.widget.DialogFactory: V <init>()>
<net.robotmedia.acv.ui.widget.DialogFactory: V showSimpleAlert(Landroid/app/Activity;ZII)>
<net.robotmedia.acv.ui.widget.Letterbox$1: V <init>(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox$1: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$1: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$1: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$2: V <init>(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox$2: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$2: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$2: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$3: V <init>(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox$3: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$3: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$3: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$4: V <init>(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox$4: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$4: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox$4: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.Letterbox: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.Letterbox: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.widget.Letterbox: V access$000(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox: V access$100(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox: V access$200(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox: V access$300(Lnet/robotmedia/acv/ui/widget/Letterbox;)>
<net.robotmedia.acv.ui.widget.Letterbox: Landroid/view/View; addLetterbox(Landroid/content/Context;III)>
<net.robotmedia.acv.ui.widget.Letterbox: V animateBottom(J)>
<net.robotmedia.acv.ui.widget.Letterbox: V animateLeft(J)>
<net.robotmedia.acv.ui.widget.Letterbox: V animateRight(J)>
<net.robotmedia.acv.ui.widget.Letterbox: V animateTop(J)>
<net.robotmedia.acv.ui.widget.Letterbox: V configureAndStart(Landroid/view/View;Landroid/view/animation/Animation;J)>
<net.robotmedia.acv.ui.widget.Letterbox: V init(Landroid/content/Context;)>
<net.robotmedia.acv.ui.widget.Letterbox: V layoutBottom()>
<net.robotmedia.acv.ui.widget.Letterbox: V layoutLeft()>
<net.robotmedia.acv.ui.widget.Letterbox: V layoutRight()>
<net.robotmedia.acv.ui.widget.Letterbox: V layoutTop()>
<net.robotmedia.acv.ui.widget.Letterbox: V hide(Z)>
<net.robotmedia.acv.ui.widget.Letterbox: V show(IIIJ)>
<net.robotmedia.acv.ui.widget.SuperImageView$1$1: V <init>(Lnet/robotmedia/acv/ui/widget/SuperImageView$1;)>
<net.robotmedia.acv.ui.widget.SuperImageView$1$1: V run()>
<net.robotmedia.acv.ui.widget.SuperImageView$1: V <init>(Lnet/robotmedia/acv/ui/widget/SuperImageView;Landroid/graphics/Rect;Z)>
<net.robotmedia.acv.ui.widget.SuperImageView$1: V onAnimationEnd(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.SuperImageView$1: V onAnimationRepeat(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.SuperImageView$1: V onAnimationStart(Landroid/view/animation/Animation;)>
<net.robotmedia.acv.ui.widget.SuperImageView$LayoutMeasures: V <init>(Lnet/robotmedia/acv/ui/widget/SuperImageView;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)>
<net.robotmedia.acv.ui.widget.SuperImageView: Z access$002(Lnet/robotmedia/acv/ui/widget/SuperImageView;Z)>
<net.robotmedia.acv.ui.widget.SuperImageView: Lnet/robotmedia/acv/ui/widget/SuperImageViewListener; access$100(Lnet/robotmedia/acv/ui/widget/SuperImageView;)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Point; calculateSafeScroll(IIII)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/view/animation/AnimationSet; createAnimation(IIIJ)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/widget/FrameLayout$LayoutParams; createLayoutParams(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: I fitFrame()>
<net.robotmedia.acv.ui.widget.SuperImageView: I fitHeight()>
<net.robotmedia.acv.ui.widget.SuperImageView: I fitHeight(IZ)>
<net.robotmedia.acv.ui.widget.SuperImageView: I fitWidth()>
<net.robotmedia.acv.ui.widget.SuperImageView: I fitWidth(IZ)>
<net.robotmedia.acv.ui.widget.SuperImageView: I getInitialScrollX(I)>
<net.robotmedia.acv.ui.widget.SuperImageView: F getMaxHeight()>
<net.robotmedia.acv.ui.widget.SuperImageView: F getMaxWidth()>
<net.robotmedia.acv.ui.widget.SuperImageView: I getRootViewHeight()>
<net.robotmedia.acv.ui.widget.SuperImageView: I getRootViewWidth()>
<net.robotmedia.acv.ui.widget.SuperImageView: V initView()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isBiggerThanAllowed(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isSmallerThanAllowed(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isSmallerThanRootView(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: V recalculateScroll(FII)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Rect; resize(Landroid/graphics/Rect;IZ)>
<net.robotmedia.acv.ui.widget.SuperImageView: V safeScrollBy(IIII)>
<net.robotmedia.acv.ui.widget.SuperImageView: V safeScrollTo(IIII)>
<net.robotmedia.acv.ui.widget.SuperImageView: I scaleFit()>
<net.robotmedia.acv.ui.widget.SuperImageView: I scaleFit(IIZ)>
<net.robotmedia.acv.ui.widget.SuperImageView: I scaleNone()>
<net.robotmedia.acv.ui.widget.SuperImageView: V abortScrollerAnimation()>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Rect; animateTo(Landroid/graphics/Rect;ZJ)>
<net.robotmedia.acv.ui.widget.SuperImageView: Lnet/robotmedia/acv/ui/widget/SuperImageView$LayoutMeasures; calculateLayout(Landroid/graphics/Rect;Z)>
<net.robotmedia.acv.ui.widget.SuperImageView: V computeScroll()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z flingXY(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: I getOriginalHeight()>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Rect; getOriginalSize()>
<net.robotmedia.acv.ui.widget.SuperImageView: I getOriginalWidth()>
<net.robotmedia.acv.ui.widget.SuperImageView: F getZoomFactor()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isAnimating()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isBottomMost()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isLeftMost()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isRightMost()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isScaled()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isSmallerThanRootView()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z isTopMost()>
<net.robotmedia.acv.ui.widget.SuperImageView: Z onTouchEvent(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V recycleBitmap()>
<net.robotmedia.acv.ui.widget.SuperImageView: V safeScrollBy(II)>
<net.robotmedia.acv.ui.widget.SuperImageView: V scale(Ljava/lang/String;Z)>
<net.robotmedia.acv.ui.widget.SuperImageView: V scaleByFactor(F)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Rect; scrollTo(Landroid/graphics/Rect;Z)>
<net.robotmedia.acv.ui.widget.SuperImageView: V setCSVListener(Lnet/robotmedia/acv/ui/widget/SuperImageViewListener;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V smoothScroll(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.widget.SuperImageView: Landroid/graphics/Point; toImagePoint(Landroid/graphics/Point;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V zoom(FLandroid/graphics/Point;)>
<net.robotmedia.acv.ui.widget.SuperImageView: V zoom(ILandroid/graphics/Point;)>
<net.robotmedia.acv.utils.AlertUtils: V <init>()>
<net.robotmedia.acv.utils.AlertUtils: Landroid/app/AlertDialog; showYesNoAlert(Landroid/content/Context;ZIILandroid/content/DialogInterface$OnClickListener;Landroid/content/DialogInterface$OnClickListener;)>
<net.robotmedia.acv.utils.BuildUtils: V <init>()>
<net.robotmedia.acv.utils.BuildUtils: Z isHoneycombOrLater()>
<net.robotmedia.acv.utils.BuildUtils: Z isIceCreamSandwichOrLater()>
<net.robotmedia.acv.utils.FileUtils: V <init>()>
<net.robotmedia.acv.utils.FileUtils: V deleteDirectory(Ljava/io/File;)>
<net.robotmedia.acv.utils.FileUtils: Ljava/lang/String; getExtension(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Ljava/lang/String; getFileExtension(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Ljava/lang/String; getFileName(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isAudio(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isFont(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isHidden(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isImage(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isVideo(Ljava/lang/String;)>
<net.robotmedia.acv.utils.FileUtils: Z isWebpage(Ljava/lang/String;)>
<net.robotmedia.acv.utils.IntentUtils: V <init>()>
<net.robotmedia.acv.utils.IntentUtils: V openMarket(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.acv.utils.IntentUtils: V openURI(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.utils.IntentUtils: V view(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.acv.utils.MathUtils: V <init>()>
<net.robotmedia.acv.utils.MathUtils: I dipToPixel(Landroid/content/Context;F)>
<net.robotmedia.acv.utils.MathUtils: F distance(FFFF)>
<net.robotmedia.acv.utils.MathUtils: D getAngle(FFFF)>
<net.robotmedia.acv.utils.MathUtils: Z isEqual(III)>
<net.robotmedia.acv.utils.Reflect: V <clinit>()>
<net.robotmedia.acv.utils.Reflect: V <init>()>
<net.robotmedia.acv.utils.Reflect: I ACTION_MASK()>
<net.robotmedia.acv.utils.Reflect: I ACTION_POINTER_DOWN()>
<net.robotmedia.acv.utils.Reflect: I ACTION_POINTER_UP()>
<net.robotmedia.acv.utils.Reflect: I getIntegerField(Ljava/lang/reflect/Field;I)>
<net.robotmedia.acv.utils.Reflect: I getPointerCount(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.utils.Reflect: F getX(Landroid/view/MotionEvent;I)>
<net.robotmedia.acv.utils.Reflect: F getY(Landroid/view/MotionEvent;I)>
<net.robotmedia.acv.utils.Reflect: V initCompatibility()>
<net.robotmedia.acv.utils.StringUtils: V <init>()>
<net.robotmedia.acv.utils.StringUtils: Ljava/lang/String; convertStreamToString(Ljava/io/InputStream;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController$BillingStatus: V <clinit>()>
<net.robotmedia.billing.BillingController$BillingStatus: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingController$BillingStatus: Lnet/robotmedia/billing/BillingController$BillingStatus; valueOf(Ljava/lang/String;)>
<net.robotmedia.billing.BillingController$BillingStatus: [Lnet/robotmedia/billing/BillingController$BillingStatus; values()>
<net.robotmedia.billing.BillingController: V <clinit>()>
<net.robotmedia.billing.BillingController: V <init>()>
<net.robotmedia.billing.BillingController: V addManualConfirmation(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: Lnet/robotmedia/billing/BillingController$BillingStatus; checkBillingSupported(Landroid/content/Context;)>
<net.robotmedia.billing.BillingController: V confirmNotifications(Landroid/content/Context;[Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: Z confirmNotifications(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: I countPurchases(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V debug(Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V getPurchaseInformation(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: [B getSalt()>
<net.robotmedia.billing.BillingController: Ljava/util/List; getTransactions(Landroid/content/Context;)>
<net.robotmedia.billing.BillingController: Ljava/util/List; getTransactions(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: Z isPurchased(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V notifyPurchaseStateChange(Ljava/lang/String;Lnet/robotmedia/billing/model/Transaction$PurchaseState;)>
<net.robotmedia.billing.BillingController: V obfuscate(Landroid/content/Context;Lnet/robotmedia/billing/model/Transaction;)>
<net.robotmedia.billing.BillingController: V onBillingChecked(Z)>
<net.robotmedia.billing.BillingController: V onNotify(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V onPurchaseIntent(Ljava/lang/String;Landroid/app/PendingIntent;)>
<net.robotmedia.billing.BillingController: V onPurchaseStateChanged(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V onRequestPurchaseResponse(Ljava/lang/String;Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
<net.robotmedia.billing.BillingController: V onRequestSent(JLnet/robotmedia/billing/BillingRequest;)>
<net.robotmedia.billing.BillingController: V onResponseCode(Landroid/content/Context;JI)>
<net.robotmedia.billing.BillingController: V onTransactionsRestored()>
<net.robotmedia.billing.BillingController: Ljava/util/List; parsePurchases(Lorg/json/JSONObject;)>
<net.robotmedia.billing.BillingController: Z registerObserver(Lnet/robotmedia/billing/IBillingObserver;)>
<net.robotmedia.billing.BillingController: V requestPurchase(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.BillingController: V requestPurchase(Landroid/content/Context;Ljava/lang/String;Z)>
<net.robotmedia.billing.BillingController: V restoreTransactions(Landroid/content/Context;)>
<net.robotmedia.billing.BillingController: V setConfiguration(Lnet/robotmedia/billing/BillingController$IConfiguration;)>
<net.robotmedia.billing.BillingController: V setDebug(Z)>
<net.robotmedia.billing.BillingController: V setSignatureValidator(Lnet/robotmedia/billing/security/ISignatureValidator;)>
<net.robotmedia.billing.BillingController: V startPurchaseIntent(Landroid/app/Activity;Landroid/app/PendingIntent;Landroid/content/Intent;)>
<net.robotmedia.billing.BillingController: V storeTransaction(Landroid/content/Context;Lnet/robotmedia/billing/model/Transaction;)>
<net.robotmedia.billing.BillingController: V unobfuscate(Landroid/content/Context;Ljava/util/List;)>
<net.robotmedia.billing.BillingController: V unobfuscate(Landroid/content/Context;Lnet/robotmedia/billing/model/Transaction;)>
<net.robotmedia.billing.BillingController: Z unregisterObserver(Lnet/robotmedia/billing/IBillingObserver;)>
<net.robotmedia.billing.BillingController: Z verifyNonce(Lorg/json/JSONObject;)>
<net.robotmedia.billing.BillingReceiver: V <init>()>
<net.robotmedia.billing.BillingReceiver: V notify(Landroid/content/Context;Landroid/content/Intent;)>
<net.robotmedia.billing.BillingReceiver: V purchaseStateChanged(Landroid/content/Context;Landroid/content/Intent;)>
<net.robotmedia.billing.BillingReceiver: V responseCode(Landroid/content/Context;Landroid/content/Intent;)>
<net.robotmedia.billing.BillingReceiver: V onReceive(Landroid/content/Context;Landroid/content/Intent;)>
<net.robotmedia.billing.BillingRequest$ResponseCode: V <clinit>()>
<net.robotmedia.billing.BillingRequest$ResponseCode: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingRequest$ResponseCode: Z isResponseOk(I)>
<net.robotmedia.billing.BillingRequest$ResponseCode: Lnet/robotmedia/billing/BillingRequest$ResponseCode; valueOf(I)>
<net.robotmedia.billing.BillingRequest$ResponseCode: Lnet/robotmedia/billing/BillingRequest$ResponseCode; valueOf(Ljava/lang/String;)>
<net.robotmedia.billing.BillingRequest$ResponseCode: [Lnet/robotmedia/billing/BillingRequest$ResponseCode; values()>
<net.robotmedia.billing.BillingRequest: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingRequest: V addParams(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest: J getNonce()>
<net.robotmedia.billing.BillingRequest: I getStartId()>
<net.robotmedia.billing.BillingRequest: Z hasNonce()>
<net.robotmedia.billing.BillingRequest: Z isSuccess()>
<net.robotmedia.billing.BillingRequest: Landroid/os/Bundle; makeRequestBundle()>
<net.robotmedia.billing.BillingRequest: V onResponseCode(Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
<net.robotmedia.billing.BillingRequest: V processOkResponse(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest: J run(Lcom/android/vending/billing/IMarketBillingService;)>
<net.robotmedia.billing.BillingRequest: V setNonce(J)>
<net.robotmedia.billing.BillingRequest: Z validateResponse(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingService$1: V <clinit>()>
<net.robotmedia.billing.BillingService$Action: V <clinit>()>
<net.robotmedia.billing.BillingService$Action: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingService$Action: Lnet/robotmedia/billing/BillingService$Action; valueOf(Ljava/lang/String;)>
<net.robotmedia.billing.BillingService$Action: [Lnet/robotmedia/billing/BillingService$Action; values()>
<net.robotmedia.billing.BillingService: V <clinit>()>
<net.robotmedia.billing.BillingService: V <init>()>
<net.robotmedia.billing.BillingService: V bindMarketBillingService()>
<net.robotmedia.billing.BillingService: V checkBillingSupported(I)>
<net.robotmedia.billing.BillingService: V checkBillingSupported(Landroid/content/Context;)>
<net.robotmedia.billing.BillingService: V confirmNotifications(Landroid/content/Context;[Ljava/lang/String;)>
<net.robotmedia.billing.BillingService: V confirmNotifications(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: Landroid/content/Intent; createIntent(Landroid/content/Context;Lnet/robotmedia/billing/BillingService$Action;)>
<net.robotmedia.billing.BillingService: Ljava/lang/String; getActionForIntent(Landroid/content/Context;Lnet/robotmedia/billing/BillingService$Action;)>
<net.robotmedia.billing.BillingService: Lnet/robotmedia/billing/BillingService$Action; getActionFromIntent(Landroid/content/Intent;)>
<net.robotmedia.billing.BillingService: V getPurchaseInformation(Landroid/content/Context;[Ljava/lang/String;J)>
<net.robotmedia.billing.BillingService: V getPurchaseInformation(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: V handleCommand(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: V requestPurchase(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.billing.BillingService: V requestPurchase(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: V restoreTransactions(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: V restoreTransations(Landroid/content/Context;J)>
<net.robotmedia.billing.BillingService: V runPendingRequests()>
<net.robotmedia.billing.BillingService: V runRequest(Lnet/robotmedia/billing/BillingRequest;)>
<net.robotmedia.billing.BillingService: V runRequestOrQueue(Lnet/robotmedia/billing/BillingRequest;)>
<net.robotmedia.billing.BillingService: Landroid/os/IBinder; onBind(Landroid/content/Intent;)>
<net.robotmedia.billing.BillingService: V onDestroy()>
<net.robotmedia.billing.BillingService: V onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)>
<net.robotmedia.billing.BillingService: V onServiceDisconnected(Landroid/content/ComponentName;)>
<net.robotmedia.billing.BillingService: V onStart(Landroid/content/Intent;I)>
<net.robotmedia.billing.BillingService: I onStartCommand(Landroid/content/Intent;II)>
<net.robotmedia.billing.R$string: V <init>()>
<net.robotmedia.billing.R: V <init>()>
<net.robotmedia.billing.model.BillingDB$DatabaseHelper: V <init>(Lnet/robotmedia/billing/model/BillingDB;Landroid/content/Context;)>
<net.robotmedia.billing.model.BillingDB$DatabaseHelper: V createTransactionsTable(Landroid/database/sqlite/SQLiteDatabase;)>
<net.robotmedia.billing.model.BillingDB$DatabaseHelper: V onCreate(Landroid/database/sqlite/SQLiteDatabase;)>
<net.robotmedia.billing.model.BillingDB$DatabaseHelper: V onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)>
<net.robotmedia.billing.model.BillingDB: V <clinit>()>
<net.robotmedia.billing.model.BillingDB: V <init>(Landroid/content/Context;)>
<net.robotmedia.billing.model.BillingDB: Lnet/robotmedia/billing/model/Transaction; createTransaction(Landroid/database/Cursor;)>
<net.robotmedia.billing.model.BillingDB: V close()>
<net.robotmedia.billing.model.BillingDB: V insert(Lnet/robotmedia/billing/model/Transaction;)>
<net.robotmedia.billing.model.BillingDB: Landroid/database/Cursor; queryTransactions()>
<net.robotmedia.billing.model.BillingDB: Landroid/database/Cursor; queryTransactions(Ljava/lang/String;)>
<net.robotmedia.billing.model.BillingDB: Landroid/database/Cursor; queryTransactions(Ljava/lang/String;Lnet/robotmedia/billing/model/Transaction$PurchaseState;)>
<net.robotmedia.billing.model.Transaction$PurchaseState: V <clinit>()>
<net.robotmedia.billing.model.Transaction$PurchaseState: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.model.Transaction$PurchaseState: Lnet/robotmedia/billing/model/Transaction$PurchaseState; valueOf(I)>
<net.robotmedia.billing.model.Transaction$PurchaseState: Lnet/robotmedia/billing/model/Transaction$PurchaseState; valueOf(Ljava/lang/String;)>
<net.robotmedia.billing.model.Transaction$PurchaseState: [Lnet/robotmedia/billing/model/Transaction$PurchaseState; values()>
<net.robotmedia.billing.model.Transaction: V <init>()>
<net.robotmedia.billing.model.Transaction: V <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lnet/robotmedia/billing/model/Transaction$PurchaseState;Ljava/lang/String;JLjava/lang/String;)>
<net.robotmedia.billing.model.Transaction: Lnet/robotmedia/billing/model/Transaction; parse(Lorg/json/JSONObject;)>
<net.robotmedia.billing.model.Transaction: Ljava/lang/Object; clone()>
<net.robotmedia.billing.model.Transaction: Lnet/robotmedia/billing/model/Transaction; clone()>
<net.robotmedia.billing.model.Transaction: Z equals(Ljava/lang/Object;)>
<net.robotmedia.billing.model.Transaction: Ljava/lang/String; toString()>
<net.robotmedia.billing.model.TransactionManager: V <init>()>
<net.robotmedia.billing.model.TransactionManager: V addTransaction(Landroid/content/Context;Lnet/robotmedia/billing/model/Transaction;)>
<net.robotmedia.billing.model.TransactionManager: I countPurchases(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.model.TransactionManager: Ljava/util/List; cursorToList(Landroid/database/Cursor;)>
<net.robotmedia.billing.model.TransactionManager: Ljava/util/List; getTransactions(Landroid/content/Context;)>
<net.robotmedia.billing.model.TransactionManager: Ljava/util/List; getTransactions(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.model.TransactionManager: Z isPurchased(Landroid/content/Context;Ljava/lang/String;)>
<net.robotmedia.billing.utils.AESObfuscator$ValidationException: V <init>(Lnet/robotmedia/billing/utils/AESObfuscator;)>
<net.robotmedia.billing.utils.AESObfuscator$ValidationException: V <init>(Lnet/robotmedia/billing/utils/AESObfuscator;Ljava/lang/String;)>
<net.robotmedia.billing.utils.AESObfuscator: V <clinit>()>
<net.robotmedia.billing.utils.AESObfuscator: V <init>([BLjava/lang/String;)>
<net.robotmedia.billing.utils.AESObfuscator: Ljava/lang/String; obfuscate(Ljava/lang/String;)>
<net.robotmedia.billing.utils.AESObfuscator: Ljava/lang/String; unobfuscate(Ljava/lang/String;)>
<net.robotmedia.billing.utils.Base64: V <clinit>()>
<net.robotmedia.billing.utils.Base64: V <init>()>
<net.robotmedia.billing.utils.Base64: [B decode(Ljava/lang/String;)>
<net.robotmedia.billing.utils.Base64: [B decode([B)>
<net.robotmedia.billing.utils.Base64: [B decode([BII)>
<net.robotmedia.billing.utils.Base64: [B decode([BII[B)>
<net.robotmedia.billing.utils.Base64: I decode4to3([BI[BI[B)>
<net.robotmedia.billing.utils.Base64: [B decodeWebSafe(Ljava/lang/String;)>
<net.robotmedia.billing.utils.Base64: [B decodeWebSafe([B)>
<net.robotmedia.billing.utils.Base64: [B decodeWebSafe([BII)>
<net.robotmedia.billing.utils.Base64: Ljava/lang/String; encode([B)>
<net.robotmedia.billing.utils.Base64: Ljava/lang/String; encode([BII[BZ)>
<net.robotmedia.billing.utils.Base64: [B encode([BII[BI)>
<net.robotmedia.billing.utils.Base64: [B encode3to4([BII[BI[B)>
<net.robotmedia.billing.utils.Base64: Ljava/lang/String; encodeWebSafe([BZ)>
<net.robotmedia.billing.utils.Base64DecoderException: V <init>()>
<net.robotmedia.billing.utils.Base64DecoderException: V <init>(Ljava/lang/String;)>
<net.robotmedia.billing.utils.Compatibility: V <clinit>()>
<net.robotmedia.billing.utils.Compatibility: V <init>()>
<net.robotmedia.billing.utils.Compatibility: V initCompatibility()>
<net.robotmedia.billing.utils.Compatibility: Z isStartIntentSenderSupported()>
<net.robotmedia.billing.utils.Compatibility: V startIntentSender(Landroid/app/Activity;Landroid/content/IntentSender;Landroid/content/Intent;)>
<net.robotmedia.billing.utils.Installation: V <clinit>()>
<net.robotmedia.billing.utils.Installation: V <init>()>
<net.robotmedia.billing.utils.Installation: Ljava/lang/String; id(Landroid/content/Context;)>
<net.robotmedia.billing.utils.Installation: Ljava/lang/String; readInstallationFile(Ljava/io/File;)>
<net.robotmedia.billing.utils.Installation: V writeInstallationFile(Ljava/io/File;)>
<net.robotmedia.billing.utils.Security: V <clinit>()>
<net.robotmedia.billing.utils.Security: V <init>()>
<net.robotmedia.billing.utils.Security: J generateNonce()>
<net.robotmedia.billing.utils.Security: Lnet/robotmedia/billing/utils/AESObfuscator; getObfuscator(Landroid/content/Context;[B)>
<net.robotmedia.billing.utils.Security: Z isNonceKnown(J)>
<net.robotmedia.billing.utils.Security: Ljava/lang/String; obfuscate(Landroid/content/Context;[BLjava/lang/String;)>
<net.robotmedia.billing.utils.Security: V removeNonce(J)>
<net.robotmedia.billing.utils.Security: Ljava/lang/String; unobfuscate(Landroid/content/Context;[BLjava/lang/String;)>
<com.android.vending.billing.IMarketBillingService$Stub$Proxy: V <init>(Landroid/os/IBinder;)>
<com.android.vending.billing.IMarketBillingService$Stub$Proxy: Landroid/os/IBinder; asBinder()>
<com.android.vending.billing.IMarketBillingService$Stub$Proxy: Ljava/lang/String; getInterfaceDescriptor()>
<com.android.vending.billing.IMarketBillingService$Stub$Proxy: Landroid/os/Bundle; sendBillingRequest(Landroid/os/Bundle;)>
<com.android.vending.billing.IMarketBillingService$Stub: V <init>()>
<com.android.vending.billing.IMarketBillingService$Stub: Lcom/android/vending/billing/IMarketBillingService; asInterface(Landroid/os/IBinder;)>
<com.android.vending.billing.IMarketBillingService$Stub: Landroid/os/IBinder; asBinder()>
<com.android.vending.billing.IMarketBillingService$Stub: Z onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)>
<net.robotmedia.acv.adapter.RecentListBaseAdapter: V <init>(Landroid/content/Context;I)>
<net.robotmedia.acv.adapter.RecentListBaseAdapter: Landroid/view/View; getView(ILandroid/view/View;Landroid/view/ViewGroup;)>
<net.robotmedia.acv.adapter.RecentListBaseAdapter: V refresh()>
<net.robotmedia.acv.adapter.RecentListBaseAdapter: V setMaxNumItems(I)>
<net.robotmedia.acv.billing.BillingManager: V <init>(Landroid/content/Context;)>
<net.robotmedia.acv.billing.BillingManager: V disableAds()>
<net.robotmedia.acv.billing.BillingManager: Lnet/robotmedia/acv/billing/BillingManager; getInstance(Landroid/app/Activity;)>
<net.robotmedia.acv.billing.BillingManager: Lnet/robotmedia/acv/billing/BillingManager; getInstance(Landroid/content/Context;)>
<net.robotmedia.acv.billing.BillingManager: V restoreTransactions()>
<net.robotmedia.acv.billing.BillingManager: Z canPurchasePremium()>
<net.robotmedia.acv.billing.BillingManager: Lnet/robotmedia/acv/billing/BillingManager$IObserver; getObserver()>
<net.robotmedia.acv.billing.BillingManager: V initialize()>
<net.robotmedia.acv.billing.BillingManager: Z isPremium()>
<net.robotmedia.acv.billing.BillingManager: V onBillingChecked(Z)>
<net.robotmedia.acv.billing.BillingManager: V onPurchaseIntent(Ljava/lang/String;Landroid/app/PendingIntent;)>
<net.robotmedia.acv.billing.BillingManager: V onPurchaseStateChanged(Ljava/lang/String;Lnet/robotmedia/billing/model/Transaction$PurchaseState;)>
<net.robotmedia.acv.billing.BillingManager: V onRequestPurchaseResponse(Ljava/lang/String;Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
<net.robotmedia.acv.billing.BillingManager: V onTransactionsRestored()>
<net.robotmedia.acv.billing.BillingManager: V purchasePremium()>
<net.robotmedia.acv.billing.BillingManager: V setObserver(Lnet/robotmedia/acv/billing/BillingManager$IObserver;)>
<net.robotmedia.acv.comic.ACVComic: V <init>(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: Ljava/util/ArrayList; access$000(Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVComic: Ljava/util/ArrayList; access$100(Lnet/robotmedia/acv/comic/ACVComic;)>
<net.robotmedia.acv.comic.ACVComic: Landroid/graphics/Bitmap; getBitmap(Lnet/robotmedia/acv/comic/ACVContent;Landroid/webkit/WebView;II)>
<net.robotmedia.acv.comic.ACVComic: Lnet/robotmedia/acv/comic/ACVFrame; getFrame(II)>
<net.robotmedia.acv.comic.ACVComic: V init()>
<net.robotmedia.acv.comic.ACVComic: V addFile(Ljava/lang/String;Ljava/io/File;)>
<net.robotmedia.acv.comic.ACVComic: V destroy()>
<net.robotmedia.acv.comic.ACVComic: Lnet/robotmedia/acv/comic/ACVScreen; getACVScreen(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/Integer; getBackgroundColor(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/Integer; getBackgroundColor(II)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getContentBaseURL()>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getContentFromSource(Lnet/robotmedia/acv/comic/ACVContent;)>
<net.robotmedia.acv.comic.ACVComic: Ljava/util/List; getContents(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/util/List; getContents(II)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getDescription(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getDirection()>
<net.robotmedia.acv.comic.ACVComic: J getDuration(I)>
<net.robotmedia.acv.comic.ACVComic: J getDuration(II)>
<net.robotmedia.acv.comic.ACVComic: Ljava/io/File; getFile(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: I getFramesSize(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getImageNamePattern()>
<net.robotmedia.acv.comic.ACVComic: Ljava/io/InputStream; getInputStream(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: I getLength()>
<net.robotmedia.acv.comic.ACVComic: Lnet/robotmedia/acv/comic/ACVComic$Message; getMessage(I)>
<net.robotmedia.acv.comic.ACVComic: Lnet/robotmedia/acv/comic/ACVScreen; getOrCreateACVScreen(I)>
<net.robotmedia.acv.comic.ACVComic: I getOrientation()>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getOriginalNamePattern()>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getScaleMode()>
<net.robotmedia.acv.comic.ACVComic: Landroid/graphics/drawable/Drawable; getScreen(I)>
<net.robotmedia.acv.comic.ACVComic: Landroid/graphics/drawable/Drawable; getScreenWithContents(Landroid/webkit/WebView;I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/io/File; getSound(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/io/File; getSound(II)>
<net.robotmedia.acv.comic.ACVComic: Landroid/graphics/drawable/Drawable; getThumbnail(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getThumbnailNamePattern()>
<net.robotmedia.acv.comic.ACVComic: Ljava/util/ArrayList; getTitledScreens()>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getTransition(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/lang/String; getTransition(II)>
<net.robotmedia.acv.comic.ACVComic: J getTransitionDuration(I)>
<net.robotmedia.acv.comic.ACVComic: J getTransitionDuration(II)>
<net.robotmedia.acv.comic.ACVComic: Landroid/net/Uri; getUri(I)>
<net.robotmedia.acv.comic.ACVComic: Ljava/io/File; getVideoFile(I)>
<net.robotmedia.acv.comic.ACVComic: Z hasVibration(I)>
<net.robotmedia.acv.comic.ACVComic: Z isAutoplay(I)>
<net.robotmedia.acv.comic.ACVComic: Z isAutoplay(II)>
<net.robotmedia.acv.comic.ACVComic: Z isCompatible(I)>
<net.robotmedia.acv.comic.ACVComic: Z isLeftToRight()>
<net.robotmedia.acv.comic.ACVComic: Z isPaid()>
<net.robotmedia.acv.comic.ACVComic: Z isVibrate(II)>
<net.robotmedia.acv.comic.ACVComic: V prepareScreen(I)>
<net.robotmedia.acv.comic.ACVComic: Landroid/graphics/Rect; rectForSize(IIII)>
<net.robotmedia.acv.comic.ACVComic: V registerSound(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setBgcolorString(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setDirection(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setImageNamePattern(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setImageStartsAt(I)>
<net.robotmedia.acv.comic.ACVComic: V setLength(I)>
<net.robotmedia.acv.comic.ACVComic: V setMinViewerVersion(I)>
<net.robotmedia.acv.comic.ACVComic: V setOrientation(I)>
<net.robotmedia.acv.comic.ACVComic: V setOriginalNamePattern(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setPaid(Z)>
<net.robotmedia.acv.comic.ACVComic: V setScaleMode(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setSpecificationVersion(I)>
<net.robotmedia.acv.comic.ACVComic: V setThumbnailNamePattern(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setThumbnailStartsAt(I)>
<net.robotmedia.acv.comic.ACVComic: V setTitle(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic: V setTransition(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVContent: V <init>()>
<net.robotmedia.acv.comic.ACVContent: Ljava/lang/String; getContent()>
<net.robotmedia.acv.comic.ACVContent: Ljava/lang/String; getSource()>
<net.robotmedia.acv.comic.ACVContent: J getTransitionDuration()>
<net.robotmedia.acv.comic.ACVContent: V setContent(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVContent: V setSource(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVContent: V setTransitionDuration(J)>
<net.robotmedia.acv.comic.ACVFrame: V <init>()>
<net.robotmedia.acv.comic.ACVFrame: V add(Lnet/robotmedia/acv/comic/ACVContent;)>
<net.robotmedia.acv.comic.ACVFrame: Ljava/lang/String; getBgcolorString()>
<net.robotmedia.acv.comic.ACVFrame: Ljava/util/ArrayList; getContents()>
<net.robotmedia.acv.comic.ACVFrame: Ljava/lang/String; getDescription()>
<net.robotmedia.acv.comic.ACVFrame: F getDuration()>
<net.robotmedia.acv.comic.ACVFrame: F getRelativeHeight()>
<net.robotmedia.acv.comic.ACVFrame: F getRelativeWidth()>
<net.robotmedia.acv.comic.ACVFrame: F getRelativeX()>
<net.robotmedia.acv.comic.ACVFrame: F getRelativeY()>
<net.robotmedia.acv.comic.ACVFrame: Ljava/lang/String; getSound()>
<net.robotmedia.acv.comic.ACVFrame: Ljava/lang/String; getTransition()>
<net.robotmedia.acv.comic.ACVFrame: F getTransitionDuration()>
<net.robotmedia.acv.comic.ACVFrame: Z isAutoplay()>
<net.robotmedia.acv.comic.ACVFrame: Z isVibrate()>
<net.robotmedia.acv.comic.ACVFrame: V setAutoplay(Z)>
<net.robotmedia.acv.comic.ACVFrame: V setBgcolorString(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVFrame: V setDescription(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVFrame: V setDuration(F)>
<net.robotmedia.acv.comic.ACVFrame: V setSound(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVFrame: V setTransition(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVFrame: V setTransitionDuration(F)>
<net.robotmedia.acv.comic.ACVFrame: V setVibrate(Z)>
<net.robotmedia.acv.comic.FileComic: V <init>(Landroid/content/Context;I)>
<net.robotmedia.acv.comic.FileComic: V <init>(Ljava/lang/String;)>
<net.robotmedia.acv.comic.FileComic: Landroid/graphics/Bitmap; resampleAndSave()>
<net.robotmedia.acv.comic.FileComic: V destroy()>
<net.robotmedia.acv.comic.FileComic: I getLength()>
<net.robotmedia.acv.comic.FileComic: Landroid/graphics/drawable/Drawable; getScreen(I)>
<net.robotmedia.acv.comic.FileComic: Landroid/graphics/drawable/Drawable; getThumbnail(I)>
<net.robotmedia.acv.comic.FileComic: Landroid/net/Uri; getUri(I)>
<net.robotmedia.acv.comic.FileComic: V prepareScreen(I)>
<net.robotmedia.acv.comic.FolderComic: V <init>(Ljava/lang/String;)>
<net.robotmedia.acv.comic.FolderComic: Ljava/lang/String; getTempFilePath(I)>
<net.robotmedia.acv.comic.FolderComic: Landroid/graphics/Bitmap; resampleAndSave(IZ)>
<net.robotmedia.acv.comic.FolderComic: V destroy()>
<net.robotmedia.acv.comic.FolderComic: I getLength()>
<net.robotmedia.acv.comic.FolderComic: Landroid/graphics/drawable/Drawable; getScreen(I)>
<net.robotmedia.acv.comic.FolderComic: Landroid/graphics/drawable/Drawable; getThumbnail(I)>
<net.robotmedia.acv.comic.FolderComic: Landroid/net/Uri; getUri(I)>
<net.robotmedia.acv.comic.FolderComic: V prepareScreen(I)>
<net.robotmedia.acv.comic.ZipComic: V <init>(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/Bitmap; getBitmapFromEntryIfNeeded(Ljava/lang/String;Z)>
<net.robotmedia.acv.comic.ZipComic: V init(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/Bitmap; resample(Ljava/lang/String;I)>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/Bitmap; resampleAndSave(Ljava/lang/String;II)>
<net.robotmedia.acv.comic.ZipComic: V destroy()>
<net.robotmedia.acv.comic.ZipComic: Ljava/io/File; extract(Ljava/util/zip/ZipEntry;Ljava/lang/String;)>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/drawable/Drawable; getDrawable(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ZipComic: Ljava/io/InputStream; getInputStream(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ZipComic: Ljava/io/InputStream; getInputStream(Ljava/util/zip/ZipEntry;)>
<net.robotmedia.acv.comic.ZipComic: I getLength()>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/drawable/Drawable; getScreen(I)>
<net.robotmedia.acv.comic.ZipComic: Landroid/graphics/drawable/Drawable; getThumbnail(I)>
<net.robotmedia.acv.comic.ZipComic: Landroid/net/Uri; getUri(I)>
<net.robotmedia.acv.comic.ZipComic: V prepareScreen(I)>
<net.robotmedia.acv.comic.ZipComic: V processEntry(Ljava/util/zip/ZipEntry;)>
<net.robotmedia.acv.comic.ZipComic: V setZip(Ljava/util/zip/ZipFile;)>
<net.robotmedia.acv.ui.BrowseActivity: V <init>()>
<net.robotmedia.acv.ui.BrowseActivity: Z access$000(Lnet/robotmedia/acv/ui/BrowseActivity;)>
<net.robotmedia.acv.ui.BrowseActivity: V access$100(Lnet/robotmedia/acv/ui/BrowseActivity;I)>
<net.robotmedia.acv.ui.BrowseActivity: V access$200(Lnet/robotmedia/acv/ui/BrowseActivity;)>
<net.robotmedia.acv.ui.BrowseActivity: Z isLeftToRight()>
<net.robotmedia.acv.ui.BrowseActivity: V returnPosition(I)>
<net.robotmedia.acv.ui.BrowseActivity: V updatePosition()>
<net.robotmedia.acv.ui.BrowseActivity: V updatePosition(I)>
<net.robotmedia.acv.ui.BrowseActivity: V initializeWithResources()>
<net.robotmedia.acv.ui.BrowseActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V <init>()>
<net.robotmedia.acv.ui.ComicViewerActivity: V access$000(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V access$100(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V access$200(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V access$300(Lnet/robotmedia/acv/ui/ComicViewerActivity;Ljava/lang/String;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V access$400(Lnet/robotmedia/acv/ui/ComicViewerActivity;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z action(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z action(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Point;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z actionWithValue(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Point;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V adjustBrightness()>
<net.robotmedia.acv.ui.ComicViewerActivity: V adjustCornerVisibility(Landroid/widget/ImageButton;Ljava/lang/String;Ljava/lang/String;Z)>
<net.robotmedia.acv.ui.ComicViewerActivity: V adjustCornersVisibility(Z)>
<net.robotmedia.acv.ui.ComicViewerActivity: V adjustLowMemoryMode()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z attemptToLoadComicFromViewIntent(Landroid/content/Intent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V close()>
<net.robotmedia.acv.ui.ComicViewerActivity: Ljava/lang/String; describeOrientation(I)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z detectCornerButton(Landroid/view/MotionEvent;ZZ)>
<net.robotmedia.acv.ui.ComicViewerActivity: Ljava/util/ArrayList; findCandidates(Ljava/io/File;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Ljava/io/File; findNextComic()>
<net.robotmedia.acv.ui.ComicViewerActivity: Ljava/io/File; findPreviousComic()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z first()>
<net.robotmedia.acv.ui.ComicViewerActivity: V hideAds()>
<net.robotmedia.acv.ui.ComicViewerActivity: V hideRecentItems()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z isComicLoaded()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z last()>
<net.robotmedia.acv.ui.ComicViewerActivity: V loadComic(Ljava/lang/String;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V loadComic(Ljava/lang/String;I)>
<net.robotmedia.acv.ui.ComicViewerActivity: V loadComic(Ljava/lang/String;Landroid/content/Intent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z next()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z nextScreen()>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActionDown(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActionMove(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActionPointerDown(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActionPointerUp(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActionUp(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z previous()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z previousScreen()>
<net.robotmedia.acv.ui.ComicViewerActivity: V rotate()>
<net.robotmedia.acv.ui.ComicViewerActivity: V setAs()>
<net.robotmedia.acv.ui.ComicViewerActivity: V shareApp()>
<net.robotmedia.acv.ui.ComicViewerActivity: V shareScreen()>
<net.robotmedia.acv.ui.ComicViewerActivity: V showAds()>
<net.robotmedia.acv.ui.ComicViewerActivity: V showMenu()>
<net.robotmedia.acv.ui.ComicViewerActivity: V showRecentItems()>
<net.robotmedia.acv.ui.ComicViewerActivity: V startBrowseActivity()>
<net.robotmedia.acv.ui.ComicViewerActivity: V startSDBrowserActivity()>
<net.robotmedia.acv.ui.ComicViewerActivity: V startSettingsActivity()>
<net.robotmedia.acv.ui.ComicViewerActivity: V startSubscribeActivity()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z startupOrientation(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V trackOpen()>
<net.robotmedia.acv.ui.ComicViewerActivity: V unpressCornerButtons()>
<net.robotmedia.acv.ui.ComicViewerActivity: Ljava/lang/String; getComicPath()>
<net.robotmedia.acv.ui.ComicViewerActivity: V onActivityResult(IILandroid/content/Intent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onAnimationEnd(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onAnimationStart(Lnet/robotmedia/acv/ui/widget/ComicView;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Landroid/app/Dialog; onCreateDialog(I)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onCreateOptionsMenu(Landroid/view/Menu;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onDestroy()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onDoubleTap(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onDoubleTapEvent(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onDown(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onKeyDown(ILandroid/view/KeyEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onKeyUp(ILandroid/view/KeyEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onLongPress(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onMenuItemSelected(ILandroid/view/MenuItem;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onOptionsItemSelected(Landroid/view/MenuItem;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onPanelClosed(ILandroid/view/Menu;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onPrepareOptionsMenu(Landroid/view/Menu;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onRequestSubscription()>
<net.robotmedia.acv.ui.ComicViewerActivity: V onResume()>
<net.robotmedia.acv.ui.ComicViewerActivity: V onSaveInstanceState(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onScreenChanged(I)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onScreenLoadFailed()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onScroll(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onShowPress(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onSingleTapConfirmed(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onSingleTapUp(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V onStop()>
<net.robotmedia.acv.ui.ComicViewerActivity: Z onTouchEvent(Landroid/view/MotionEvent;)>
<net.robotmedia.acv.ui.ComicViewerActivity: V removePreviousComic(Z)>
<net.robotmedia.acv.ui.ComicViewerActivity: Z toggleControls()>
<net.robotmedia.acv.ui.SubscribeActivity: V <init>()>
<net.robotmedia.acv.ui.SubscribeActivity: Ljava/lang/String; access$100(Lnet/robotmedia/acv/ui/SubscribeActivity;)>
<net.robotmedia.acv.ui.SubscribeActivity: V initializeWithResources()>
<net.robotmedia.acv.ui.SubscribeActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.CollectionSettingsHelper: V <init>(Landroid/app/Activity;)>
<net.robotmedia.acv.ui.settings.CollectionSettingsHelper: V clearHistory()>
<net.robotmedia.acv.ui.settings.CollectionSettingsHelper: V prepareClearHistory(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.PremiumSettingsHelper: V <init>(Landroid/app/Activity;)>
<net.robotmedia.acv.ui.settings.PremiumSettingsHelper: V preparePurchasePremium(Landroid/preference/Preference;)>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity: V onActivityResult(IILandroid/content/Intent;)>
<net.robotmedia.acv.ui.settings.mobile.AboutSettingsActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.AdvancedSettingsActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.AdvancedSettingsActivity: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.mobile.AdvancedSettingsActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.AdvancedSettingsActivity: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: Ljava/lang/String; translateAction(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: V updatePreference(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: V onResume()>
<net.robotmedia.acv.ui.settings.mobile.ControlSettingsActivity: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: V removePremium()>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: Landroid/app/Activity; getPurchaseActivity()>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: V onDestroy()>
<net.robotmedia.acv.ui.settings.mobile.SettingsActivityMobile: V onPremiumPurchased()>
<net.robotmedia.acv.ui.settings.mobile.StorageSettingsActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.StorageSettingsActivity: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.mobile.StorageSettingsActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.mobile.VisualSettingsActivity: V <init>()>
<net.robotmedia.acv.ui.settings.mobile.VisualSettingsActivity: I getPreferencesResource()>
<net.robotmedia.acv.ui.settings.tablet.AboutSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.AboutSettingsFragment: V onActivityResult(IILandroid/content/Intent;)>
<net.robotmedia.acv.ui.settings.tablet.AboutSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.AdvancedSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.AdvancedSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.AdvancedSettingsFragment: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: Ljava/lang/String; translateAction(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: V updatePreference(Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: V onResume()>
<net.robotmedia.acv.ui.settings.tablet.ControlSettingsFragment: V onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)>
<net.robotmedia.acv.ui.settings.tablet.PremiumSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.PremiumSettingsFragment: Landroid/app/Activity; getPurchaseActivity()>
<net.robotmedia.acv.ui.settings.tablet.PremiumSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.PremiumSettingsFragment: V onDestroy()>
<net.robotmedia.acv.ui.settings.tablet.PremiumSettingsFragment: V onPremiumPurchased()>
<net.robotmedia.acv.ui.settings.tablet.StorageSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.StorageSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.settings.tablet.VisualSettingsFragment: V <init>()>
<net.robotmedia.acv.ui.settings.tablet.VisualSettingsFragment: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.acv.ui.widget.ComicView$4: V <init>(Lnet/robotmedia/acv/ui/widget/ComicView;Lnet/robotmedia/acv/ui/widget/ComicFrame;Lnet/robotmedia/acv/comic/ACVComic;IZLnet/robotmedia/acv/ui/widget/SuperImageView$LayoutMeasures;)>
<net.robotmedia.acv.ui.widget.ComicView$4: V onAnimationEnd(Lnet/robotmedia/acv/ui/widget/SuperImageView;)>
<net.robotmedia.billing.BillingRequest$CheckBillingSupported: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingRequest$CheckBillingSupported: Ljava/lang/String; getRequestType()>
<net.robotmedia.billing.BillingRequest$CheckBillingSupported: V processOkResponse(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest$ConfirmNotifications: V <init>(Ljava/lang/String;I[Ljava/lang/String;)>
<net.robotmedia.billing.BillingRequest$ConfirmNotifications: V addParams(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest$ConfirmNotifications: Ljava/lang/String; getRequestType()>
<net.robotmedia.billing.BillingRequest$GetPurchaseInformation: V <init>(Ljava/lang/String;I[Ljava/lang/String;)>
<net.robotmedia.billing.BillingRequest$GetPurchaseInformation: V addParams(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest$GetPurchaseInformation: Ljava/lang/String; getRequestType()>
<net.robotmedia.billing.BillingRequest$GetPurchaseInformation: Z hasNonce()>
<net.robotmedia.billing.BillingRequest$RequestPurchase: V <init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)>
<net.robotmedia.billing.BillingRequest$RequestPurchase: V addParams(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest$RequestPurchase: Ljava/lang/String; getRequestType()>
<net.robotmedia.billing.BillingRequest$RequestPurchase: V onResponseCode(Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
<net.robotmedia.billing.BillingRequest$RequestPurchase: V processOkResponse(Landroid/os/Bundle;)>
<net.robotmedia.billing.BillingRequest$RestoreTransactions: V <init>(Ljava/lang/String;I)>
<net.robotmedia.billing.BillingRequest$RestoreTransactions: Ljava/lang/String; getRequestType()>
<net.robotmedia.billing.BillingRequest$RestoreTransactions: Z hasNonce()>
<net.robotmedia.billing.BillingRequest$RestoreTransactions: V onResponseCode(Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
<net.robotmedia.billing.helper.AbstractBillingActivity: V <init>()>
<net.robotmedia.billing.helper.AbstractBillingActivity: Lnet/robotmedia/billing/BillingController$BillingStatus; checkBillingSupported()>
<net.robotmedia.billing.helper.AbstractBillingActivity: V onCreate(Landroid/os/Bundle;)>
<net.robotmedia.billing.helper.AbstractBillingActivity: V onDestroy()>
<net.robotmedia.billing.helper.AbstractBillingActivity: V requestPurchase(Ljava/lang/String;)>
<net.robotmedia.billing.helper.AbstractBillingActivity: V restoreTransactions()>
<net.robotmedia.billing.helper.AbstractBillingObserver: V <init>(Landroid/app/Activity;)>
<net.robotmedia.billing.helper.AbstractBillingObserver: Z isTransactionsRestored()>
<net.robotmedia.billing.helper.AbstractBillingObserver: V onPurchaseIntent(Ljava/lang/String;Landroid/app/PendingIntent;)>
<net.robotmedia.billing.helper.AbstractBillingObserver: V onTransactionsRestored()>
<net.robotmedia.billing.security.DefaultSignatureValidator: V <init>(Lnet/robotmedia/billing/BillingController$IConfiguration;)>
<net.robotmedia.billing.security.DefaultSignatureValidator: Ljava/security/PublicKey; generatePublicKey(Ljava/lang/String;)>
<net.robotmedia.billing.security.DefaultSignatureValidator: Z validate(Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.billing.security.DefaultSignatureValidator: Z validate(Ljava/security/PublicKey;Ljava/lang/String;Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: V <init>(Lnet/robotmedia/acv/comic/ACVComic;Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: Ljava/util/TreeMap; classify(Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: Z isLegacyThumbnail([Ljava/lang/String;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: V sort(Ljava/util/TreeMap;Ljava/util/ArrayList;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: V processEntry(Ljava/util/zip/ZipEntry;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: V processMetadata(Ljava/util/zip/ZipEntry;)>
<net.robotmedia.acv.comic.ACVComic$ACVZipComic: V setZip(Ljava/util/zip/ZipFile;)>
<net.robotmedia.acv.ui.settings.mobile.StorageSettingsActivity$1: V <init>(Lnet/robotmedia/acv/ui/settings/mobile/StorageSettingsActivity;Landroid/app/Activity;)>
<net.robotmedia.acv.ui.settings.mobile.StorageSettingsActivity$1: V clearHistory()>
<net.robotmedia.billing.helper.AbstractBillingActivity$1: V <init>(Lnet/robotmedia/billing/helper/AbstractBillingActivity;Landroid/app/Activity;)>
<net.robotmedia.billing.helper.AbstractBillingActivity$1: V onBillingChecked(Z)>
<net.robotmedia.billing.helper.AbstractBillingActivity$1: V onPurchaseStateChanged(Ljava/lang/String;Lnet/robotmedia/billing/model/Transaction$PurchaseState;)>
<net.robotmedia.billing.helper.AbstractBillingActivity$1: V onRequestPurchaseResponse(Ljava/lang/String;Lnet/robotmedia/billing/BillingRequest$ResponseCode;)>
